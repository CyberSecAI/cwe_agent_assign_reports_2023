{
  "retriever": "dense",
  "query": "## Vulnerability Description\nThe DSAB-local/DSAB repository through 2019-02-18 on GitHub allows **absolute path traversal** because the Flask send_file function is used unsafely.\n\n### Vulnerability Description Key Phrases\n- **weakness:** **absolute path traversal**\n- **product:** DSAB-local/DSAB repository\n- **version:** through 2019-02-18\n\n## CVE Reference Links Content Summary\nBased on the provided content, here's an analysis of the vulnerabilities related to the CVEs mentioned:\n\n**General Analysis:**\n\n*   **Root Cause:** The primary root cause for all the vulnerabilities described in these advisories is the unsafe use of the `flask.send_file` function in various Flask-based Python web applications. This function is used to send files to the user's browser but, when used improperly, allows attackers to access files and directories outside the intended web root.\n*   **Weaknesses:**  The main weakness is **CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')**. The use of `os.path.join` with unsanitized user input, which can include absolute paths or `../` sequences, bypasses the intended directory and allows an attacker to access arbitrary files.\n\n*   **Attack Vectors:** The attack vector is network-based. Attackers can exploit these vulnerabilities through HTTP requests, injecting malicious path names that are then passed to the vulnerable `send_file` function.\n*   **Required Attacker Capabilities:** Attackers require no special privileges or user interaction to exploit the vulnerabilities. They can exploit it by crafting malicious HTTP requests.\n\n*   **Impact of Exploitation:** The impact of exploitation is primarily a high risk to confidentiality as an attacker can read arbitrary files. The availability is low because while access to large files could cause issues, it is not the main attack vector. There is no impact to integrity, as the ability to modify data is not implied by the attack.\n*   **Scope**: The scope of these vulnerabilties is classified as \"changed\" meaning the vulnerable component is able to impact resources outside its defined security scope.\n\n**Specific CVE Details:**\n\nThe content provides a list of CVEs, and all of them have a common vulnerability of absolute path traversal due to the improper use of flask's `send_file` function. Here's a summary of the affected projects:\n\n*   **CVE-2022-31504:** `ChangeWeDer/BaiduWenkuSpider_flaskWeb` repository before 2021-11-29.\n*   **CVE-2022-31505:** `cheo0/MercadoEnLineaBack` repository. (Note: This repository no longer exists).\n*   **CVE-2022-31509:** `iedadata/usap-dc-website` repository through 1.0.1.\n*  **CVE-2022-31510:** `sergeKashkin/Simple-RAT` repository through 2022-05-03.\n*   **CVE-2022-31511:** `AFDudley/equanimity` repository through 2014-04-23.\n*   **CVE-2022-31512:** `Atom02/flask-mvc` repository through 2020-09-14.\n*   **CVE-2022-31513:** `BolunHan/Krypton` repository through 2021-06-03.\n*   **CVE-2022-31514:** `Caoyongqi912/Fan_Platform` repository through 2022-04-20.\n*   **CVE-2022-31515:** `Delor4/CarceresBE` repository through 1.0.\n*   **CVE-2022-31516:** `Harveyzyh/Python` repository. (Note: This repository no longer exists).\n*   **CVE-2022-31518:** `JustAnotherSoftwareDeveloper/Python-Recipe-Database` repository through 2021-03-31.\n*   **CVE-2022-31520:** `Luxas98/logstash-management-api` repository through 2020-05-04.\n*   **CVE-2022-31521:** `Niyaz-Mohamed/mosaic` repository through 1.0.0.\n*    **CVE-2022-31526:** `ThundeRatz/ThunderDocs` repository through 2022-04-06.\n*   **CVE-2022-31527:** `Wildog/flask-file-server` repository\n*   **CVE-2022-31528:** `bonn-activity-maps/bam_annotation_tool` repository through 2021-08-31.\n*   **CVE-2022-31532:** `dankolbman/travel_blahg` repository through 2016-01-16.\n*   **CVE-2022-31533:** `decentraminds/umbral` repository through 2020-01-15.\n*   **CVE-2022-31534:** `echoleegroup/PythonWeb` repository through 2018-10-31.\n*   **CVE-2022-31535:** `freefood89/Fishtank` repository through 2015-06-24.\n*   **CVE-2022-31536:** `jaygarza1982/ytdl-sync` repository through 2021-01-02.\n*   **CVE-2022-31537:** `jmcginty15/Solar-system-simulator` repository through 2021-07-26.\n*   **CVE-2022-31538:** `joaopedro-fg/mp-m08-interface` repository through 2020-12-10.\n*  **CVE-2022-31540:** `kumardeepak/hin-eng-preprocessing` repository through 2019-07-16.\n*   **CVE-2022-31544:** `meerstein/rbtm` repository through 1.5.\n*    **CVE-2022-31545:** `ml-inory/ModelConverter` repository through 2021-04-26.\n*   **CVE-2022-31546:** `nlpweb/glance` repository through 2014-06-27.\n*   **CVE-2022-31547:** `noamezekiel/sphere` repository through 2017-03-06.\n*   **CVE-2022-31548:** `nrlakin/homepage` repository through 2017-03-06.\n*  **CVE-2022-31551:** `pleomax00/flask-mongo-skel` repository through 2012-11-01.\n*   **CVE-2022-31552:** `project-anuvaad/anuvaad-corpus` repository through 2020-11-23.\n*   **CVE-2022-31553:** `rainsoupah/sleep-learner` repository through 2021-02-21.\n*   **CVE-2022-31554:** `rohitnayak/movie-review-sentiment-analysis` repository through 2017-05-07.\n*   **CVE-2022-31555:** `romain20100/nursequest` repository through 2018-02-22.\n*   **CVE-2022-31556:** `rusyasoft/TrainEnergyServer` repository through 2017-08-03.\n*  **CVE-2022-31557:**  `seveas/golem` repository through 2016-05-17.\n*  **CVE-2022-31559:** `tsileo/flask-yeoman` repository through 2013-09-13.\n*  **CVE-2022-31560:** `uncleYiba/photo_tag` repository through 2020-08-31.\n*  **CVE-2022-31561:** `varijkapil13/Sphere_ImageBackend` repository through 2020-01-15.\n*  **CVE-2022-31562:** `waveyan/internshipsystem` repository through 2018-05-22.\n*  **CVE-2022-31563:** `whmacmac/vprj` repository through 2022-04-06.\n*  **CVE-2022-31564:** `woduq1414/munhak-moa` repository through 2022-04-06.\n*  **CVE-2022-31565:** `yogson/syrabond` repository through 2020-05-25.\n*  **CVE-2022-31566:** `DSAB-local/DSAB` repository through 2019-02-18.\n*   **CVE-2022-31567:** `DSABenchmark/DSAB` repository through 2.1.\n*   **CVE-2022-31568:** `Rexians/rex-web` repository through 2022-06-05.\n*   **CVE-2022-31570:** `adriankoczuruek/ceneo-web-scrapper` repository through 2021-03-15.\n*   **CVE-2022-31571:** `akashtalole/python-flask-restful-api` repository through 2019-09-16.\n*   **CVE-2022-31572:** `ceee-vip/cockybook` repository through 2015-04-16.\n*   **CVE-2022-31574:** `deepaliupadhyay/RealEstate` repository through 2018-11-30.\n*   **CVE-2022-31575:** `duducosmos/livro_python` repository through 2018-06-06.\n*  **CVE-2022-31576:** `heidi-luong1109/shackerpanel` repository through 2021-05-25.\n*   **CVE-2022-31577:** `longmaoteamtf/audio_aligner_app` repository through 2021-07-26.\n*   **CVE-2022-31578:** `piaoyunsoft/bt_lnmp` repository through 2019-10-10.\n*  **CVE-2022-31579:** `ralphjzhang/iasset` repository through 2022-05-04.\n*   **CVE-2022-31582:** `shaolo1/VideoServer` repository through 2019-09-21.\n*   **CVE-2022-31583:** `sravaniboinepelli/AutomatedQuizEval` repository through 2020-04-27.\n*   **CVE-2022-31585:** `umeshpatil-dev/Home__internet` repository.\n*   **CVE-2022-31587:** `yuriyouzhou/KG-fashion-chatbot` repository through 2018-05-22.\n*   **CVE-2022-31588:** `zippies/testplatform` repository through 2016-07-19.\n\n**Additional Notes:**\n\n*   The provided content references a discussion about a \"Bug Slayer\" program, highlighting the semi-automated process of discovering and reporting vulnerabilities using tools like CodeQL. This discussion also raises concerns about the validity and impact of CVEs assigned to small, personal, and unmaintained projects. Some CVEs are challenged because the target repositories are not actual products that are used by others. This discussion is not specific to any of the CVEs but it provides a broader view of the context they are found in.\n\n**Mitigation:**\n\nThe recommended remediation for these vulnerabilities is to:\n\n1.  **Avoid Directly Using User Input with `send_file`:** Prevent user-supplied strings directly influence the path passed to the `send_file` function.\n2.  **Use `safe_join` for Relative Paths:** When constructing paths from user-controlled segments, utilize the `flask.safe_join` function that validates that the resulting path is within the defined directory.\n3.  **Use `send_from_directory` for Serving Files:** Instead of `send_file`, use `flask.send_from_directory`, which expects the file to be relative to a specific directory. It prevents traversal by restricting the locations files can be sent from.\n4. Input sanitization and validation must also be put into place when dealing with filepaths.\n\n**Conclusion:**\n\nThe vulnerabilities stem from a common pattern, i.e. not sanitizing input that affects the files accessed by the Flask `send_file` function. The primary impact is the unauthorized disclosure of sensitive files through path traversal. All of these reports highlight the importance of handling paths and file access with caution, especially when user-supplied input is involved.\n\nIt's also important to note, that there is a lack of consistent information about affected and patched versions in the advisories, which suggests that the affected projects are potentially abandoned or not properly maintained.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 22 | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') | Base | Allowed | alternate_terms | 0.800 |\n| 2 | 36 | Absolute Path Traversal | Base | Allowed | sparse | 0.359 |\n| 3 | 73 | External Control of File Name or Path | Base | Allowed | sparse | 0.197 |\n| 4 | 23 | Relative Path Traversal | Base | Allowed | sparse | 0.151 |\n| 5 | 37 | Path Traversal: '/absolute/pathname/here' | Variant | Allowed | sparse | 0.124 |\n| 6 | 24 | Path Traversal: '../filedir' | Variant | Allowed | dense | 0.557 |\n| 7 | 59 | Improper Link Resolution Before File Access ('Link Following') | Base | Allowed | graph | 0.002 |\n| 8 | 38 | Path Traversal: '\\absolute\\pathname\\here' | Variant | Allowed | sparse | 0.111 |\n| 9 | 427 | Uncontrolled Search Path Element | Base | Allowed | sparse | 0.102 |\n| 10 | 182 | Collapse of Data into Unsafe Value | Base | Allowed | sparse | 0.101 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n### Extended Description\n\n\nMany file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\" to access unexpected files. This is referred to as absolute path traversal.\n\n\n### Alternative Terms\nDirectory traversal\nPath traversal: \"Path traversal\" is preferred over \"directory traversal,\" but both terms are attack-focused.\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to apply to a wider range of files. For example, the product may add \".txt\" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.\n\n**[Relationship]** Pathname equivalence can be regarded as a type of canonicalization error.\n\n**[Relationship]** Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing \"/\" on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not).\n\n**[Terminology]** \n\nLike other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use \"directory traversal\" only to refer to the injection of \"..\" and equivalent sequences whose specific meaning is to traverse directories.\n\n\nOther variants like \"absolute pathname\" and \"drive letter\" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve \"..\" or equivalent.\n\n\n**[Research Gap]** Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap.\n\n**[Research Gap]** \n\nIncomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that \"..\\\" is vulnerable, but not test \"../\" which may also be vulnerable.\n\n\nAny combination of directory separators (\"/\", \"\\\", etc.) and numbers of \".\" (e.g. \"....\") can produce unique variants; for example, the \"//../\" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.\n\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2024-4315:** Chain: API for text generation using Large Language Models (LLMs) does not include the \"\\\" Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n\n\n\n\n## CWE-36: Absolute Path Traversal\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as \"/abs/path\" that can resolve to a location that is outside of that directory.\n\n### Extended Description\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-22\nChildOf -> CWE-22\nChildOf -> CWE-22\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-31503:** Python package constructs filenames using an unsafe os.path.join call on untrusted input, allowing absolute path traversal because os.path.join resets the pathname to an absolute path that is specified as part of the input.\n- **CVE-2002-1345:** Multiple FTP clients write arbitrary files via absolute paths in server responses\n- **CVE-2001-1269:** ZIP file extractor allows full path\n\n\n\n\n## CWE-73: External Control of File Name or Path\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product allows user input to control or influence paths or file names that are used in filesystem operations.\n\n### Extended Description\n\n\nThis could allow an attacker to access or modify system files or other files that are critical to the application.\n\n\nPath manipulation errors occur when the following two conditions are met:\n\n```\n\t\t1. An attacker can specify a path used in an operation on the filesystem.\n\t\t2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n```\nFor example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-642\nChildOf -> CWE-610\nChildOf -> CWE-20\nCanPrecede -> CWE-22\nCanPrecede -> CWE-41\nCanPrecede -> CWE-98\nCanPrecede -> CWE-434\nCanPrecede -> CWE-59\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** CWE-114 is a Class, but it is listed a child of CWE-73 in view 1000. This suggests some abstraction problems that should be resolved in future versions.\n\n**[Relationship]** \n\nThe external control of filenames can be the primary link in chains with other file-related weaknesses, as seen in the CanPrecede relationships. This is because software systems use files for many different purposes: to execute programs, load code libraries, to store application data, to store configuration settings, record temporary data, act as signals or semaphores to other processes, etc.\n\n\nHowever, those weaknesses do not always require external control. For example, link-following weaknesses (CWE-59) often involve pathnames that are not controllable by the attacker at all.\n\n\nThe external control can be resultant from other issues. For example, in PHP applications, the register_globals setting can allow an attacker to modify variables that the programmer thought were immutable, enabling file inclusion (CWE-98) and path traversal (CWE-22). Operating with excessive privileges (CWE-250) might allow an attacker to specify an input filename that is not directly readable by the attacker, but is accessible to the privileged program. A buffer overflow (CWE-119) might give an attacker control over nearby memory locations that are related to pathnames, but were not directly modifiable by the attacker.\n\n\n\n\n### Observed Examples\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n- **CVE-2008-5748:** Chain: external control of values for user's desired language and theme enables path traversal.\n- **CVE-2008-5764:** Chain: external control of user's target language enables remote file inclusion.\n\n\n\n\n## CWE-23: Relative Path Traversal\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.\n\n### Extended Description\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n### Alternative Terms\nZip Slip: \"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).\n\n### Relationships\nChildOf -> CWE-22\nChildOf -> CWE-22\nChildOf -> CWE-22\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n- **CVE-2019-20916:** Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as \"../\"\n\n\n\n\n## CWE-37: Path Traversal: '/absolute/pathname/here'\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe product accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-36\nChildOf -> CWE-160\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2002-1345:** Multiple FTP clients write arbitrary files via absolute paths in server responses\n- **CVE-2001-1269:** ZIP file extractor allows full path\n- **CVE-2002-1818:** Path traversal using absolute pathname\n\n\n\n\n## CWE-24: Path Traversal: '../filedir'\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"../\" sequences that can resolve to a location that is outside of that directory.\n\n### Extended Description\n\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nThe \"../\" manipulation is the canonical manipulation for operating systems that use \"/\" as directory separators, such as UNIX- and Linux-based systems. In some cases, it is useful for bypassing protection schemes in environments for which \"/\" is supported but not the primary separator, such as Windows, which uses \"\\\" but can also accept \"/\".\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-23\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n\n\n\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\ninsecure temporary file: Some people use the phrase \"insecure temporary file\" when referring to a link following weakness, but other weaknesses can produce insecure temporary files without any symlink involvement at all.\nZip Slip: \"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Theoretical]** \n\nLink following vulnerabilities are Multi-factor Vulnerabilities (MFV). They are the combination of multiple elements: file or directory permissions, filename predictability, race conditions, and in some cases, a design limitation in which there is no mechanism for performing atomic file creation operations.\n\n\nSome potential factors are race conditions, permissions, and predictability.\n\n\n\n\n### Observed Examples\n- **CVE-1999-1386:** Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.\n- **CVE-2000-1178:** Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.\n- **CVE-2004-0217:** Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.\n\n\n\n\n## CWE-38: Path Traversal: '\\absolute\\pathname\\here'\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe product accepts input in the form of a backslash absolute path ('\\absolute\\pathname\\here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-36\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-1999-1263:** Mail client allows remote attackers to overwrite arbitrary files via an e-mail message containing a uuencoded attachment that specifies the full pathname for the file to be modified.\n- **CVE-2003-0753:** Remote attackers can read arbitrary files via a full pathname to the target file in config parameter.\n- **CVE-2002-1525:** Remote attackers can read arbitrary files via an absolute pathname.\n\n\n\n\n## CWE-427: Uncontrolled Search Path Element\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.\n\n### Extended Description\n\n\nAlthough this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as \"/tmp\" or the current working directory.\n\n\nIn Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled:\n\n\n  - the directory from which the program has been loaded\n\n  - the current working directory\n\nIn some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used.\n\nOne or more locations in that path could include the Windows drive root or its subdirectories. This often exists in Linux-based code assuming the controlled nature of the root directory (/) or its subdirectories (/etc, etc), or a code that recursively accesses the parent directory. In Windows, the drive root and some of its subdirectories have weak permissions by default, which makes them uncontrolled.\n\n\nIn some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element.\n\n\nIn software package management frameworks (e.g., npm, RubyGems, or PyPi), the framework may identify dependencies on third-party libraries or other packages, then consult a repository that contains the desired package. The framework may search a public repository before a private repository. This could be exploited by attackers by placing a malicious package in the public repository that has the same name as a package from the private repository. The search path might not be directly under control of the developer relying on the framework, but this search order effectively contains an untrusted element.\n\n\n### Alternative Terms\nDLL preloading: This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.\nBinary planting: This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.\nInsecure library loading: This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.\nDependency confusion: As of February 2021, this term is used to describe CWE-427 in the context of managing installation of software package dependencies, in which attackers release packages on public sites where the names are the same as package names used by private repositories, and the search for the dependent package tries the public site first, downloading untrusted code. It may also be referred to as a \"substitution attack.\"\n\n### Relationships\nChildOf -> CWE-668\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Unlike untrusted search path (CWE-426), which inherently involves control over the definition of a control sphere (i.e., modification of a search path), this entry concerns a fixed control sphere in which some part of the sphere may be under attacker control (i.e., the search path cannot be modified by an attacker, but one element of the path can be under attacker control).\n\n**[Theoretical]** This weakness is not a clean fit under CWE-668 or CWE-610, which suggests that the control sphere model might need enhancement or clarification.\n\n\n\n### Observed Examples\n- **CVE-2023-25815:** chain: a change in an underlying package causes the gettext function to use implicit initialization with a hard-coded path (CWE-1419) under the user-writable C:\\ drive, introducing an untrusted search path element (CWE-427) that enables spoofing of messages.\n- **CVE-2022-4826:** Go-based git extension on Windows can search for and execute a malicious \"..exe\" in a repository because Go searches the current working directory if git.exe is not found in the PATH\n- **CVE-2020-26284:** A Static Site Generator built in Go, when running on Windows, searches the current working directory for a command, possibly allowing code execution using a malicious .exe or .bat file with the name being searched\n\n\n\n\n## CWE-182: Collapse of Data into Unsafe Value\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product filters data in a way that causes it to be reduced or \"collapsed\" into an unsafe value that violates an expected security property.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\nCanPrecede -> CWE-33\nCanPrecede -> CWE-34\nCanPrecede -> CWE-35\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Overlaps regular expressions, although an implementation might not necessarily use regexp's.\n\n\n\n### Observed Examples\n- **CVE-2004-0815:** \"/.////\" in pathname collapses to absolute path.\n- **CVE-2005-3123:** \"/.//..//////././\" is collapsed into \"/.././\" after \"..\" and \"//\" sequences are removed.\n- **CVE-2002-0325:** \".../...//\" collapsed to \"...\" due to removal of \"./\" in web server.\n\n",
  "keyphrases": {
    "base_query": "## Vulnerability Description\nThe DSAB-local/DSAB repository through 2019-02-18 on GitHub allows **absolute path traversal** because the Flask send_file function is used unsafely.\n\n### Vulnerability Description Key Phrases\n- **weakness:** **absolute path traversal**\n- **product:** DSAB-local/DSAB repository\n- **version:** through 2019-02-18\n\n## CVE Reference Links Content Summary\nBased on the provided content, here's an analysis of the vulnerabilities related to the CVEs mentioned:\n\n**General Analysis:**\n\n*   **Root Cause:** The primary root cause for all the vulnerabilities described in these advisories is the unsafe use of the `flask.send_file` function in various Flask-based Python web applications. This function is used to send files to the user's browser but, when used improperly, allows attackers to access files and directories outside the intended web root.\n*   **Weaknesses:**  The main weakness is **CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')**. The use of `os.path.join` with unsanitized user input, which can include absolute paths or `../` sequences, bypasses the intended directory and allows an attacker to access arbitrary files.\n\n*   **Attack Vectors:** The attack vector is network-based. Attackers can exploit these vulnerabilities through HTTP requests, injecting malicious path names that are then passed to the vulnerable `send_file` function.\n*   **Required Attacker Capabilities:** Attackers require no special privileges or user interaction to exploit the vulnerabilities. They can exploit it by crafting malicious HTTP requests.\n\n*   **Impact of Exploitation:** The impact of exploitation is primarily a high risk to confidentiality as an attacker can read arbitrary files. The availability is low because while access to large files could cause issues, it is not the main attack vector. There is no impact to integrity, as the ability to modify data is not implied by the attack.\n*   **Scope**: The scope of these vulnerabilties is classified as \"changed\" meaning the vulnerable component is able to impact resources outside its defined security scope.\n\n**Specific CVE Details:**\n\nThe content provides a list of CVEs, and all of them have a common vulnerability of absolute path traversal due to the improper use of flask's `send_file` function. Here's a summary of the affected projects:\n\n*   **CVE-2022-31504:** `ChangeWeDer/BaiduWenkuSpider_flaskWeb` repository before 2021-11-29.\n*   **CVE-2022-31505:** `cheo0/MercadoEnLineaBack` repository. (Note: This repository no longer exists).\n*   **CVE-2022-31509:** `iedadata/usap-dc-website` repository through 1.0.1.\n*  **CVE-2022-31510:** `sergeKashkin/Simple-RAT` repository through 2022-05-03.\n*   **CVE-2022-31511:** `AFDudley/equanimity` repository through 2014-04-23.\n*   **CVE-2022-31512:** `Atom02/flask-mvc` repository through 2020-09-14.\n*   **CVE-2022-31513:** `BolunHan/Krypton` repository through 2021-06-03.\n*   **CVE-2022-31514:** `Caoyongqi912/Fan_Platform` repository through 2022-04-20.\n*   **CVE-2022-31515:** `Delor4/CarceresBE` repository through 1.0.\n*   **CVE-2022-31516:** `Harveyzyh/Python` repository. (Note: This repository no longer exists).\n*   **CVE-2022-31518:** `JustAnotherSoftwareDeveloper/Python-Recipe-Database` repository through 2021-03-31.\n*   **CVE-2022-31520:** `Luxas98/logstash-management-api` repository through 2020-05-04.\n*   **CVE-2022-31521:** `Niyaz-Mohamed/mosaic` repository through 1.0.0.\n*    **CVE-2022-31526:** `ThundeRatz/ThunderDocs` repository through 2022-04-06.\n*   **CVE-2022-31527:** `Wildog/flask-file-server` repository\n*   **CVE-2022-31528:** `bonn-activity-maps/bam_annotation_tool` repository through 2021-08-31.\n*   **CVE-2022-31532:** `dankolbman/travel_blahg` repository through 2016-01-16.\n*   **CVE-2022-31533:** `decentraminds/umbral` repository through 2020-01-15.\n*   **CVE-2022-31534:** `echoleegroup/PythonWeb` repository through 2018-10-31.\n*   **CVE-2022-31535:** `freefood89/Fishtank` repository through 2015-06-24.\n*   **CVE-2022-31536:** `jaygarza1982/ytdl-sync` repository through 2021-01-02.\n*   **CVE-2022-31537:** `jmcginty15/Solar-system-simulator` repository through 2021-07-26.\n*   **CVE-2022-31538:** `joaopedro-fg/mp-m08-interface` repository through 2020-12-10.\n*  **CVE-2022-31540:** `kumardeepak/hin-eng-preprocessing` repository through 2019-07-16.\n*   **CVE-2022-31544:** `meerstein/rbtm` repository through 1.5.\n*    **CVE-2022-31545:** `ml-inory/ModelConverter` repository through 2021-04-26.\n*   **CVE-2022-31546:** `nlpweb/glance` repository through 2014-06-27.\n*   **CVE-2022-31547:** `noamezekiel/sphere` repository through 2017-03-06.\n*   **CVE-2022-31548:** `nrlakin/homepage` repository through 2017-03-06.\n*  **CVE-2022-31551:** `pleomax00/flask-mongo-skel` repository through 2012-11-01.\n*   **CVE-2022-31552:** `project-anuvaad/anuvaad-corpus` repository through 2020-11-23.\n*   **CVE-2022-31553:** `rainsoupah/sleep-learner` repository through 2021-02-21.\n*   **CVE-2022-31554:** `rohitnayak/movie-review-sentiment-analysis` repository through 2017-05-07.\n*   **CVE-2022-31555:** `romain20100/nursequest` repository through 2018-02-22.\n*   **CVE-2022-31556:** `rusyasoft/TrainEnergyServer` repository through 2017-08-03.\n*  **CVE-2022-31557:**  `seveas/golem` repository through 2016-05-17.\n*  **CVE-2022-31559:** `tsileo/flask-yeoman` repository through 2013-09-13.\n*  **CVE-2022-31560:** `uncleYiba/photo_tag` repository through 2020-08-31.\n*  **CVE-2022-31561:** `varijkapil13/Sphere_ImageBackend` repository through 2020-01-15.\n*  **CVE-2022-31562:** `waveyan/internshipsystem` repository through 2018-05-22.\n*  **CVE-2022-31563:** `whmacmac/vprj` repository through 2022-04-06.\n*  **CVE-2022-31564:** `woduq1414/munhak-moa` repository through 2022-04-06.\n*  **CVE-2022-31565:** `yogson/syrabond` repository through 2020-05-25.\n*  **CVE-2022-31566:** `DSAB-local/DSAB` repository through 2019-02-18.\n*   **CVE-2022-31567:** `DSABenchmark/DSAB` repository through 2.1.\n*   **CVE-2022-31568:** `Rexians/rex-web` repository through 2022-06-05.\n*   **CVE-2022-31570:** `adriankoczuruek/ceneo-web-scrapper` repository through 2021-03-15.\n*   **CVE-2022-31571:** `akashtalole/python-flask-restful-api` repository through 2019-09-16.\n*   **CVE-2022-31572:** `ceee-vip/cockybook` repository through 2015-04-16.\n*   **CVE-2022-31574:** `deepaliupadhyay/RealEstate` repository through 2018-11-30.\n*   **CVE-2022-31575:** `duducosmos/livro_python` repository through 2018-06-06.\n*  **CVE-2022-31576:** `heidi-luong1109/shackerpanel` repository through 2021-05-25.\n*   **CVE-2022-31577:** `longmaoteamtf/audio_aligner_app` repository through 2021-07-26.\n*   **CVE-2022-31578:** `piaoyunsoft/bt_lnmp` repository through 2019-10-10.\n*  **CVE-2022-31579:** `ralphjzhang/iasset` repository through 2022-05-04.\n*   **CVE-2022-31582:** `shaolo1/VideoServer` repository through 2019-09-21.\n*   **CVE-2022-31583:** `sravaniboinepelli/AutomatedQuizEval` repository through 2020-04-27.\n*   **CVE-2022-31585:** `umeshpatil-dev/Home__internet` repository.\n*   **CVE-2022-31587:** `yuriyouzhou/KG-fashion-chatbot` repository through 2018-05-22.\n*   **CVE-2022-31588:** `zippies/testplatform` repository through 2016-07-19.\n\n**Additional Notes:**\n\n*   The provided content references a discussion about a \"Bug Slayer\" program, highlighting the semi-automated process of discovering and reporting vulnerabilities using tools like CodeQL. This discussion also raises concerns about the validity and impact of CVEs assigned to small, personal, and unmaintained projects. Some CVEs are challenged because the target repositories are not actual products that are used by others. This discussion is not specific to any of the CVEs but it provides a broader view of the context they are found in.\n\n**Mitigation:**\n\nThe recommended remediation for these vulnerabilities is to:\n\n1.  **Avoid Directly Using User Input with `send_file`:** Prevent user-supplied strings directly influence the path passed to the `send_file` function.\n2.  **Use `safe_join` for Relative Paths:** When constructing paths from user-controlled segments, utilize the `flask.safe_join` function that validates that the resulting path is within the defined directory.\n3.  **Use `send_from_directory` for Serving Files:** Instead of `send_file`, use `flask.send_from_directory`, which expects the file to be relative to a specific directory. It prevents traversal by restricting the locations files can be sent from.\n4. Input sanitization and validation must also be put into place when dealing with filepaths.\n\n**Conclusion:**\n\nThe vulnerabilities stem from a common pattern, i.e. not sanitizing input that affects the files accessed by the Flask `send_file` function. The primary impact is the unauthorized disclosure of sensitive files through path traversal. All of these reports highlight the importance of handling paths and file access with caution, especially when user-supplied input is involved.\n\nIt's also important to note, that there is a lack of consistent information about affected and patched versions in the advisories, which suggests that the affected projects are potentially abandoned or not properly maintained.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 22 | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') | Base | Allowed | alternate_terms | 0.800 |\n| 2 | 36 | Absolute Path Traversal | Base | Allowed | sparse | 0.359 |\n| 3 | 73 | External Control of File Name or Path | Base | Allowed | sparse | 0.197 |\n| 4 | 23 | Relative Path Traversal | Base | Allowed | sparse | 0.151 |\n| 5 | 37 | Path Traversal: '/absolute/pathname/here' | Variant | Allowed | sparse | 0.124 |\n| 6 | 24 | Path Traversal: '../filedir' | Variant | Allowed | dense | 0.557 |\n| 7 | 59 | Improper Link Resolution Before File Access ('Link Following') | Base | Allowed | graph | 0.002 |\n| 8 | 38 | Path Traversal: '\\absolute\\pathname\\here' | Variant | Allowed | sparse | 0.111 |\n| 9 | 427 | Uncontrolled Search Path Element | Base | Allowed | sparse | 0.102 |\n| 10 | 182 | Collapse of Data into Unsafe Value | Base | Allowed | sparse | 0.101 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n### Extended Description\n\n\nMany file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\" to access unexpected files. This is referred to as absolute path traversal.\n\n\n### Alternative Terms\nDirectory traversal\nPath traversal: \"Path traversal\" is preferred over \"directory traversal,\" but both terms are attack-focused.\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to apply to a wider range of files. For example, the product may add \".txt\" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.\n\n**[Relationship]** Pathname equivalence can be regarded as a type of canonicalization error.\n\n**[Relationship]** Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing \"/\" on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not).\n\n**[Terminology]** \n\nLike other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use \"directory traversal\" only to refer to the injection of \"..\" and equivalent sequences whose specific meaning is to traverse directories.\n\n\nOther variants like \"absolute pathname\" and \"drive letter\" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve \"..\" or equivalent.\n\n\n**[Research Gap]** Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap.\n\n**[Research Gap]** \n\nIncomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that \"..\\\" is vulnerable, but not test \"../\" which may also be vulnerable.\n\n\nAny combination of directory separators (\"/\", \"\\\", etc.) and numbers of \".\" (e.g. \"....\") can produce unique variants; for example, the \"//../\" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.\n\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2024-4315:** Chain: API for text generation using Large Language Models (LLMs) does not include the \"\\\" Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n\n\n\n\n## CWE-36: Absolute Path Traversal\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as \"/abs/path\" that can resolve to a location that is outside of that directory.\n\n### Extended Description\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-22\nChildOf -> CWE-22\nChildOf -> CWE-22\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-31503:** Python package constructs filenames using an unsafe os.path.join call on untrusted input, allowing absolute path traversal because os.path.join resets the pathname to an absolute path that is specified as part of the input.\n- **CVE-2002-1345:** Multiple FTP clients write arbitrary files via absolute paths in server responses\n- **CVE-2001-1269:** ZIP file extractor allows full path\n\n\n\n\n## CWE-73: External Control of File Name or Path\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product allows user input to control or influence paths or file names that are used in filesystem operations.\n\n### Extended Description\n\n\nThis could allow an attacker to access or modify system files or other files that are critical to the application.\n\n\nPath manipulation errors occur when the following two conditions are met:\n\n```\n\t\t1. An attacker can specify a path used in an operation on the filesystem.\n\t\t2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n```\nFor example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-642\nChildOf -> CWE-610\nChildOf -> CWE-20\nCanPrecede -> CWE-22\nCanPrecede -> CWE-41\nCanPrecede -> CWE-98\nCanPrecede -> CWE-434\nCanPrecede -> CWE-59\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** CWE-114 is a Class, but it is listed a child of CWE-73 in view 1000. This suggests some abstraction problems that should be resolved in future versions.\n\n**[Relationship]** \n\nThe external control of filenames can be the primary link in chains with other file-related weaknesses, as seen in the CanPrecede relationships. This is because software systems use files for many different purposes: to execute programs, load code libraries, to store application data, to store configuration settings, record temporary data, act as signals or semaphores to other processes, etc.\n\n\nHowever, those weaknesses do not always require external control. For example, link-following weaknesses (CWE-59) often involve pathnames that are not controllable by the attacker at all.\n\n\nThe external control can be resultant from other issues. For example, in PHP applications, the register_globals setting can allow an attacker to modify variables that the programmer thought were immutable, enabling file inclusion (CWE-98) and path traversal (CWE-22). Operating with excessive privileges (CWE-250) might allow an attacker to specify an input filename that is not directly readable by the attacker, but is accessible to the privileged program. A buffer overflow (CWE-119) might give an attacker control over nearby memory locations that are related to pathnames, but were not directly modifiable by the attacker.\n\n\n\n\n### Observed Examples\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n- **CVE-2008-5748:** Chain: external control of values for user's desired language and theme enables path traversal.\n- **CVE-2008-5764:** Chain: external control of user's target language enables remote file inclusion.\n\n\n\n\n## CWE-23: Relative Path Traversal\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.\n\n### Extended Description\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n### Alternative Terms\nZip Slip: \"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).\n\n### Relationships\nChildOf -> CWE-22\nChildOf -> CWE-22\nChildOf -> CWE-22\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n- **CVE-2019-20916:** Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as \"../\"\n\n\n\n\n## CWE-37: Path Traversal: '/absolute/pathname/here'\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe product accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-36\nChildOf -> CWE-160\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2002-1345:** Multiple FTP clients write arbitrary files via absolute paths in server responses\n- **CVE-2001-1269:** ZIP file extractor allows full path\n- **CVE-2002-1818:** Path traversal using absolute pathname\n\n\n\n\n## CWE-24: Path Traversal: '../filedir'\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"../\" sequences that can resolve to a location that is outside of that directory.\n\n### Extended Description\n\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nThe \"../\" manipulation is the canonical manipulation for operating systems that use \"/\" as directory separators, such as UNIX- and Linux-based systems. In some cases, it is useful for bypassing protection schemes in environments for which \"/\" is supported but not the primary separator, such as Windows, which uses \"\\\" but can also accept \"/\".\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-23\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n\n\n\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\ninsecure temporary file: Some people use the phrase \"insecure temporary file\" when referring to a link following weakness, but other weaknesses can produce insecure temporary files without any symlink involvement at all.\nZip Slip: \"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Theoretical]** \n\nLink following vulnerabilities are Multi-factor Vulnerabilities (MFV). They are the combination of multiple elements: file or directory permissions, filename predictability, race conditions, and in some cases, a design limitation in which there is no mechanism for performing atomic file creation operations.\n\n\nSome potential factors are race conditions, permissions, and predictability.\n\n\n\n\n### Observed Examples\n- **CVE-1999-1386:** Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.\n- **CVE-2000-1178:** Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.\n- **CVE-2004-0217:** Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.\n\n\n\n\n## CWE-38: Path Traversal: '\\absolute\\pathname\\here'\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe product accepts input in the form of a backslash absolute path ('\\absolute\\pathname\\here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-36\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-1999-1263:** Mail client allows remote attackers to overwrite arbitrary files via an e-mail message containing a uuencoded attachment that specifies the full pathname for the file to be modified.\n- **CVE-2003-0753:** Remote attackers can read arbitrary files via a full pathname to the target file in config parameter.\n- **CVE-2002-1525:** Remote attackers can read arbitrary files via an absolute pathname.\n\n\n\n\n## CWE-427: Uncontrolled Search Path Element\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.\n\n### Extended Description\n\n\nAlthough this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as \"/tmp\" or the current working directory.\n\n\nIn Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled:\n\n\n  - the directory from which the program has been loaded\n\n  - the current working directory\n\nIn some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used.\n\nOne or more locations in that path could include the Windows drive root or its subdirectories. This often exists in Linux-based code assuming the controlled nature of the root directory (/) or its subdirectories (/etc, etc), or a code that recursively accesses the parent directory. In Windows, the drive root and some of its subdirectories have weak permissions by default, which makes them uncontrolled.\n\n\nIn some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element.\n\n\nIn software package management frameworks (e.g., npm, RubyGems, or PyPi), the framework may identify dependencies on third-party libraries or other packages, then consult a repository that contains the desired package. The framework may search a public repository before a private repository. This could be exploited by attackers by placing a malicious package in the public repository that has the same name as a package from the private repository. The search path might not be directly under control of the developer relying on the framework, but this search order effectively contains an untrusted element.\n\n\n### Alternative Terms\nDLL preloading: This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.\nBinary planting: This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.\nInsecure library loading: This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.\nDependency confusion: As of February 2021, this term is used to describe CWE-427 in the context of managing installation of software package dependencies, in which attackers release packages on public sites where the names are the same as package names used by private repositories, and the search for the dependent package tries the public site first, downloading untrusted code. It may also be referred to as a \"substitution attack.\"\n\n### Relationships\nChildOf -> CWE-668\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Unlike untrusted search path (CWE-426), which inherently involves control over the definition of a control sphere (i.e., modification of a search path), this entry concerns a fixed control sphere in which some part of the sphere may be under attacker control (i.e., the search path cannot be modified by an attacker, but one element of the path can be under attacker control).\n\n**[Theoretical]** This weakness is not a clean fit under CWE-668 or CWE-610, which suggests that the control sphere model might need enhancement or clarification.\n\n\n\n### Observed Examples\n- **CVE-2023-25815:** chain: a change in an underlying package causes the gettext function to use implicit initialization with a hard-coded path (CWE-1419) under the user-writable C:\\ drive, introducing an untrusted search path element (CWE-427) that enables spoofing of messages.\n- **CVE-2022-4826:** Go-based git extension on Windows can search for and execute a malicious \"..exe\" in a repository because Go searches the current working directory if git.exe is not found in the PATH\n- **CVE-2020-26284:** A Static Site Generator built in Go, when running on Windows, searches the current working directory for a command, possibly allowing code execution using a malicious .exe or .bat file with the name being searched\n\n\n\n\n## CWE-182: Collapse of Data into Unsafe Value\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product filters data in a way that causes it to be reduced or \"collapsed\" into an unsafe value that violates an expected security property.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\nCanPrecede -> CWE-33\nCanPrecede -> CWE-34\nCanPrecede -> CWE-35\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Overlaps regular expressions, although an implementation might not necessarily use regexp's.\n\n\n\n### Observed Examples\n- **CVE-2004-0815:** \"/.////\" in pathname collapses to absolute path.\n- **CVE-2005-3123:** \"/.//..//////././\" is collapsed into \"/.././\" after \"..\" and \"//\" sequences are removed.\n- **CVE-2002-0325:** \".../...//\" collapsed to \"...\" due to removal of \"./\" in web server.\n\n"
  },
  "timestamp": "2025-03-30 11:54:52",
  "cve_id": "unknown",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "23",
      "name": "Relative Path Traversal",
      "type": "Base",
      "score": 0.7579556901178388
    },
    {
      "cwe_id": "36",
      "name": "Absolute Path Traversal",
      "type": "Base",
      "score": 0.7449781915579125
    },
    {
      "cwe_id": "59",
      "name": "Improper Link Resolution Before File Access ('Link Following')",
      "type": "Base",
      "score": 0.7433860016956434
    },
    {
      "cwe_id": "41",
      "name": "Improper Resolution of Path Equivalence",
      "type": "Base",
      "score": 0.7409975375997139
    },
    {
      "cwe_id": "73",
      "name": "External Control of File Name or Path",
      "type": "Base",
      "score": 0.7375052466158316
    },
    {
      "cwe_id": "668",
      "name": "Exposure of Resource to Wrong Sphere",
      "type": "Class",
      "score": 0.7201891959233822
    },
    {
      "cwe_id": "552",
      "name": "Files or Directories Accessible to External Parties",
      "type": "Base",
      "score": 0.7146417615094753
    },
    {
      "cwe_id": "427",
      "name": "Uncontrolled Search Path Element",
      "type": "Base",
      "score": 0.7093200766788483
    },
    {
      "cwe_id": "24",
      "name": "Path Traversal: '../filedir'",
      "type": "Variant",
      "score": 0.7081300257338152
    },
    {
      "cwe_id": "37",
      "name": "Path Traversal: '/absolute/pathname/here'",
      "type": "Variant",
      "score": 0.7060411623300465
    }
  ]
}