{
  "retriever": "dense",
  "query": "## Vulnerability Description\nThe zippies/testplatform repository through 2016-07-19 on GitHub allows **absolute path traversal** because the Flask send_file function is used unsafely.\n\n### Vulnerability Description Key Phrases\n- **weakness:** **absolute path traversal**\n- **product:** zippies/testplatform\n- **version:** through 2016-07-19\n\n## CVE Reference Links Content Summary\nBased on the provided content, here's a breakdown of the vulnerabilities related to CVE-2022-31588 and other similar CVEs:\n\n**General Root Cause:**\n\n*   **Unsafe use of Flask's `send_file` function:** The primary vulnerability across all these CVEs stems from the insecure use of the `flask.send_file` function within Flask web applications. This function, when used improperly, is susceptible to *absolute path traversal* attacks.\n*   **Lack of proper input validation and sanitization:** The core issue is that user-controlled or otherwise untrusted input is being passed directly, or with insufficient validation, into `send_file`. This allows an attacker to manipulate the input to access files outside the intended directory.\n*   **Unsafe use of `os.path.join`:** Many of the reported vulnerabilities also involve using the `os.path.join` function with untrusted input, leading to path traversal.\n\n**Weaknesses/Vulnerabilities Present:**\n\n*   **Path Traversal (CWE-22):** This is the fundamental vulnerability. Attackers can exploit the flawed usage of `send_file` to access and potentially download arbitrary files on the server by manipulating the path to them in the request.\n*   **Insufficient Input Validation/Sanitization:** The applications lack proper validation of user inputs when they are used in file path operations.\n*   **Misuse of `os.path.join`:** The way in which `os.path.join` is used is insecure when it encounters an absolute path, which can be controlled by an attacker.\n\n**Impact of Exploitation:**\n\n*   **Confidentiality breach:** Attackers can access sensitive files, including configuration files, source code, and user data, which can lead to data leaks and expose confidential information.\n*   **Limited Availability impact:** Attackers could cause a partial denial of service by making multiple requests for huge files which would take resources from the server, but typically, this vulnerability doesn't directly compromise the server's availability.\n*   **Integrity remains unaffected:** Although files can be read, no modifications or changes can be made with this vulnerability.\n\n**Attack Vectors:**\n\n*   **Network-based attacks:** All these vulnerabilities are exploited through network requests to the web application, meaning attackers can be remote.\n*   **Direct manipulation of URL Parameters:** The `filename` or a similar parameter used by `send_file` or `os.path.join` is modified with \"../\" sequences or absolute file paths to access unintended resources.\n\n**Required Attacker Capabilities/Position:**\n\n*   **No specific privileges required:** These vulnerabilities are exploitable without requiring any privileges or user interaction.\n*   **Remote attacker:** An attacker can exploit this vulnerability from a remote location through a simple network request.\n*   **Understanding of the application structure:** While not strictly required, knowledge of the web application's structure and endpoints will aid an attacker to effectively craft their attack.\n\n**Specific Details (where available):**\n\n*   **`flask.send_file` Usage:** The vulnerable code uses the `flask.send_file` function directly or through `os.path.join`, passing a potentially malicious file path argument.\n*   **`os.path.join` Usage:** Instead of validating the path, the applications directly use `os.path.join` when it is called to join a base directory with user-controlled input, without cleaning the input.\n\n**Affected Repositories:**\n\nMany of the provided links point to GitHub advisories (GHSA) that identify vulnerable repositories. These advisories detail the specific locations where the `send_file` function is being used unsafely. Repositories affected by this pattern include:\n\n*   `Luxas98/logstash-management-api`\n*   `yuriyouzhou/KG-fashion-chatbot`\n*   `piaoyunsoft/bt_lnmp`\n*   `Atom02/flask-mvc`\n*   `project-anuvaad/anuvaad-corpus`\n*   `rusyasoft/TrainEnergyServer`\n*   `deepaliupadhyay/RealEstate`\n*   `tsileo/flask-yeoman`\n*   `project-anuvaad/anuvaad-corpus`\n*   `freefood89/Fishtank`\n*   `DSABenchmark/DSAB` and `DSAB-local/DSAB`\n*   `waveyan/internshipsystem`\n*   `ml-inory/ModelConverter`\n*    `leo-vip/cockybook`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*  `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n* `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*  `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n* `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n* `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*  `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*  `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*    `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n*   `project-anuvaad/anuvaad-corpus`\n* `project-anuvaad/anuvaad-corpus`\n\n**Remediation:**\n\n*   **Use `flask.safe_join` or `flask.send_from_directory`:** These functions are designed to handle user-provided paths safely, preventing directory traversal attacks.  `safe_join` makes sure that the resulting path stays within the provided directory or returns an error, and `send_from_directory` allows to specify the base directory used by `send_file` making the path relative to that directory.\n\n**Summary:**\n\nThe widespread vulnerability arises from a common coding error in Flask applications where the `send_file` method is used to serve user-controlled files without proper validation of the path. Attackers exploit this to perform path traversal attacks, gaining access to potentially sensitive files outside of the intended directory. Developers should be aware of this vulnerability and implement secure alternatives like `safe_join` or `send_from_directory`.\n\n**Note:** While a lot of the content refers to similar CVEs, they all share a very similar root cause, which is why the information above covers all of them.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 22 | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') | Base | Allowed | alternate_terms | 0.800 |\n| 2 | 36 | Absolute Path Traversal | Base | Allowed | sparse | 0.333 |\n| 3 | 73 | External Control of File Name or Path | Base | Allowed | sparse | 0.194 |\n| 4 | 23 | Relative Path Traversal | Base | Allowed | sparse | 0.141 |\n| 5 | 37 | Path Traversal: '/absolute/pathname/here' | Variant | Allowed | sparse | 0.124 |\n| 6 | 24 | Path Traversal: '../filedir' | Variant | Allowed | dense | 0.550 |\n| 7 | 98 | Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') | Variant | Allowed | graph | 0.002 |\n| 8 | 59 | Improper Link Resolution Before File Access ('Link Following') | Base | Allowed | sparse | 0.115 |\n| 9 | 38 | Path Traversal: '\\absolute\\pathname\\here' | Variant | Allowed | sparse | 0.111 |\n| 10 | 182 | Collapse of Data into Unsafe Value | Base | Allowed | sparse | 0.101 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n### Extended Description\n\n\nMany file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\" to access unexpected files. This is referred to as absolute path traversal.\n\n\n### Alternative Terms\nDirectory traversal\nPath traversal: \"Path traversal\" is preferred over \"directory traversal,\" but both terms are attack-focused.\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to apply to a wider range of files. For example, the product may add \".txt\" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.\n\n**[Relationship]** Pathname equivalence can be regarded as a type of canonicalization error.\n\n**[Relationship]** Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing \"/\" on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not).\n\n**[Terminology]** \n\nLike other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use \"directory traversal\" only to refer to the injection of \"..\" and equivalent sequences whose specific meaning is to traverse directories.\n\n\nOther variants like \"absolute pathname\" and \"drive letter\" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve \"..\" or equivalent.\n\n\n**[Research Gap]** Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap.\n\n**[Research Gap]** \n\nIncomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that \"..\\\" is vulnerable, but not test \"../\" which may also be vulnerable.\n\n\nAny combination of directory separators (\"/\", \"\\\", etc.) and numbers of \".\" (e.g. \"....\") can produce unique variants; for example, the \"//../\" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.\n\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2024-4315:** Chain: API for text generation using Large Language Models (LLMs) does not include the \"\\\" Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n\n\n\n\n## CWE-36: Absolute Path Traversal\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as \"/abs/path\" that can resolve to a location that is outside of that directory.\n\n### Extended Description\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-22\nChildOf -> CWE-22\nChildOf -> CWE-22\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-31503:** Python package constructs filenames using an unsafe os.path.join call on untrusted input, allowing absolute path traversal because os.path.join resets the pathname to an absolute path that is specified as part of the input.\n- **CVE-2002-1345:** Multiple FTP clients write arbitrary files via absolute paths in server responses\n- **CVE-2001-1269:** ZIP file extractor allows full path\n\n\n\n\n## CWE-73: External Control of File Name or Path\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product allows user input to control or influence paths or file names that are used in filesystem operations.\n\n### Extended Description\n\n\nThis could allow an attacker to access or modify system files or other files that are critical to the application.\n\n\nPath manipulation errors occur when the following two conditions are met:\n\n```\n\t\t1. An attacker can specify a path used in an operation on the filesystem.\n\t\t2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n```\nFor example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-642\nChildOf -> CWE-610\nChildOf -> CWE-20\nCanPrecede -> CWE-22\nCanPrecede -> CWE-41\nCanPrecede -> CWE-98\nCanPrecede -> CWE-434\nCanPrecede -> CWE-59\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** CWE-114 is a Class, but it is listed a child of CWE-73 in view 1000. This suggests some abstraction problems that should be resolved in future versions.\n\n**[Relationship]** \n\nThe external control of filenames can be the primary link in chains with other file-related weaknesses, as seen in the CanPrecede relationships. This is because software systems use files for many different purposes: to execute programs, load code libraries, to store application data, to store configuration settings, record temporary data, act as signals or semaphores to other processes, etc.\n\n\nHowever, those weaknesses do not always require external control. For example, link-following weaknesses (CWE-59) often involve pathnames that are not controllable by the attacker at all.\n\n\nThe external control can be resultant from other issues. For example, in PHP applications, the register_globals setting can allow an attacker to modify variables that the programmer thought were immutable, enabling file inclusion (CWE-98) and path traversal (CWE-22). Operating with excessive privileges (CWE-250) might allow an attacker to specify an input filename that is not directly readable by the attacker, but is accessible to the privileged program. A buffer overflow (CWE-119) might give an attacker control over nearby memory locations that are related to pathnames, but were not directly modifiable by the attacker.\n\n\n\n\n### Observed Examples\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n- **CVE-2008-5748:** Chain: external control of values for user's desired language and theme enables path traversal.\n- **CVE-2008-5764:** Chain: external control of user's target language enables remote file inclusion.\n\n\n\n\n## CWE-23: Relative Path Traversal\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.\n\n### Extended Description\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n### Alternative Terms\nZip Slip: \"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).\n\n### Relationships\nChildOf -> CWE-22\nChildOf -> CWE-22\nChildOf -> CWE-22\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n- **CVE-2019-20916:** Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as \"../\"\n\n\n\n\n## CWE-37: Path Traversal: '/absolute/pathname/here'\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe product accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-36\nChildOf -> CWE-160\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2002-1345:** Multiple FTP clients write arbitrary files via absolute paths in server responses\n- **CVE-2001-1269:** ZIP file extractor allows full path\n- **CVE-2002-1818:** Path traversal using absolute pathname\n\n\n\n\n## CWE-24: Path Traversal: '../filedir'\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"../\" sequences that can resolve to a location that is outside of that directory.\n\n### Extended Description\n\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nThe \"../\" manipulation is the canonical manipulation for operating systems that use \"/\" as directory separators, such as UNIX- and Linux-based systems. In some cases, it is useful for bypassing protection schemes in environments for which \"/\" is supported but not the primary separator, such as Windows, which uses \"\\\" but can also accept \"/\".\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-23\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n\n\n\n\n## CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in \"require,\" \"include,\" or similar functions.\n\n### Extended Description\nIn certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the product will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP.\n\n### Alternative Terms\nRemote file include\nRFI: The Remote File Inclusion (RFI) acronym is often used by vulnerability researchers.\nLocal file inclusion: This term is frequently used in cases in which remote download is disabled, or when the first part of the filename is not under the attacker's control, which forces use of relative path traversal (CWE-23) attack techniques to access files that may contain previously-injected PHP code, such as web access logs.\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-829\nCanPrecede -> CWE-94\nCanAlsoBe -> CWE-426\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** \n\nThis is frequently a functional consequence of other weaknesses. It is usually multi-factor with other factors (e.g. MAID), although not all inclusion bugs involve assumed-immutable data. Direct request weaknesses frequently play a role.\n\n\nCan overlap directory traversal in local inclusion problems.\n\n\n\n\n### Observed Examples\n- **CVE-2004-0285:** Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.\n- **CVE-2004-0030:** Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.\n- **CVE-2004-0068:** Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.\n\n\n\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\ninsecure temporary file: Some people use the phrase \"insecure temporary file\" when referring to a link following weakness, but other weaknesses can produce insecure temporary files without any symlink involvement at all.\nZip Slip: \"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Theoretical]** \n\nLink following vulnerabilities are Multi-factor Vulnerabilities (MFV). They are the combination of multiple elements: file or directory permissions, filename predictability, race conditions, and in some cases, a design limitation in which there is no mechanism for performing atomic file creation operations.\n\n\nSome potential factors are race conditions, permissions, and predictability.\n\n\n\n\n### Observed Examples\n- **CVE-1999-1386:** Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.\n- **CVE-2000-1178:** Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.\n- **CVE-2004-0217:** Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.\n\n\n\n\n## CWE-38: Path Traversal: '\\absolute\\pathname\\here'\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe product accepts input in the form of a backslash absolute path ('\\absolute\\pathname\\here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-36\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-1999-1263:** Mail client allows remote attackers to overwrite arbitrary files via an e-mail message containing a uuencoded attachment that specifies the full pathname for the file to be modified.\n- **CVE-2003-0753:** Remote attackers can read arbitrary files via a full pathname to the target file in config parameter.\n- **CVE-2002-1525:** Remote attackers can read arbitrary files via an absolute pathname.\n\n\n\n\n## CWE-182: Collapse of Data into Unsafe Value\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product filters data in a way that causes it to be reduced or \"collapsed\" into an unsafe value that violates an expected security property.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\nCanPrecede -> CWE-33\nCanPrecede -> CWE-34\nCanPrecede -> CWE-35\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Overlaps regular expressions, although an implementation might not necessarily use regexp's.\n\n\n\n### Observed Examples\n- **CVE-2004-0815:** \"/.////\" in pathname collapses to absolute path.\n- **CVE-2005-3123:** \"/.//..//////././\" is collapsed into \"/.././\" after \"..\" and \"//\" sequences are removed.\n- **CVE-2002-0325:** \".../...//\" collapsed to \"...\" due to removal of \"./\" in web server.\n\n",
  "keyphrases": {},
  "timestamp": "2025-03-30 19:36:29",
  "cve_id": "unknown",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "23",
      "name": "Relative Path Traversal",
      "type": "Base",
      "score": 0.803659323490955
    },
    {
      "cwe_id": "41",
      "name": "Improper Resolution of Path Equivalence",
      "type": "Base",
      "score": 0.787589073762062
    },
    {
      "cwe_id": "36",
      "name": "Absolute Path Traversal",
      "type": "Base",
      "score": 0.786597003529619
    },
    {
      "cwe_id": "59",
      "name": "Improper Link Resolution Before File Access ('Link Following')",
      "type": "Base",
      "score": 0.7763678946810548
    },
    {
      "cwe_id": "37",
      "name": "Path Traversal: '/absolute/pathname/here'",
      "type": "Variant",
      "score": 0.774162016588233
    },
    {
      "cwe_id": "24",
      "name": "Path Traversal: '../filedir'",
      "type": "Variant",
      "score": 0.7693631367472517
    },
    {
      "cwe_id": "73",
      "name": "External Control of File Name or Path",
      "type": "Base",
      "score": 0.7691053002969039
    },
    {
      "cwe_id": "35",
      "name": "Path Traversal: '.../...//'",
      "type": "Variant",
      "score": 0.7634567389715088
    },
    {
      "cwe_id": "29",
      "name": "Path Traversal: '\\..\\filename'",
      "type": "Variant",
      "score": 0.7517433987210888
    },
    {
      "cwe_id": "25",
      "name": "Path Traversal: '/../filedir'",
      "type": "Variant",
      "score": 0.7513778834418824
    }
  ]
}