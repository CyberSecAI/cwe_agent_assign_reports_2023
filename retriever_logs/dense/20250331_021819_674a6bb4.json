{
  "retriever": "dense",
  "query": "## Vulnerability Description\nAn information disclosure vulnerability in UniverSIS-Students before v1.5.0 allows attackers to obtain sensitive information via a crafted GET request to the endpoint /api/students/me/courses/.\n\n### Vulnerability Description Key Phrases\n- **impact:** information disclosure\n- **vector:** crafted GET request\n- **attacker:** attackers\n- **product:** UniverSIS-Students\n- **version:** before v1.5.0\n- **component:** /api/students/me/courses/ endpoint\n\n## CVE Reference Links Content Summary\n- **Root cause of vulnerability:** Unrestricted access to certain OData properties through the UniverSIS API.\n- **Weaknesses/vulnerabilities present:** Information Disclosure (CWE-668)\n- **Impact of exploitation:** An authenticated student can obtain sensitive information about all instructors in their department, including middle name, Social Security number, and home address.\n- **Attack vectors:** Sending a specially crafted HTTP GET request to a vulnerable UniverSIS API endpoint, such as `/api/students/me/courses/`.\n- **Required attacker capabilities/position:** The attacker needs to be an authenticated student.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 668 | Exposure of Resource to Wrong Sphere | Class | Discouraged | sparse | 0.067 |\n| 2 | 89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | Base | Allowed | sparse | 0.053 |\n| 3 | 425 | Direct Request ('Forced Browsing') | Base | Allowed | sparse | 0.049 |\n| 4 | 200 | Exposure of Sensitive Information to an Unauthorized Actor | Class | Discouraged | sparse | 0.048 |\n| 5 | 306 | Missing Authentication for Critical Function | Base | Allowed | sparse | 0.048 |\n| 6 | 202 | Exposure of Sensitive Information Through Data Queries | Base | Allowed | dense | 0.540 |\n| 7 | 499 | Serializable Class Containing Sensitive Data | Variant | Allowed | graph | 0.003 |\n| 8 | 284 | Improper Access Control | Pillar | Discouraged | sparse | 0.047 |\n| 9 | 201 | Insertion of Sensitive Information Into Sent Data | Base | Allowed | sparse | 0.047 |\n| 10 | 639 | Authorization Bypass Through User-Controlled Key | Base | Allowed | sparse | 0.046 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-668: Exposure of Resource to Wrong Sphere\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.\n\n### Extended Description\n\n\nResources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files.\n\n\nA separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system.\n\n\nIn either case, the end result is that a resource has been exposed to the wrong party.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-664\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.\n**Comments:** Closely analyze the specific mistake that is allowing the resource to be exposed, and perform a CWE mapping for that mistake.\n**Reasons:**\n- Frequent Misuse\n- Abstraction\n\n\n### Additional Notes\n**[Theoretical]** A \"control sphere\" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for \"administrators\" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be \"users who are authenticated to the operating system on which the product is installed.\" Each sphere has different sets of actors and allowable behaviors.\n\n\n\n\n\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nSQL injection: a common attack-oriented phrase\nSQLi: a common abbreviation for \"SQL injection\"\n\n### Relationships\nChildOf -> CWE-943\nChildOf -> CWE-74\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** SQL injection can be resultant from special character mismanagement, MAID, or denylist/allowlist problems. It can be primary to authentication errors.\n\n\n\n### Observed Examples\n- **CVE-2023-32530:** SQL injection in security product dashboard using crafted certificate fields\n- **CVE-2021-42258:** SQL injection in time and billing software, as exploited in the wild per CISA KEV.\n- **CVE-2021-27101:** SQL injection in file-transfer system via a crafted Host header, as exploited in the wild per CISA KEV.\n\n\n\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n### Extended Description\nWeb applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.\n\n### Alternative Terms\nforced browsing: The \"forced browsing\" term could be misinterpreted to include weaknesses such as CSRF or XSS, so its use is discouraged.\n\n### Relationships\nChildOf -> CWE-862\nChildOf -> CWE-862\nChildOf -> CWE-288\nChildOf -> CWE-424\nCanPrecede -> CWE-471\nCanPrecede -> CWE-98\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Overlaps Modification of Assumed-Immutable Data (MAID), authorization errors, container errors; often primary to other weaknesses such as XSS and SQL injection.\n\n**[Theoretical]** \"Forced browsing\" is a step-based manipulation involving the omission of one or more steps, whose order is assumed to be immutable. The application does not verify that the first step was performed successfully before the second step. The consequence is typically \"authentication bypass\" or \"path disclosure,\" although it can be primary to all kinds of weaknesses, especially in languages such as PHP, which allow external modification of assumed-immutable variables.\n\n\n\n### Observed Examples\n- **CVE-2022-29238:** Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.\n- **CVE-2022-23607:** Python-based HTTP library did not scope cookies to a particular domain such that \"supercookies\" could be sent to any domain on redirect.\n- **CVE-2004-2144:** Bypass authentication via direct request.\n\n\n\n\n## CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n### Extended Description\n\n\nThere are many different kinds of mistakes that introduce information exposures. The severity of the error can range widely, depending on the context in which the product operates, the type of sensitive information that is revealed, and the benefits it may provide to an attacker. Some kinds of sensitive information include:\n\n\n  - private, personal information, such as personal messages, financial data, health records, geographic location, or contact details\n\n  - system status and environment, such as the operating system and installed packages\n\n  - business secrets and intellectual property\n\n  - network status and configuration\n\n  - the product's own code or internal state\n\n  - metadata, e.g. logging of connections or message headers\n\n  - indirect information, such as a discrepancy between two internal operations that can be observed by an outsider\n\nInformation might be sensitive to different parties, each of which may have their own expectations for whether the information should be protected. These parties include:\n\n  - the product's own users\n\n  - people or organizations whose information is created or used by the product, even if they are not direct product users\n\n  - the product's administrators, including the admins of the system(s) and/or networks on which the product operates\n\n  - the developer\n\nInformation exposures can occur in different ways:\n\n  - the code  **explicitly inserts**  sensitive information into resources or messages that are intentionally made accessible to unauthorized actors, but should not contain the information - i.e., the information should have been \"scrubbed\" or \"sanitized\"\n\n  - a different weakness or mistake  **indirectly inserts**  the sensitive information into resources, such as a web script error revealing the full system path of the program.\n\n  - the code manages resources that intentionally contain sensitive information, but the resources are  **unintentionally made accessible**  to unauthorized actors. In this case, the information exposure is resultant - i.e., a different weakness enabled the access to the information in the first place.\n\nIt is common practice to describe any loss of confidentiality as an \"information exposure,\" but this can lead to overuse of CWE-200 in CWE mapping. From the CWE perspective, loss of confidentiality is a technical impact that can arise from dozens of different weaknesses, such as insecure file permissions or out-of-bounds read. CWE-200 and its lower-level descendants are intended to cover the mistakes that occur in behaviors that explicitly manage, store, transfer, or cleanse sensitive information.\n\n### Alternative Terms\nInformation Disclosure: This term is frequently used in vulnerability advisories to describe a consequence or technical impact, for any vulnerability that has a loss of confidentiality. Often, CWE-200 can be misused to represent the loss of confidentiality, even when the mistake - i.e., the weakness - is not directly related to the mishandling of the information itself, such as an out-of-bounds read that accesses sensitive memory contents; here, the out-of-bounds read is the primary weakness, not the disclosure of the memory. In addition, this phrase is also used frequently in policies and legal documents, but it does not refer to any disclosure of security-relevant information.\nInformation Leak: This is a frequently used term, however the \"leak\" term has multiple uses within security. In some cases it deals with the accidental exposure of information from a different weakness, but in other cases (such as \"memory leak\"), this deals with improper tracking of resources, which can lead to exhaustion. As a result, CWE is actively avoiding usage of the \"leak\" term.\n\n### Relationships\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-200 is commonly misused to represent the loss of confidentiality in a vulnerability, but confidentiality loss is a technical impact - not a root cause error. As of CWE 4.9, over 400 CWE entries can lead to a loss of confidentiality. Other options are often available. [REF-1287].\n**Comments:** If an error or mistake causes information to be disclosed, then use the CWE ID for that error. Consider starting with improper authorization (CWE-285), insecure permissions (CWE-732), improper authentication (CWE-287), etc. Also consider children such as Insertion of Sensitive Information Into Sent Data (CWE-201), Observable Discrepancy (CWE-203), Insertion of Sensitive Information into Externally-Accessible File or Directory (CWE-538), or others.\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Maintenance]** As a result of mapping analysis in the 2020 Top 25 and more recent versions, this weakness is under review, since it is frequently misused in mapping to cover many problems that lead to loss of confidentiality. See Mapping Notes, Extended Description, and Alternate Terms.\n\n\n\n### Observed Examples\n- **CVE-2022-31162:** Rust library leaks Oauth client details in application debug logs\n- **CVE-2021-25476:** Digital Rights Management (DRM) capability for mobile platform leaks pointer information, simplifying ASLR bypass\n- **CVE-2001-1483:** Enumeration of valid usernames based on inconsistent responses\n\n\n\n\n## CWE-306: Missing Authentication for Critical Function\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-287\nChildOf -> CWE-287\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-31260:** Chain: a digital asset management program has an undisclosed backdoor in the legacy version of a PHP script (CWE-912) that could allow an unauthenticated user to export metadata (CWE-306)\n- **CVE-2022-29951:** TCP-based protocol in Programmable Logic Controller (PLC) has no authentication.\n- **CVE-2022-29952:** Condition Monitor firmware uses a protocol that does not require authentication.\n\n\n\n\n## CWE-202: Exposure of Sensitive Information Through Data Queries\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nWhen trying to keep information confidential, an attacker can often infer some of the information by using statistics.\n\n### Extended Description\nIn situations where data should not be tied to individual users, but a large number of users should be able to make queries that \"scrub\" the identity of users, it may be possible to get information about a user -- e.g., by specifying search terms that are known to be unique to that user.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1230\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** \n\nThe relationship between CWE-202 and CWE-612 needs to be investigated more closely, as they may be different descriptions of the same kind of problem. CWE-202 is also being considered for deprecation, as it is not clearly described and may have been misunderstood by CWE users. It could be argued that this issue is better covered by CAPEC; an attacker can utilize their data-query privileges to perform this kind of operation, and if the attacker should not be allowed to perform the operation - or if the sensitive data should not have been made accessible at all - then that is more appropriately classified as a separate CWE related to authorization (see the parent, CWE-1230).\n\n\n\n\n### Observed Examples\n- **CVE-2022-41935:** Wiki product allows an adversary to discover filenames via a series of queries starting with one letter and then iteratively extending the match.\n\n\n\n\n## CWE-499: Serializable Class Containing Sensitive Data\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class.\n\n### Extended Description\nSerializable classes are effectively open classes since data cannot be hidden in them. Classes that do not explicitly deny serialization can be serialized by any other class, which can then in turn use the data stored inside it.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-668\nCanPrecede -> CWE-200\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n\n\n\n## CWE-284: Improper Access Control\n**Abstraction:** Pillar\n**Status:** Incomplete\n\n### Description\nThe product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n### Extended Description\n\n\nAccess control involves the use of several protection mechanisms such as:\n\n\n  - Authentication (proving the identity of an actor)\n\n  - Authorization (ensuring that a given actor can access a resource), and\n\n  - Accountability (tracking of activities that were performed)\n\nWhen any mechanism is not applied or otherwise fails, attackers can compromise the security of the product by gaining privileges, reading sensitive information, executing commands, evading detection, etc.\n\nThere are two distinct behaviors that can introduce access control weaknesses:\n\n\n  - Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator.\n\n  - Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.\n\n\n\n### Alternative Terms\nAuthorization: The terms \"access control\" and \"authorization\" are often used interchangeably, although many people have distinct definitions. The CWE usage of \"access control\" is intended as a general term for the various mechanisms that restrict which users can access which resources, and \"authorization\" is more narrowly defined. It is unlikely that there will be community consensus on the use of these terms.\n\n### Relationships\nNone\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-284 is extremely high-level, a Pillar. Its name, \"Improper Access Control,\" is often misused in low-information vulnerability reports [REF-1287] or by active use of the OWASP Top Ten, such as \"A01:2021-Broken Access Control\". It is not useful for trend analysis.\n**Comments:** Consider using descendants of CWE-284 that are more specific to the kind of access control involved, such as those involving authorization (Missing Authorization (CWE-862), Incorrect Authorization (CWE-863), Incorrect Permission Assignment for Critical Resource (CWE-732), etc.); authentication (Missing Authentication (CWE-306) or Weak Authentication (CWE-1390)); Incorrect User Management (CWE-286); Improper Restriction of Communication Channel to Intended Endpoints (CWE-923); etc.\n**Reasons:**\n- Frequent Misuse\n- Abstraction\n**Suggested Alternatives:**\n- CWE-862: Missing Authorization\n- CWE-863: Incorrect Authorization\n- CWE-732: Incorrect Permission Assignment for Critical Resource\n- CWE-306: Missing Authentication\n- CWE-1390: Weak Authentication\n- CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n\n\n### Additional Notes\n**[Maintenance]** \n\nThis entry needs more work. Possible sub-categories include:\n\n\n  - Trusted group includes undesired entities (partially covered by CWE-286)\n\n  - Group can perform undesired actions\n\n  - ACL parse error does not fail closed\n\n\n\n\n\n### Observed Examples\n- **CVE-2022-24985:** A form hosting website only checks the session authentication status for a single form, making it possible to bypass authentication when there are multiple forms\n- **CVE-2022-29238:** Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.\n- **CVE-2022-23607:** Python-based HTTP library did not scope cookies to a particular domain such that \"supercookies\" could be sent to any domain on redirect\n\n\n\n\n## CWE-201: Insertion of Sensitive Information Into Sent Data\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-200\nCanAlsoBe -> CWE-209\nCanAlsoBe -> CWE-202\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure).\n\n\n\n### Observed Examples\n- **CVE-2022-0708:** Collaboration platform does not clear team emails in a response, allowing leak of email addresses\n\n\n\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\n### Extended Description\n\n\nRetrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system.\n\n\nFor example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value.\n\n\nOne manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data.\n\n\n### Alternative Terms\nInsecure Direct Object Reference / IDOR: The \"Insecure Direct Object Reference\" term, as described in the OWASP Top Ten, is broader than this CWE because it also covers path traversal (CWE-22). Within the context of vulnerability theory, there is a similarity between the OWASP concept and CWE-706: Use of Incorrectly-Resolved Name or Reference.\nBroken Object Level Authorization / BOLA: BOLA is used in the 2019 OWASP API Security Top 10 and is said to be the same as IDOR.\nHorizontal Authorization: \"Horizontal Authorization\" is used to describe situations in which two users have the same privilege level, but must be prevented from accessing each other's resources. This is fairly common when using key-based access to resources in a multi-user context.\n\n### Relationships\nChildOf -> CWE-863\nChildOf -> CWE-863\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2021-36539:** An educational application does not appropriately restrict file IDs to a particular user. The attacker can brute-force guess IDs, indicating IDOR.\n\n",
  "keyphrases": {},
  "timestamp": "2025-03-31 02:18:19",
  "cve_id": "unknown",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "538",
      "name": "Insertion of Sensitive Information into Externally-Accessible File or Directory",
      "type": "Base",
      "score": 0.7526334382695415
    },
    {
      "cwe_id": "668",
      "name": "Exposure of Resource to Wrong Sphere",
      "type": "Class",
      "score": 0.7526042265621881
    },
    {
      "cwe_id": "226",
      "name": "Sensitive Information in Resource Not Removed Before Reuse",
      "type": "Base",
      "score": 0.7390695866237531
    },
    {
      "cwe_id": "552",
      "name": "Files or Directories Accessible to External Parties",
      "type": "Base",
      "score": 0.7388924679316091
    },
    {
      "cwe_id": "639",
      "name": "Authorization Bypass Through User-Controlled Key",
      "type": "Base",
      "score": 0.738589210387083
    },
    {
      "cwe_id": "497",
      "name": "Exposure of Sensitive System Information to an Unauthorized Control Sphere",
      "type": "Base",
      "score": 0.7344030265693557
    },
    {
      "cwe_id": "41",
      "name": "Improper Resolution of Path Equivalence",
      "type": "Base",
      "score": 0.732892205882135
    },
    {
      "cwe_id": "807",
      "name": "Reliance on Untrusted Inputs in a Security Decision",
      "type": "Base",
      "score": 0.7307693896625869
    },
    {
      "cwe_id": "653",
      "name": "Improper Isolation or Compartmentalization",
      "type": "Class",
      "score": 0.7255181407516558
    },
    {
      "cwe_id": "610",
      "name": "Externally Controlled Reference to a Resource in Another Sphere",
      "type": "Class",
      "score": 0.7253335713248164
    }
  ]
}