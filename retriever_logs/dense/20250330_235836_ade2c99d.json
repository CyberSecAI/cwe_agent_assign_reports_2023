{
  "retriever": "dense",
  "query": "## Vulnerability Description\nTruncated L2CAP K-frame causes assertion failure. Zephyr versions >= 2.4.0, >= v.2.50 contain **Improper Handling of Length Parameter Inconsistency (CWE-130)**, Reachable Assertion (CWE-617). For more information, see https//github.com/zephyrproject-rtos/zephyr/security/advisories/GHSA-fx88-6c29-vrp3\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **Improper Handling of Length Parameter Inconsistency (CWE-130)**\n- **impact:** assertion failure\n- **product:** Zephyr\n- **version:** >= 2.4.0 and >= v.2.50\n- **component:** L2CAP K-frame\n\n## CVE Reference Links Content Summary\n- **Root cause of vulnerability:** The vulnerability lies in the `l2cap_chan_le_recv()` function where the length of the buffer is not checked before accessing the SDU length field. This can lead to an out-of-bounds read when processing a truncated L2CAP K-frame.\n- **Weaknesses/vulnerabilities present:**\n    - Improper input validation leading to an out-of-bounds read (CWE-130).\n    - Assertion failure due to accessing invalid data (CWE-617).\n- **Impact of exploitation:** If assertions are enabled, the system will halt due to assertion failure. If assertions are disabled, the SDU length is calculated incorrectly, and the packet is dropped due to invalid SDU length. This can lead to a denial of service.\n- **Attack vectors:** An attacker can send a specially crafted L2CAP K-frame with a truncated SDU length field.\n- **Required attacker capabilities/position:** An attacker needs to be within the adjacent network (e.g., Bluetooth range) to send the malicious L2CAP K-frame.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 130 | Improper Handling of Length Parameter Inconsistency | Base | Allowed | sparse | 0.554 |\n| 2 | 191 | Integer Underflow (Wrap or Wraparound) | Base | Allowed | sparse | 0.272 |\n| 3 | 588 | Attempt to Access Child of a Non-structure Pointer | Variant | Allowed | sparse | 0.264 |\n| 4 | 703 | Improper Check or Handling of Exceptional Conditions | Pillar | Discouraged | sparse | 0.255 |\n| 5 | 694 | Use of Multiple Resources with Duplicate Identifier | Base | Allowed | sparse | 0.247 |\n| 6 | 805 | Buffer Access with Incorrect Length Value | Base | Allowed | dense | 0.491 |\n| 7 | 193 | Off-by-one Error | Base | Allowed | graph | 0.002 |\n| 8 | 617 | Reachable Assertion | Base | Allowed | sparse | 0.233 |\n| 9 | 1284 | Improper Validation of Specified Quantity in Input | Base | Allowed | sparse | 0.218 |\n| 10 | 786 | Access of Memory Location Before Start of Buffer | Base | Discouraged | sparse | 0.202 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-130: Improper Handling of Length Parameter Inconsistency\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.\n\n### Extended Description\nIf an attacker can manipulate the length parameter associated with an input such that it is inconsistent with the actual length of the input, this can be leveraged to cause the target application to behave in unexpected, and possibly, malicious ways. One of the possible motives for doing so is to pass in arbitrarily large input to the application. Another possible motivation is the modification of application state by including invalid data for subsequent properties of the application. Such weaknesses commonly lead to attacks such as buffer overflows and execution of arbitrary code.\n\n### Alternative Terms\nlength manipulation\nlength tampering\n\n### Relationships\nChildOf -> CWE-240\nChildOf -> CWE-119\nChildOf -> CWE-119\nCanPrecede -> CWE-805\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This probably overlaps other categories including zero-length issues.\n\n\n\n### Observed Examples\n- **CVE-2014-0160:** Chain: \"Heartbleed\" bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.\n- **CVE-2009-2299:** Web application firewall consumes excessive memory when an HTTP request contains a large Content-Length value but no POST data.\n- **CVE-2001-0825:** Buffer overflow in internal string handling routine allows remote attackers to execute arbitrary commands via a length argument of zero or less, which disables the length check.\n\n\n\n\n## CWE-191: Integer Underflow (Wrap or Wraparound)\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.\n\n### Extended Description\nThis can happen in signed and unsigned cases.\n\n### Alternative Terms\nInteger underflow: \n\n\"Integer underflow\" is sometimes used to identify signedness errors in which an originally positive number becomes negative as a result of subtraction. However, there are cases of bad subtraction in which unsigned integers are involved, so it's not always a signedness issue.\n\n\n\"Integer underflow\" is occasionally used to describe array index errors in which the index is negative.\n\n\n### Relationships\nChildOf -> CWE-682\nChildOf -> CWE-682\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2004-0816:** Integer underflow in firewall via malformed packet.\n- **CVE-2004-1002:** Integer underflow by packet with invalid length.\n- **CVE-2005-0199:** Long input causes incorrect length calculation.\n\n\n\n\n## CWE-588: Attempt to Access Child of a Non-structure Pointer\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nCasting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-704\nChildOf -> CWE-758\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2021-3510:** JSON decoder accesses a C union using an invalid offset to an object\n\n\n\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction:** Pillar\n**Status:** Incomplete\n\n### Description\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nNone\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** This CWE entry is extremely high-level, a Pillar.\n**Comments:** Consider children or descendants of this entry instead.\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Relationship]** This is a high-level class that might have some overlap with other classes. It could be argued that even \"normal\" weaknesses such as buffer overflows involve unusual or exceptional conditions. In that sense, this might be an inherent aspect of most other weaknesses within CWE, similar to API Abuse (CWE-227) and Indicator of Poor Code Quality (CWE-398). However, this entry is currently intended to unify disparate concepts that do not have other places within the Research Concepts view (CWE-1000).\n\n\n\n### Observed Examples\n- **[REF-1374]:** Chain: JavaScript-based cryptocurrency library can fall back to the insecure Math.random() function instead of reporting a failure (CWE-392), thus reducing the entropy (CWE-332) and leading to generation of non-unique cryptographic keys for Bitcoin wallets (CWE-1391)\n- **CVE-2022-22224:** Chain: an operating system does not properly process malformed Open Shortest Path First (OSPF) Type/Length/Value Identifiers (TLV) (CWE-703), which can cause the process to enter an infinite loop (CWE-835)\n\n\n\n\n## CWE-694: Use of Multiple Resources with Duplicate Identifier\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses multiple resources that can have the same identifier, in a context in which unique identifiers are required.\n\n### Extended Description\nIf the product assumes that each resource has a unique identifier, the product could operate on the wrong resource if attackers can cause multiple resources to be associated with the same identifier.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-99\nChildOf -> CWE-573\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This weakness is probably closely associated with other issues related to doubling, such as CWE-675 (Duplicate Operations on Resource). It's often a case of an API contract violation (CWE-227).\n\n\n\n### Observed Examples\n- **CVE-2013-4787:** chain: mobile OS verifies cryptographic signature of file in an archive, but then installs a different file with the same name that is also listed in the archive.\n\n\n\n\n## CWE-805: Buffer Access with Incorrect Length Value\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.\n\n### Extended Description\nWhen the length value exceeds the size of the destination, a buffer overflow could occur.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2011-1959:** Chain: large length value causes buffer over-read (CWE-126)\n- **CVE-2011-1848:** Use of packet length field to make a calculation, then copy into a fixed-size buffer\n- **CVE-2011-0105:** Chain: retrieval of length value from an uninitialized memory location\n\n\n\n\n## CWE-193: Off-by-one Error\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nA product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\noff-by-five: An \"off-by-five\" error was reported for sudo in 2002 (CVE-2002-0184), but that is more like a \"length calculation\" error.\n\n### Relationships\nChildOf -> CWE-682\nChildOf -> CWE-682\nCanPrecede -> CWE-617\nCanPrecede -> CWE-170\nCanPrecede -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This is not always a buffer overflow. For example, an off-by-one error could be a factor in a partial comparison, a read from the wrong memory location, an incorrect conditional, etc.\n\n\n\n### Observed Examples\n- **CVE-2003-0252:** Off-by-one error allows remote attackers to cause a denial of service and possibly execute arbitrary code via requests that do not contain newlines.\n- **CVE-2001-1391:** Off-by-one vulnerability in driver allows users to modify kernel memory.\n- **CVE-2002-0083:** Off-by-one error allows local users or remote malicious servers to gain privileges.\n\n\n\n\n## CWE-617: Reachable Assertion\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.\n\n### Extended Description\n\n\nWhile assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service.\n\n\nFor example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service.\n\n\n### Alternative Terms\nassertion failure\n\n### Relationships\nChildOf -> CWE-670\nChildOf -> CWE-670\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2023-49286:** Chain: function in web caching proxy does not correctly check a return value (CWE-253) leading to a reachable assertion (CWE-617)\n- **CVE-2006-6767:** FTP server allows remote attackers to cause a denial of service (daemon abort) via crafted commands which trigger an assertion failure.\n- **CVE-2006-6811:** Chat client allows remote attackers to cause a denial of service (crash) via a long message string when connecting to a server, which causes an assertion failure.\n\n\n\n\n## CWE-1284: Improper Validation of Specified Quantity in Input\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.\n\n### Extended Description\n\n\nSpecified quantities include size, length, frequency, price, rate, number of operations, time, and others. Code may rely on specified quantities to allocate resources, perform calculations, control iteration, etc. When the quantity is not properly validated, then attackers can specify malicious quantities to cause excessive resource allocation, trigger unexpected failures, enable buffer overflows, etc.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-20\nChildOf -> CWE-20\nCanPrecede -> CWE-789\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** This entry is still under development and will continue to see updates and content improvements.\n\n\n\n### Observed Examples\n- **CVE-2022-21668:** Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).\n- **CVE-2008-1440:** lack of validation of length field leads to infinite loop\n- **CVE-2008-2374:** lack of validation of string length fields allows memory consumption or buffer over-read\n\n\n\n\n## CWE-786: Access of Memory Location Before Start of Buffer\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.\n\n### Extended Description\nThis typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** The CWE entry might be misused when lower-level CWE entries might be available. It also overlaps existing CWE entries and might be deprecated in the future.\n**Comments:** If the \"Access\" operation is known to be a read or a write, then investigate children of entries such as CWE-787: Out-of-bounds Write and CWE-125: Out-of-bounds Read.\n**Reasons:**\n- Potential Deprecation\n- Frequent Misuse\n\n\n\n### Observed Examples\n- **CVE-2002-2227:** Unchecked length of SSLv2 challenge value leads to buffer underflow.\n- **CVE-2007-4580:** Buffer underflow from a small size value with a large buffer (length parameter inconsistency, CWE-130)\n- **CVE-2007-1584:** Buffer underflow from an all-whitespace string, which causes a counter to be decremented before the buffer while looking for a non-whitespace character.\n\n",
  "keyphrases": {
    "base_query": "## Vulnerability Description\nTruncated L2CAP K-frame causes assertion failure. Zephyr versions >= 2.4.0, >= v.2.50 contain **Improper Handling of Length Parameter Inconsistency (CWE-130)**, Reachable Assertion (CWE-617). For more information, see https//github.com/zephyrproject-rtos/zephyr/security/advisories/GHSA-fx88-6c29-vrp3\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **Improper Handling of Length Parameter Inconsistency (CWE-130)**\n- **impact:** assertion failure\n- **product:** Zephyr\n- **version:** >= 2.4.0 and >= v.2.50\n- **component:** L2CAP K-frame\n\n## CVE Reference Links Content Summary\n- **Root cause of vulnerability:** The vulnerability lies in the `l2cap_chan_le_recv()` function where the length of the buffer is not checked before accessing the SDU length field. This can lead to an out-of-bounds read when processing a truncated L2CAP K-frame.\n- **Weaknesses/vulnerabilities present:**\n    - Improper input validation leading to an out-of-bounds read (CWE-130).\n    - Assertion failure due to accessing invalid data (CWE-617).\n- **Impact of exploitation:** If assertions are enabled, the system will halt due to assertion failure. If assertions are disabled, the SDU length is calculated incorrectly, and the packet is dropped due to invalid SDU length. This can lead to a denial of service.\n- **Attack vectors:** An attacker can send a specially crafted L2CAP K-frame with a truncated SDU length field.\n- **Required attacker capabilities/position:** An attacker needs to be within the adjacent network (e.g., Bluetooth range) to send the malicious L2CAP K-frame.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 130 | Improper Handling of Length Parameter Inconsistency | Base | Allowed | sparse | 0.554 |\n| 2 | 191 | Integer Underflow (Wrap or Wraparound) | Base | Allowed | sparse | 0.272 |\n| 3 | 588 | Attempt to Access Child of a Non-structure Pointer | Variant | Allowed | sparse | 0.264 |\n| 4 | 703 | Improper Check or Handling of Exceptional Conditions | Pillar | Discouraged | sparse | 0.255 |\n| 5 | 694 | Use of Multiple Resources with Duplicate Identifier | Base | Allowed | sparse | 0.247 |\n| 6 | 805 | Buffer Access with Incorrect Length Value | Base | Allowed | dense | 0.491 |\n| 7 | 193 | Off-by-one Error | Base | Allowed | graph | 0.002 |\n| 8 | 617 | Reachable Assertion | Base | Allowed | sparse | 0.233 |\n| 9 | 1284 | Improper Validation of Specified Quantity in Input | Base | Allowed | sparse | 0.218 |\n| 10 | 786 | Access of Memory Location Before Start of Buffer | Base | Discouraged | sparse | 0.202 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-130: Improper Handling of Length Parameter Inconsistency\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.\n\n### Extended Description\nIf an attacker can manipulate the length parameter associated with an input such that it is inconsistent with the actual length of the input, this can be leveraged to cause the target application to behave in unexpected, and possibly, malicious ways. One of the possible motives for doing so is to pass in arbitrarily large input to the application. Another possible motivation is the modification of application state by including invalid data for subsequent properties of the application. Such weaknesses commonly lead to attacks such as buffer overflows and execution of arbitrary code.\n\n### Alternative Terms\nlength manipulation\nlength tampering\n\n### Relationships\nChildOf -> CWE-240\nChildOf -> CWE-119\nChildOf -> CWE-119\nCanPrecede -> CWE-805\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This probably overlaps other categories including zero-length issues.\n\n\n\n### Observed Examples\n- **CVE-2014-0160:** Chain: \"Heartbleed\" bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.\n- **CVE-2009-2299:** Web application firewall consumes excessive memory when an HTTP request contains a large Content-Length value but no POST data.\n- **CVE-2001-0825:** Buffer overflow in internal string handling routine allows remote attackers to execute arbitrary commands via a length argument of zero or less, which disables the length check.\n\n\n\n\n## CWE-191: Integer Underflow (Wrap or Wraparound)\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.\n\n### Extended Description\nThis can happen in signed and unsigned cases.\n\n### Alternative Terms\nInteger underflow: \n\n\"Integer underflow\" is sometimes used to identify signedness errors in which an originally positive number becomes negative as a result of subtraction. However, there are cases of bad subtraction in which unsigned integers are involved, so it's not always a signedness issue.\n\n\n\"Integer underflow\" is occasionally used to describe array index errors in which the index is negative.\n\n\n### Relationships\nChildOf -> CWE-682\nChildOf -> CWE-682\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2004-0816:** Integer underflow in firewall via malformed packet.\n- **CVE-2004-1002:** Integer underflow by packet with invalid length.\n- **CVE-2005-0199:** Long input causes incorrect length calculation.\n\n\n\n\n## CWE-588: Attempt to Access Child of a Non-structure Pointer\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nCasting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-704\nChildOf -> CWE-758\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2021-3510:** JSON decoder accesses a C union using an invalid offset to an object\n\n\n\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction:** Pillar\n**Status:** Incomplete\n\n### Description\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nNone\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** This CWE entry is extremely high-level, a Pillar.\n**Comments:** Consider children or descendants of this entry instead.\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Relationship]** This is a high-level class that might have some overlap with other classes. It could be argued that even \"normal\" weaknesses such as buffer overflows involve unusual or exceptional conditions. In that sense, this might be an inherent aspect of most other weaknesses within CWE, similar to API Abuse (CWE-227) and Indicator of Poor Code Quality (CWE-398). However, this entry is currently intended to unify disparate concepts that do not have other places within the Research Concepts view (CWE-1000).\n\n\n\n### Observed Examples\n- **[REF-1374]:** Chain: JavaScript-based cryptocurrency library can fall back to the insecure Math.random() function instead of reporting a failure (CWE-392), thus reducing the entropy (CWE-332) and leading to generation of non-unique cryptographic keys for Bitcoin wallets (CWE-1391)\n- **CVE-2022-22224:** Chain: an operating system does not properly process malformed Open Shortest Path First (OSPF) Type/Length/Value Identifiers (TLV) (CWE-703), which can cause the process to enter an infinite loop (CWE-835)\n\n\n\n\n## CWE-694: Use of Multiple Resources with Duplicate Identifier\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses multiple resources that can have the same identifier, in a context in which unique identifiers are required.\n\n### Extended Description\nIf the product assumes that each resource has a unique identifier, the product could operate on the wrong resource if attackers can cause multiple resources to be associated with the same identifier.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-99\nChildOf -> CWE-573\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This weakness is probably closely associated with other issues related to doubling, such as CWE-675 (Duplicate Operations on Resource). It's often a case of an API contract violation (CWE-227).\n\n\n\n### Observed Examples\n- **CVE-2013-4787:** chain: mobile OS verifies cryptographic signature of file in an archive, but then installs a different file with the same name that is also listed in the archive.\n\n\n\n\n## CWE-805: Buffer Access with Incorrect Length Value\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.\n\n### Extended Description\nWhen the length value exceeds the size of the destination, a buffer overflow could occur.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2011-1959:** Chain: large length value causes buffer over-read (CWE-126)\n- **CVE-2011-1848:** Use of packet length field to make a calculation, then copy into a fixed-size buffer\n- **CVE-2011-0105:** Chain: retrieval of length value from an uninitialized memory location\n\n\n\n\n## CWE-193: Off-by-one Error\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nA product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\noff-by-five: An \"off-by-five\" error was reported for sudo in 2002 (CVE-2002-0184), but that is more like a \"length calculation\" error.\n\n### Relationships\nChildOf -> CWE-682\nChildOf -> CWE-682\nCanPrecede -> CWE-617\nCanPrecede -> CWE-170\nCanPrecede -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This is not always a buffer overflow. For example, an off-by-one error could be a factor in a partial comparison, a read from the wrong memory location, an incorrect conditional, etc.\n\n\n\n### Observed Examples\n- **CVE-2003-0252:** Off-by-one error allows remote attackers to cause a denial of service and possibly execute arbitrary code via requests that do not contain newlines.\n- **CVE-2001-1391:** Off-by-one vulnerability in driver allows users to modify kernel memory.\n- **CVE-2002-0083:** Off-by-one error allows local users or remote malicious servers to gain privileges.\n\n\n\n\n## CWE-617: Reachable Assertion\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.\n\n### Extended Description\n\n\nWhile assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service.\n\n\nFor example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service.\n\n\n### Alternative Terms\nassertion failure\n\n### Relationships\nChildOf -> CWE-670\nChildOf -> CWE-670\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2023-49286:** Chain: function in web caching proxy does not correctly check a return value (CWE-253) leading to a reachable assertion (CWE-617)\n- **CVE-2006-6767:** FTP server allows remote attackers to cause a denial of service (daemon abort) via crafted commands which trigger an assertion failure.\n- **CVE-2006-6811:** Chat client allows remote attackers to cause a denial of service (crash) via a long message string when connecting to a server, which causes an assertion failure.\n\n\n\n\n## CWE-1284: Improper Validation of Specified Quantity in Input\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.\n\n### Extended Description\n\n\nSpecified quantities include size, length, frequency, price, rate, number of operations, time, and others. Code may rely on specified quantities to allocate resources, perform calculations, control iteration, etc. When the quantity is not properly validated, then attackers can specify malicious quantities to cause excessive resource allocation, trigger unexpected failures, enable buffer overflows, etc.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-20\nChildOf -> CWE-20\nCanPrecede -> CWE-789\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** This entry is still under development and will continue to see updates and content improvements.\n\n\n\n### Observed Examples\n- **CVE-2022-21668:** Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).\n- **CVE-2008-1440:** lack of validation of length field leads to infinite loop\n- **CVE-2008-2374:** lack of validation of string length fields allows memory consumption or buffer over-read\n\n\n\n\n## CWE-786: Access of Memory Location Before Start of Buffer\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.\n\n### Extended Description\nThis typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** The CWE entry might be misused when lower-level CWE entries might be available. It also overlaps existing CWE entries and might be deprecated in the future.\n**Comments:** If the \"Access\" operation is known to be a read or a write, then investigate children of entries such as CWE-787: Out-of-bounds Write and CWE-125: Out-of-bounds Read.\n**Reasons:**\n- Potential Deprecation\n- Frequent Misuse\n\n\n\n### Observed Examples\n- **CVE-2002-2227:** Unchecked length of SSLv2 challenge value leads to buffer underflow.\n- **CVE-2007-4580:** Buffer underflow from a small size value with a large buffer (length parameter inconsistency, CWE-130)\n- **CVE-2007-1584:** Buffer underflow from an all-whitespace string, which causes a counter to be decremented before the buffer while looking for a non-whitespace character.\n\n"
  },
  "timestamp": "2025-03-30 23:58:36",
  "cve_id": "unknown",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "130",
      "name": "Improper Handling of Length Parameter Inconsistency",
      "type": "Base",
      "score": 0.7988491957654302
    },
    {
      "cwe_id": "805",
      "name": "Buffer Access with Incorrect Length Value",
      "type": "Base",
      "score": 0.79759475815459
    },
    {
      "cwe_id": "191",
      "name": "Integer Underflow (Wrap or Wraparound)",
      "type": "Base",
      "score": 0.7890764823802303
    },
    {
      "cwe_id": "131",
      "name": "Incorrect Calculation of Buffer Size",
      "type": "Base",
      "score": 0.7829318875983151
    },
    {
      "cwe_id": "124",
      "name": "Buffer Underwrite ('Buffer Underflow')",
      "type": "Base",
      "score": 0.7622513482153355
    },
    {
      "cwe_id": "786",
      "name": "Access of Memory Location Before Start of Buffer",
      "type": "Base",
      "score": 0.7608924025451134
    },
    {
      "cwe_id": "197",
      "name": "Numeric Truncation Error",
      "type": "Base",
      "score": 0.7605875356051643
    },
    {
      "cwe_id": "703",
      "name": "Improper Check or Handling of Exceptional Conditions",
      "type": "Pillar",
      "score": 0.7553943318911948
    },
    {
      "cwe_id": "126",
      "name": "Buffer Over-read",
      "type": "Variant",
      "score": 0.7516876569393569
    },
    {
      "cwe_id": "754",
      "name": "Improper Check for Unusual or Exceptional Conditions",
      "type": "Class",
      "score": 0.7516404841892455
    }
  ]
}