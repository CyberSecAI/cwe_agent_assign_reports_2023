{
  "retriever": "dense",
  "query": "## Vulnerability Description\nnth-check is vulnerable to **Inefficient Regular Expression Complexity**\n\n### Vulnerability Description Key Phrases\n- **weakness:** **Inefficient Regular Expression Complexity**\n- **product:** nth-check\n\n## CVE Reference Links Content Summary\nBased on the provided information, here's an analysis of CVE-2021-3803:\n\n**Summary:**\nCVE-2021-3803 is a vulnerability affecting the `node-nth-check` package, a NodeJS module used for parsing and compiling nth-checks from CSS selectors. The vulnerability is a Regular Expression Denial of Service (ReDoS).\n\n**Root Cause:**\nThe vulnerability stems from the use of a vulnerable regular expression used for parsing nth-check formulas.\n\n**Weaknesses/Vulnerabilities:**\n- **ReDoS (Regular Expression Denial of Service):** The regular expression used by `node-nth-check` was susceptible to ReDoS attacks. Specifically, a crafted input string could cause the regex engine to take a very long time to process, effectively freezing or crashing the application.\n\n**Impact of Exploitation:**\n- **Denial of Service (DoS):** By providing a specially crafted string to the vulnerable parsing logic, an attacker can cause the application using the `node-nth-check` module to become unresponsive, consuming excessive resources, or crash entirely. This impacts the availability of the application.\n\n**Attack Vectors:**\n- **Input Manipulation:** The attack vector is through crafted input strings supplied to the parsing function of the `node-nth-check` library. Specifically, the `parse` function.\n\n**Required Attacker Capabilities/Position:**\n- The attacker needs to be able to control the input that is passed to the `node-nth-check` library's parsing function\n- No special privileges are needed.\n\n**Additional details:**\n- The provided github commit includes the fix for the vulnerability, replacing the vulnerable regex with a hand-rolled parser\n- The Debian Security Advisory (DLA 3428-1) confirms the vulnerability and the fix\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 1333 | Inefficient Regular Expression Complexity | Base | Allowed | sparse | 0.203 |\n| 2 | 186 | Overly Restrictive Regular Expression | Base | Allowed | sparse | 0.132 |\n| 3 | 407 | Inefficient Algorithmic Complexity | Class | Allowed-with-Review | sparse | 0.123 |\n| 4 | 185 | Incorrect Regular Expression | Class | Allowed-with-Review | sparse | 0.104 |\n| 5 | 777 | Regular Expression without Anchors | Variant | Allowed | sparse | 0.094 |\n| 6 | 625 | Permissive Regular Expression | Base | Allowed | dense | 0.511 |\n| 7 | 182 | Collapse of Data into Unsafe Value | Base | Allowed | graph | 0.002 |\n| 8 | 624 | Executable Regular Expression Error | Base | Allowed | sparse | 0.089 |\n| 9 | 637 | Unnecessary Complexity in Protection Mechanism (Not Using 'Economy of Mechanism') | Class | Allowed-with-Review | sparse | 0.088 |\n| 10 | 626 | Null Byte Interaction Error (Poison Null Byte) | Variant | Allowed | sparse | 0.085 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-1333: Inefficient Regular Expression Complexity\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.\n\n### Extended Description\nSome regular expression engines have a feature called \"backtracking\". If the token cannot match, the engine \"backtracks\" to a position that may result in a different token that can match.\n Backtracking becomes a weakness if all of these conditions are met:\n\n\n  - The number of possible backtracking attempts are exponential relative to the length of the input.\n\n  - The input can fail to match the regular expression.\n\n  - The input can be long enough.\n\n Attackers can create crafted inputs that intentionally cause the regular expression to use excessive backtracking in a way that causes the CPU consumption to spike. \n\n### Alternative Terms\nReDoS: ReDoS is an abbreviation of \"Regular expression Denial of Service\".\nRegular Expression Denial of Service: While this term is attack-focused, this is commonly used to describe the weakness.\nCatastrophic backtracking: This term is used to describe the behavior of the regular expression as a negative technical impact.\n\n### Relationships\nChildOf -> CWE-407\nChildOf -> CWE-407\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2020-5243:** server allows ReDOS with crafted User-Agent strings, due to overlapping capture groups that cause excessive backtracking.\n- **CVE-2021-21317:** npm package for user-agent parser prone to ReDoS due to overlapping capture groups\n- **CVE-2019-16215:** Markdown parser uses inefficient regex when processing a message, allowing users to cause CPU consumption and delay preventing processing of other messages.\n\n\n\n\n## CWE-186: Overly Restrictive Regular Expression\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nA regular expression is overly restrictive, which prevents dangerous values from being detected.\n\n### Extended Description\nThis weakness is not about regular expression complexity. Rather, it is about a regular expression that does not match all values that are intended. Consider the use of a regexp to identify acceptable values or to spot unwanted terms. An overly restrictive regexp misses some potentially security-relevant values leading to either false positives *or* false negatives, depending on how the regexp is being used within the code. Consider the expression /[0-8]/ where the intention was /[0-9]/. This expression is not \"complex\" but the value \"9\" is not matched when maybe the programmer planned to check for it.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-185\nCanAlsoBe -> CWE-184\nCanAlsoBe -> CWE-183\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Can overlap allowlist/denylist errors (CWE-183/CWE-184)\n\n\n\n### Observed Examples\n- **CVE-2005-1604:** MIE. \".php.ns\" bypasses \".php$\" regexp but is still parsed as PHP by Apache. (manipulates an equivalence property under Apache)\n\n\n\n\n## CWE-407: Inefficient Algorithmic Complexity\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nAn algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nQuadratic Complexity: Used when the algorithmic complexity is related to the square of the number of inputs (N^2)\n\n### Relationships\nChildOf -> CWE-405\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2021-32617:** C++ library for image metadata has \"quadratic complexity\" issue with unnecessarily repetitive parsing each time an invalid character is encountered\n- **CVE-2020-10735:** Python has \"quadratic complexity\" issue when converting string to int with many digits in unexpected bases\n- **CVE-2020-5243:** server allows ReDOS with crafted User-Agent strings, due to overlapping capture groups that cause excessive backtracking.\n\n\n\n\n## CWE-185: Incorrect Regular Expression\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product specifies a regular expression in a way that causes data to be improperly matched or compared.\n\n### Extended Description\nWhen the regular expression is used in protection mechanisms such as filtering or validation, this may allow an attacker to bypass the intended restrictions on the incoming data.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-697\nCanPrecede -> CWE-187\nCanPrecede -> CWE-182\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Relationship]** While there is some overlap with allowlist/denylist problems, this entry is intended to deal with incorrectly written regular expressions, regardless of their intended use. Not every regular expression is intended for use as an allowlist or denylist. In addition, allowlists and denylists can be implemented using other mechanisms besides regular expressions.\n\n**[Research Gap]** Regexp errors are likely a primary factor in many MFVs, especially those that require multiple manipulations to exploit. However, they are rarely diagnosed at this level of detail.\n\n\n\n### Observed Examples\n- **CVE-2002-2109:** Regexp isn't \"anchored\" to the beginning or end, which allows spoofed values that have trusted values as substrings.\n- **CVE-2005-1949:** Regexp for IP address isn't anchored at the end, allowing appending of shell metacharacters.\n- **CVE-2001-1072:** Bypass access restrictions via multiple leading slash, which causes a regular expression to fail.\n\n\n\n\n## CWE-777: Regular Expression without Anchors\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses a regular expression to perform neutralization, but the regular expression is not anchored and may allow malicious or malformed data to slip through.\n\n### Extended Description\nWhen performing tasks such as validating against a set of allowed inputs (allowlist), data is examined and possibly modified to ensure that it is well-formed and adheres to a list of safe values. If the regular expression is not anchored, malicious or malformed data may be included before or after any string matching the regular expression. The type of malicious data that is allowed will depend on the context of the application and which anchors are omitted from the regular expression.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-625\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-30034:** Chain: Web UI for a Python RPC framework does not use regex anchors to validate user login emails (CWE-777), potentially allowing bypass of OAuth (CWE-1390).\n\n\n\n\n## CWE-625: Permissive Regular Expression\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses a regular expression that does not sufficiently restrict the set of allowed values.\n\n### Extended Description\n\n\nThis effectively causes the regexp to accept substrings that match the pattern, which produces a partial comparison to the target. In some cases, this can lead to other weaknesses. Common errors include:\n\n\n  - not identifying the beginning and end of the target string\n\n  - using wildcards instead of acceptable character ranges\n\n  - others\n\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-185\nPeerOf -> CWE-187\nPeerOf -> CWE-184\nPeerOf -> CWE-183\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2021-22204:** Chain: regex in EXIF processor code does not correctly determine where a string ends (CWE-625), enabling eval injection (CWE-95), as exploited in the wild per CISA KEV.\n- **CVE-2006-1895:** \".*\" regexp leads to static code injection\n- **CVE-2002-2175:** insertion of username into regexp results in partial comparison, causing wrong database entry to be updated when one username is a substring of another.\n\n\n\n\n## CWE-182: Collapse of Data into Unsafe Value\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product filters data in a way that causes it to be reduced or \"collapsed\" into an unsafe value that violates an expected security property.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\nCanPrecede -> CWE-33\nCanPrecede -> CWE-34\nCanPrecede -> CWE-35\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Overlaps regular expressions, although an implementation might not necessarily use regexp's.\n\n\n\n### Observed Examples\n- **CVE-2004-0815:** \"/.////\" in pathname collapses to absolute path.\n- **CVE-2005-3123:** \"/.//..//////././\" is collapsed into \"/.././\" after \"..\" and \"//\" sequences are removed.\n- **CVE-2002-0325:** \".../...//\" collapsed to \"...\" due to removal of \"./\" in web server.\n\n\n\n\n## CWE-624: Executable Regular Expression Error\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers.\n\n### Extended Description\nCase (2) is possible in the PHP preg_replace() function, and possibly in other languages when a user-controlled input is inserted into a string that is later parsed as a regular expression.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-77\nChildOf -> CWE-77\nChildOf -> CWE-77\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Research Gap]** Under-studied. The existing PHP reports are limited to highly skilled researchers, but there are few examples for other languages. It is suspected that this is under-reported for all languages. Usability factors might make it more prevalent in PHP, but this theory has not been investigated.\n\n\n\n### Observed Examples\n- **CVE-2006-2059:** Executable regexp in PHP by inserting \"e\" modifier into first argument to preg_replace\n- **CVE-2005-3420:** Executable regexp in PHP by inserting \"e\" modifier into first argument to preg_replace\n- **CVE-2006-2878:** Complex curly syntax inserted into the replacement argument to PHP preg_replace(), which uses the \"/e\" modifier\n\n\n\n\n## CWE-637: Unnecessary Complexity in Protection Mechanism (Not Using 'Economy of Mechanism')\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product uses a more complex mechanism than necessary, which could lead to resultant weaknesses when the mechanism is not correctly understood, modeled, configured, implemented, or used.\n\n### Extended Description\nSecurity mechanisms should be as simple as possible. Complex security mechanisms may engender partial implementations and compatibility problems, with resulting mismatches in assumptions and implemented security. A corollary of this principle is that data specifications should be as simple as possible, because complex data specifications result in complex validation code. Complex tasks and systems may also need to be guarded by complex security checks, so simple systems should be preferred.\n\n### Alternative Terms\nUnnecessary Complexity\n\n### Relationships\nChildOf -> CWE-657\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2007-6067:** Support for complex regular expressions leads to a resultant algorithmic complexity weakness (CWE-407).\n- **CVE-2007-1552:** Either a filename extension and a Content-Type header could be used to infer the file type, but the developer only checks the Content-Type, enabling unrestricted file upload (CWE-434).\n- **CVE-2007-6479:** In Apache environments, a \"filename.php.gif\" can be redirected to the PHP interpreter instead of being sent as an image/gif directly to the user. Not knowing this, the developer only checks the last extension of a submitted filename, enabling arbitrary code execution.\n\n\n\n\n## CWE-626: Null Byte Interaction Error (Poison Null Byte)\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe product does not properly handle null bytes or NUL characters when passing data between different representations or components.\n\n### Extended Description\n\n\nA null byte (NUL character) can have different meanings across representations or languages. For example, it is a string terminator in standard C libraries, but Perl and PHP strings do not treat it as a terminator. When two representations are crossed - such as when Perl or PHP invokes underlying C functionality - this can produce an interaction error with unexpected results. Similar issues have been reported for ASP. Other interpreters written in C might also be affected.\n\n\nThe poison null byte is frequently useful in path traversal attacks by terminating hard-coded extensions that are added to a filename. It can play a role in regular expression processing in PHP.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-147\nChildOf -> CWE-436\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Terminology]** Current usage of \"poison null byte\" is typically related to this C/Perl/PHP interaction error, but the original term in 1998 was applied to an off-by-one buffer overflow involving a null byte.\n\n**[Research Gap]** There are not many CVE examples, because the poison NULL byte is a design limitation, which typically is not included in CVE by itself. It is typically used as a facilitator manipulation to widen the scope of potential attacks against other vulnerabilities.\n\n\n\n### Observed Examples\n- **CVE-2005-4155:** NUL byte bypasses PHP regular expression check\n- **CVE-2005-3153:** inserting SQL after a NUL byte bypasses allowlist regexp, enabling SQL injection\n\n",
  "keyphrases": {},
  "timestamp": "2025-03-30 13:26:58",
  "cve_id": "unknown",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "407",
      "name": "Inefficient Algorithmic Complexity",
      "type": "Class",
      "score": 0.750648085433091
    },
    {
      "cwe_id": "626",
      "name": "Null Byte Interaction Error (Poison Null Byte)",
      "type": "Variant",
      "score": 0.7505224187030354
    },
    {
      "cwe_id": "184",
      "name": "Incomplete List of Disallowed Inputs",
      "type": "Base",
      "score": 0.74991385109228
    },
    {
      "cwe_id": "158",
      "name": "Improper Neutralization of Null Byte or NUL Character",
      "type": "Variant",
      "score": 0.7482812548595312
    },
    {
      "cwe_id": "212",
      "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
      "type": "Base",
      "score": 0.7427180673332012
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "type": "Base",
      "score": 0.7422363550936316
    },
    {
      "cwe_id": "625",
      "name": "Permissive Regular Expression",
      "type": "Base",
      "score": 0.7414240465780833
    },
    {
      "cwe_id": "703",
      "name": "Improper Check or Handling of Exceptional Conditions",
      "type": "Pillar",
      "score": 0.7405227827263928
    },
    {
      "cwe_id": "1289",
      "name": "Improper Validation of Unsafe Equivalence in Input",
      "type": "Base",
      "score": 0.7400613006827255
    },
    {
      "cwe_id": "185",
      "name": "Incorrect Regular Expression",
      "type": "Class",
      "score": 0.7388604485954515
    }
  ]
}