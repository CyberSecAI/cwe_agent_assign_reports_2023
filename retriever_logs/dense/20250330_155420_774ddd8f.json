{
  "retriever": "dense",
  "query": "## Vulnerability Description\norg.xwiki.platformxwiki-platform-user-profile-ui is **missing authorization** to enable or disable users. Any user (logged in or not) with access to the page XWiki.XWikiUserProfileSheet can enable or disable any user profile. This might allow to a disabled user to re-enable themselves, or to an attacker to disable any user of the wiki. The problem has been patched in XWiki 13.10.7, 14.5RC1 and 14.4.2. Workarounds The problem can be patched immediately by editing the page `XWiki.XWikiUserProfileSheet` in the wiki and by performing the changes contained in https//github.com/xwiki/xwiki-platform/commit/5be1cc0adf917bf10899c47723fa451e950271fa.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **missing authorization**\n- **impact:** enable or disable any user profile and disabled user to re-enable themselves and disable any user of the wiki\n- **vector:** access to the page XWiki.XWikiUserProfileSheet\n- **attacker:** Any user (logged in or not)\n- **product:** XWiki platform\n- **component:** user profile UI\n\n## CVE Reference Links Content Summary\nBased on the provided content, here's an analysis of the vulnerability:\n\n**Root Cause of Vulnerability:**\n\nThe vulnerability stems from a missing authorization check in the `XWikiUserProfileSheet`.  Specifically, any user, regardless of their privileges or login status, could enable or disable any user account by crafting a specific URL with the `action` parameter set to either `disable` or `enable` along with the `userId` parameter.\n\n**Weaknesses/Vulnerabilities Present:**\n\n*   **Missing Authorization:**  The primary weakness is the lack of proper authorization checks when enabling or disabling user accounts. The system failed to verify if the user performing the action had the necessary permissions to modify the specified user's account status.\n*   **CSRF Protection Bypass**: Although the system used CSRF protection, the vulnerability was exploitable by any user, logged in or not, due to the missing authorization.\n\n**Impact of Exploitation:**\n\n*   **User Disablement:** An attacker could disable any user account, including administrators, effectively locking them out of the system. This can lead to a denial-of-service type scenario for legitimate users.\n*   **User Impersonation/Re-enablement:** Disabled users could re-enable their own accounts, which could be a problem on private wikis.\n*   **Sabotage**: By disabling all users, an attacker could sabotage the wiki.\n\n**Attack Vectors:**\n\n*   **HTTP GET Request:** The vulnerability is exploited by crafting a URL with specific parameters (`action`, `userId`, `csrf` token) and sending it via a GET request.\n*   **Network-based:**  The attack can be initiated from any network location with access to the vulnerable XWiki instance.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Network Access:** The attacker needs network access to the XWiki instance.\n*   **Knowledge of User IDs:**  The attacker needs to know or be able to obtain user IDs of the accounts they intend to disable or enable.\n*   **CSRF Token:** The attacker needs to obtain the CSRF token, which can be found in the `data-xwiki-form-token` attribute of the `<html>` element. However, as this can be accessed by any user the requirement isn't particularly difficult to satisfy.\n\n**Additional Notes:**\n\n*   The vulnerability was present in XWiki versions 12.4 and was fixed in 13.10.7, 14.4.2, and 14.5RC1.\n*   The provided commit diff shows the code fix, which adds a check `if (!$isCurrentUser...` to prevent users from disabling themselves and an initial check `if ($hasAdmin...)` to ensure that the user has admin rights.\n*   The vulnerability was assigned CVE-2022-41930 and is tracked under GHSA-p5v9-g8w8-5q4v.\n*   The vulnerability has a CVSS score of 7.5/10, rated as \"High\".\n\nThis analysis provides more detail than the official CVE description, particularly regarding the specific URL parameters, the possibility for users to re-enable themselves, and the specific code fix.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 284 | Improper Access Control | Pillar | Discouraged | alternate_terms | 0.800 |\n| 2 | 116 | Improper Encoding or Escaping of Output | Class | Allowed-with-Review | sparse | 0.779 |\n| 3 | 552 | Files or Directories Accessible to External Parties | Base | Allowed | sparse | 0.690 |\n| 4 | 862 | Missing Authorization | Class | Allowed-with-Review | sparse | 0.689 |\n| 5 | 863 | Incorrect Authorization | Class | Allowed-with-Review | sparse | 0.649 |\n| 6 | 286 | Incorrect User Management | Class | Allowed-with-Review | dense | 0.457 |\n| 7 | 842 | Placement of User into Incorrect Group | Base | Allowed | graph | 0.002 |\n| 8 | 328 | Use of Weak Hash | Base | Allowed | sparse | 0.642 |\n| 9 | 202 | Exposure of Sensitive Information Through Data Queries | Base | Allowed | sparse | 0.629 |\n| 10 | 201 | Insertion of Sensitive Information Into Sent Data | Base | Allowed | sparse | 0.627 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-284: Improper Access Control\n**Abstraction:** Pillar\n**Status:** Incomplete\n\n### Description\nThe product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n### Extended Description\n\n\nAccess control involves the use of several protection mechanisms such as:\n\n\n  - Authentication (proving the identity of an actor)\n\n  - Authorization (ensuring that a given actor can access a resource), and\n\n  - Accountability (tracking of activities that were performed)\n\nWhen any mechanism is not applied or otherwise fails, attackers can compromise the security of the product by gaining privileges, reading sensitive information, executing commands, evading detection, etc.\n\nThere are two distinct behaviors that can introduce access control weaknesses:\n\n\n  - Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator.\n\n  - Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.\n\n\n\n### Alternative Terms\nAuthorization: The terms \"access control\" and \"authorization\" are often used interchangeably, although many people have distinct definitions. The CWE usage of \"access control\" is intended as a general term for the various mechanisms that restrict which users can access which resources, and \"authorization\" is more narrowly defined. It is unlikely that there will be community consensus on the use of these terms.\n\n### Relationships\nNone\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-284 is extremely high-level, a Pillar. Its name, \"Improper Access Control,\" is often misused in low-information vulnerability reports [REF-1287] or by active use of the OWASP Top Ten, such as \"A01:2021-Broken Access Control\". It is not useful for trend analysis.\n**Comments:** Consider using descendants of CWE-284 that are more specific to the kind of access control involved, such as those involving authorization (Missing Authorization (CWE-862), Incorrect Authorization (CWE-863), Incorrect Permission Assignment for Critical Resource (CWE-732), etc.); authentication (Missing Authentication (CWE-306) or Weak Authentication (CWE-1390)); Incorrect User Management (CWE-286); Improper Restriction of Communication Channel to Intended Endpoints (CWE-923); etc.\n**Reasons:**\n- Frequent Misuse\n- Abstraction\n**Suggested Alternatives:**\n- CWE-862: Missing Authorization\n- CWE-863: Incorrect Authorization\n- CWE-732: Incorrect Permission Assignment for Critical Resource\n- CWE-306: Missing Authentication\n- CWE-1390: Weak Authentication\n- CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n\n\n### Additional Notes\n**[Maintenance]** \n\nThis entry needs more work. Possible sub-categories include:\n\n\n  - Trusted group includes undesired entities (partially covered by CWE-286)\n\n  - Group can perform undesired actions\n\n  - ACL parse error does not fail closed\n\n\n\n\n\n### Observed Examples\n- **CVE-2022-24985:** A form hosting website only checks the session authentication status for a single form, making it possible to bypass authentication when there are multiple forms\n- **CVE-2022-29238:** Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.\n- **CVE-2022-23607:** Python-based HTTP library did not scope cookies to a particular domain such that \"supercookies\" could be sent to any domain on redirect\n\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n### Extended Description\n\n\nImproper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead.\n\n\nMost products follow a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, \"GET /index.html HTTP/1.1\" is a structured message containing a command (\"GET\") with a single argument (\"/index.html\") and metadata about which protocol version is being used (\"HTTP/1.1\").\n\n\nIf an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly.\n\n\n### Alternative Terms\nOutput Sanitization\nOutput Validation\nOutput Encoding\n\n### Relationships\nChildOf -> CWE-707\nCanPrecede -> CWE-74\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Relationship]** This weakness is primary to all weaknesses related to injection (CWE-74) since the inherent nature of injection involves the violation of structured messages.\n\n**[Relationship]** \n\nCWE-116 and CWE-20 have a close association because, depending on the nature of the structured message, proper input validation can indirectly prevent special characters from changing the meaning of a structured message. For example, by validating that a numeric ID field should only contain the 0-9 characters, the programmer effectively prevents injection attacks.\n\n\nHowever, input validation is not always sufficient, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a last name is inserted into a query. The name \"O'Reilly\" would likely pass the validation step since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the \"'\" apostrophe character, which would need to be escaped or otherwise neutralized. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.\n\n\n**[Terminology]** The usage of the \"encoding\" and \"escaping\" terms varies widely. For example, in some programming languages, the terms are used interchangeably, while other languages provide APIs that use both terms for different tasks. This overlapping usage extends to the Web, such as the \"escape\" JavaScript function whose purpose is stated to be encoding. The concepts of encoding and escaping predate the Web by decades. Given such a context, it is difficult for CWE to adopt a consistent vocabulary that will not be misinterpreted by some constituency.\n\n**[Theoretical]** This is a data/directive boundary error in which data boundaries are not sufficiently enforced before it is sent to a different control sphere.\n\n**[Research Gap]** While many published vulnerabilities are related to insufficient output encoding, there is such an emphasis on input validation as a protection mechanism that the underlying causes are rarely described. Within CVE, the focus is primarily on well-understood issues like cross-site scripting and SQL injection. It is likely that this weakness frequently occurs in custom protocols that support multiple encodings, which are not necessarily detectable with automated techniques.\n\n\n\n### Observed Examples\n- **CVE-2021-41232:** Chain: authentication routine in Go-based agile development product does not escape user name (CWE-116), allowing LDAP injection (CWE-90)\n- **CVE-2008-4636:** OS command injection in backup software using shell metacharacters in a filename; correct behavior would require that this filename could not be changed.\n- **CVE-2008-0769:** Web application does not set the charset when sending a page to a browser, allowing for XSS exploitation when a browser chooses an unexpected encoding.\n\n\n\n\n## CWE-552: Files or Directories Accessible to External Parties\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product makes files or directories accessible to unauthorized actors, even though they should not be.\n\n### Extended Description\n\n\nWeb servers, FTP servers, and similar servers may store a set of files underneath a \"root\" directory that is accessible to the server's users. Applications may store sensitive files underneath this root without also using access control to limit which users may request those files, if any. Alternately, an application might package multiple files or directories into an archive file (e.g., ZIP or tar), but the application might not exclude sensitive files that are underneath those directories.\n\n\nIn cloud technologies and containers, this weakness might present itself in the form of misconfigured storage accounts that can be read or written by a public or anonymous user.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-668\nChildOf -> CWE-668\nChildOf -> CWE-285\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2005-1835:** Data file under web root.\n\n\n\n\n## CWE-862: Missing Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product does not perform an authorization check when an actor attempts to access a resource or perform an action.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n### Observed Examples\n- **CVE-2022-24730:** Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information\n- **CVE-2009-3168:** Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.\n- **CVE-2009-3597:** Web application stores database file under the web root with insufficient access control (CWE-219), allowing direct request.\n\n\n\n\n## CWE-863: Incorrect Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** \n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n\n### Observed Examples\n- **CVE-2021-39155:** Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.\n- **CVE-2019-15900:** Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).\n- **CVE-2009-2213:** Gateway uses default \"Allow\" configuration for its authorization settings.\n\n\n\n\n## CWE-286: Incorrect User Management\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product does not properly manage a user within its environment.\n\n### Extended Description\nUsers can be assigned to the wrong group (class) of permissions resulting in unintended access rights to sensitive objects.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Maintenance]** The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).\n\n**[Maintenance]** This item needs more work. Possible sub-categories include: user in wrong group, and user with insecure profile or \"configuration\". It also might be better expressed as a category than a weakness.\n\n\n\n### Observed Examples\n- **CVE-2022-36109:** Containerization product does not record a user's supplementary group ID, allowing bypass of group restrictions.\n- **CVE-1999-1193:** Operating system assigns user to privileged wheel group, allowing the user to gain root privileges.\n\n\n\n\n## CWE-842: Placement of User into Incorrect Group\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product or the administrator places a user into an incorrect group.\n\n### Extended Description\nIf the incorrect group has more access or privileges than the intended group, the user might be able to bypass intended security policy to access unexpected resources or perform unexpected actions. The access-control system might not be able to detect malicious usage of this group membership.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-286\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-1999-1193:** Operating system assigns user to privileged wheel group, allowing the user to gain root privileges.\n- **CVE-2010-3716:** Chain: drafted web request allows the creation of users with arbitrary group membership.\n- **CVE-2008-5397:** Chain: improper processing of configuration options causes users to contain unintended group memberships.\n\n\n\n\n## CWE-328: Use of Weak Hash\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).\n\n### Extended Description\n\n\nA hash function is defined as an algorithm that maps arbitrarily sized data into a fixed-sized digest (output) such that the following properties hold:\n\n\n  1. The algorithm is not invertible (also called \"one-way\" or \"not reversible\")\n\n  1. The algorithm is deterministic; the same input produces the same digest every time\n\n Building on this definition, a cryptographic hash function must also ensure that a malicious actor cannot leverage the hash function to have a reasonable chance of success at determining any of the following:\n\n  1. the original input (preimage attack), given only the digest\n\n  1. another input that can produce the same digest (2nd preimage attack), given the original input\n\n  1. a set of two or more inputs that evaluate to the same digest (birthday attack), given the actor can arbitrarily choose the inputs to be hashed and can do so a reasonable amount of times\n\nWhat is regarded as \"reasonable\" varies by context and threat model, but in general, \"reasonable\" could cover any attack that is more efficient than brute force (i.e., on average, attempting half of all possible combinations). Note that some attacks might be more efficient than brute force but are still not regarded as achievable in the real world.\n\nAny algorithm that does not meet the above conditions will generally be considered weak for general use in hashing.\n\n\nIn addition to algorithmic weaknesses, a hash function can be made weak by using the hash in a security context that breaks its security guarantees. For example, using a hash function without a salt for storing passwords (that are sufficiently short) could enable an adversary to create a \"rainbow table\" [REF-637] to recover the password under certain conditions; this attack works against such hash functions as MD5, SHA-1, and SHA-2.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-326\nChildOf -> CWE-327\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** Since CWE 4.4, various cryptography-related entries including CWE-328 have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.\n\n\n\n### Observed Examples\n- **CVE-2022-30320:** Programmable Logic Controller (PLC) uses a protocol with a cryptographically insecure hashing algorithm for passwords.\n- **CVE-2005-4900:** SHA-1 algorithm is not collision-resistant.\n- **CVE-2020-25685:** DNS product uses a weak hash (CRC32 or SHA-1) of the query name, allowing attacker to forge responses by computing domain names with the same hash.\n\n\n\n\n## CWE-202: Exposure of Sensitive Information Through Data Queries\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nWhen trying to keep information confidential, an attacker can often infer some of the information by using statistics.\n\n### Extended Description\nIn situations where data should not be tied to individual users, but a large number of users should be able to make queries that \"scrub\" the identity of users, it may be possible to get information about a user -- e.g., by specifying search terms that are known to be unique to that user.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1230\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** \n\nThe relationship between CWE-202 and CWE-612 needs to be investigated more closely, as they may be different descriptions of the same kind of problem. CWE-202 is also being considered for deprecation, as it is not clearly described and may have been misunderstood by CWE users. It could be argued that this issue is better covered by CAPEC; an attacker can utilize their data-query privileges to perform this kind of operation, and if the attacker should not be allowed to perform the operation - or if the sensitive data should not have been made accessible at all - then that is more appropriately classified as a separate CWE related to authorization (see the parent, CWE-1230).\n\n\n\n\n### Observed Examples\n- **CVE-2022-41935:** Wiki product allows an adversary to discover filenames via a series of queries starting with one letter and then iteratively extending the match.\n\n\n\n\n## CWE-201: Insertion of Sensitive Information Into Sent Data\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-200\nCanAlsoBe -> CWE-209\nCanAlsoBe -> CWE-202\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure).\n\n\n\n### Observed Examples\n- **CVE-2022-0708:** Collaboration platform does not clear team emails in a response, allowing leak of email addresses\n\n",
  "keyphrases": {
    "base_query": "## Vulnerability Description\norg.xwiki.platformxwiki-platform-user-profile-ui is **missing authorization** to enable or disable users. Any user (logged in or not) with access to the page XWiki.XWikiUserProfileSheet can enable or disable any user profile. This might allow to a disabled user to re-enable themselves, or to an attacker to disable any user of the wiki. The problem has been patched in XWiki 13.10.7, 14.5RC1 and 14.4.2. Workarounds The problem can be patched immediately by editing the page `XWiki.XWikiUserProfileSheet` in the wiki and by performing the changes contained in https//github.com/xwiki/xwiki-platform/commit/5be1cc0adf917bf10899c47723fa451e950271fa.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **missing authorization**\n- **impact:** enable or disable any user profile and disabled user to re-enable themselves and disable any user of the wiki\n- **vector:** access to the page XWiki.XWikiUserProfileSheet\n- **attacker:** Any user (logged in or not)\n- **product:** XWiki platform\n- **component:** user profile UI\n\n## CVE Reference Links Content Summary\nBased on the provided content, here's an analysis of the vulnerability:\n\n**Root Cause of Vulnerability:**\n\nThe vulnerability stems from a missing authorization check in the `XWikiUserProfileSheet`.  Specifically, any user, regardless of their privileges or login status, could enable or disable any user account by crafting a specific URL with the `action` parameter set to either `disable` or `enable` along with the `userId` parameter.\n\n**Weaknesses/Vulnerabilities Present:**\n\n*   **Missing Authorization:**  The primary weakness is the lack of proper authorization checks when enabling or disabling user accounts. The system failed to verify if the user performing the action had the necessary permissions to modify the specified user's account status.\n*   **CSRF Protection Bypass**: Although the system used CSRF protection, the vulnerability was exploitable by any user, logged in or not, due to the missing authorization.\n\n**Impact of Exploitation:**\n\n*   **User Disablement:** An attacker could disable any user account, including administrators, effectively locking them out of the system. This can lead to a denial-of-service type scenario for legitimate users.\n*   **User Impersonation/Re-enablement:** Disabled users could re-enable their own accounts, which could be a problem on private wikis.\n*   **Sabotage**: By disabling all users, an attacker could sabotage the wiki.\n\n**Attack Vectors:**\n\n*   **HTTP GET Request:** The vulnerability is exploited by crafting a URL with specific parameters (`action`, `userId`, `csrf` token) and sending it via a GET request.\n*   **Network-based:**  The attack can be initiated from any network location with access to the vulnerable XWiki instance.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Network Access:** The attacker needs network access to the XWiki instance.\n*   **Knowledge of User IDs:**  The attacker needs to know or be able to obtain user IDs of the accounts they intend to disable or enable.\n*   **CSRF Token:** The attacker needs to obtain the CSRF token, which can be found in the `data-xwiki-form-token` attribute of the `<html>` element. However, as this can be accessed by any user the requirement isn't particularly difficult to satisfy.\n\n**Additional Notes:**\n\n*   The vulnerability was present in XWiki versions 12.4 and was fixed in 13.10.7, 14.4.2, and 14.5RC1.\n*   The provided commit diff shows the code fix, which adds a check `if (!$isCurrentUser...` to prevent users from disabling themselves and an initial check `if ($hasAdmin...)` to ensure that the user has admin rights.\n*   The vulnerability was assigned CVE-2022-41930 and is tracked under GHSA-p5v9-g8w8-5q4v.\n*   The vulnerability has a CVSS score of 7.5/10, rated as \"High\".\n\nThis analysis provides more detail than the official CVE description, particularly regarding the specific URL parameters, the possibility for users to re-enable themselves, and the specific code fix.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 284 | Improper Access Control | Pillar | Discouraged | alternate_terms | 0.800 |\n| 2 | 116 | Improper Encoding or Escaping of Output | Class | Allowed-with-Review | sparse | 0.779 |\n| 3 | 552 | Files or Directories Accessible to External Parties | Base | Allowed | sparse | 0.690 |\n| 4 | 862 | Missing Authorization | Class | Allowed-with-Review | sparse | 0.689 |\n| 5 | 863 | Incorrect Authorization | Class | Allowed-with-Review | sparse | 0.649 |\n| 6 | 286 | Incorrect User Management | Class | Allowed-with-Review | dense | 0.457 |\n| 7 | 842 | Placement of User into Incorrect Group | Base | Allowed | graph | 0.002 |\n| 8 | 328 | Use of Weak Hash | Base | Allowed | sparse | 0.642 |\n| 9 | 202 | Exposure of Sensitive Information Through Data Queries | Base | Allowed | sparse | 0.629 |\n| 10 | 201 | Insertion of Sensitive Information Into Sent Data | Base | Allowed | sparse | 0.627 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-284: Improper Access Control\n**Abstraction:** Pillar\n**Status:** Incomplete\n\n### Description\nThe product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n### Extended Description\n\n\nAccess control involves the use of several protection mechanisms such as:\n\n\n  - Authentication (proving the identity of an actor)\n\n  - Authorization (ensuring that a given actor can access a resource), and\n\n  - Accountability (tracking of activities that were performed)\n\nWhen any mechanism is not applied or otherwise fails, attackers can compromise the security of the product by gaining privileges, reading sensitive information, executing commands, evading detection, etc.\n\nThere are two distinct behaviors that can introduce access control weaknesses:\n\n\n  - Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator.\n\n  - Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.\n\n\n\n### Alternative Terms\nAuthorization: The terms \"access control\" and \"authorization\" are often used interchangeably, although many people have distinct definitions. The CWE usage of \"access control\" is intended as a general term for the various mechanisms that restrict which users can access which resources, and \"authorization\" is more narrowly defined. It is unlikely that there will be community consensus on the use of these terms.\n\n### Relationships\nNone\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-284 is extremely high-level, a Pillar. Its name, \"Improper Access Control,\" is often misused in low-information vulnerability reports [REF-1287] or by active use of the OWASP Top Ten, such as \"A01:2021-Broken Access Control\". It is not useful for trend analysis.\n**Comments:** Consider using descendants of CWE-284 that are more specific to the kind of access control involved, such as those involving authorization (Missing Authorization (CWE-862), Incorrect Authorization (CWE-863), Incorrect Permission Assignment for Critical Resource (CWE-732), etc.); authentication (Missing Authentication (CWE-306) or Weak Authentication (CWE-1390)); Incorrect User Management (CWE-286); Improper Restriction of Communication Channel to Intended Endpoints (CWE-923); etc.\n**Reasons:**\n- Frequent Misuse\n- Abstraction\n**Suggested Alternatives:**\n- CWE-862: Missing Authorization\n- CWE-863: Incorrect Authorization\n- CWE-732: Incorrect Permission Assignment for Critical Resource\n- CWE-306: Missing Authentication\n- CWE-1390: Weak Authentication\n- CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n\n\n### Additional Notes\n**[Maintenance]** \n\nThis entry needs more work. Possible sub-categories include:\n\n\n  - Trusted group includes undesired entities (partially covered by CWE-286)\n\n  - Group can perform undesired actions\n\n  - ACL parse error does not fail closed\n\n\n\n\n\n### Observed Examples\n- **CVE-2022-24985:** A form hosting website only checks the session authentication status for a single form, making it possible to bypass authentication when there are multiple forms\n- **CVE-2022-29238:** Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.\n- **CVE-2022-23607:** Python-based HTTP library did not scope cookies to a particular domain such that \"supercookies\" could be sent to any domain on redirect\n\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n### Extended Description\n\n\nImproper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead.\n\n\nMost products follow a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, \"GET /index.html HTTP/1.1\" is a structured message containing a command (\"GET\") with a single argument (\"/index.html\") and metadata about which protocol version is being used (\"HTTP/1.1\").\n\n\nIf an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly.\n\n\n### Alternative Terms\nOutput Sanitization\nOutput Validation\nOutput Encoding\n\n### Relationships\nChildOf -> CWE-707\nCanPrecede -> CWE-74\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Relationship]** This weakness is primary to all weaknesses related to injection (CWE-74) since the inherent nature of injection involves the violation of structured messages.\n\n**[Relationship]** \n\nCWE-116 and CWE-20 have a close association because, depending on the nature of the structured message, proper input validation can indirectly prevent special characters from changing the meaning of a structured message. For example, by validating that a numeric ID field should only contain the 0-9 characters, the programmer effectively prevents injection attacks.\n\n\nHowever, input validation is not always sufficient, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a last name is inserted into a query. The name \"O'Reilly\" would likely pass the validation step since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the \"'\" apostrophe character, which would need to be escaped or otherwise neutralized. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.\n\n\n**[Terminology]** The usage of the \"encoding\" and \"escaping\" terms varies widely. For example, in some programming languages, the terms are used interchangeably, while other languages provide APIs that use both terms for different tasks. This overlapping usage extends to the Web, such as the \"escape\" JavaScript function whose purpose is stated to be encoding. The concepts of encoding and escaping predate the Web by decades. Given such a context, it is difficult for CWE to adopt a consistent vocabulary that will not be misinterpreted by some constituency.\n\n**[Theoretical]** This is a data/directive boundary error in which data boundaries are not sufficiently enforced before it is sent to a different control sphere.\n\n**[Research Gap]** While many published vulnerabilities are related to insufficient output encoding, there is such an emphasis on input validation as a protection mechanism that the underlying causes are rarely described. Within CVE, the focus is primarily on well-understood issues like cross-site scripting and SQL injection. It is likely that this weakness frequently occurs in custom protocols that support multiple encodings, which are not necessarily detectable with automated techniques.\n\n\n\n### Observed Examples\n- **CVE-2021-41232:** Chain: authentication routine in Go-based agile development product does not escape user name (CWE-116), allowing LDAP injection (CWE-90)\n- **CVE-2008-4636:** OS command injection in backup software using shell metacharacters in a filename; correct behavior would require that this filename could not be changed.\n- **CVE-2008-0769:** Web application does not set the charset when sending a page to a browser, allowing for XSS exploitation when a browser chooses an unexpected encoding.\n\n\n\n\n## CWE-552: Files or Directories Accessible to External Parties\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product makes files or directories accessible to unauthorized actors, even though they should not be.\n\n### Extended Description\n\n\nWeb servers, FTP servers, and similar servers may store a set of files underneath a \"root\" directory that is accessible to the server's users. Applications may store sensitive files underneath this root without also using access control to limit which users may request those files, if any. Alternately, an application might package multiple files or directories into an archive file (e.g., ZIP or tar), but the application might not exclude sensitive files that are underneath those directories.\n\n\nIn cloud technologies and containers, this weakness might present itself in the form of misconfigured storage accounts that can be read or written by a public or anonymous user.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-668\nChildOf -> CWE-668\nChildOf -> CWE-285\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2005-1835:** Data file under web root.\n\n\n\n\n## CWE-862: Missing Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product does not perform an authorization check when an actor attempts to access a resource or perform an action.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n### Observed Examples\n- **CVE-2022-24730:** Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information\n- **CVE-2009-3168:** Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.\n- **CVE-2009-3597:** Web application stores database file under the web root with insufficient access control (CWE-219), allowing direct request.\n\n\n\n\n## CWE-863: Incorrect Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** \n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n\n### Observed Examples\n- **CVE-2021-39155:** Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.\n- **CVE-2019-15900:** Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).\n- **CVE-2009-2213:** Gateway uses default \"Allow\" configuration for its authorization settings.\n\n\n\n\n## CWE-286: Incorrect User Management\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product does not properly manage a user within its environment.\n\n### Extended Description\nUsers can be assigned to the wrong group (class) of permissions resulting in unintended access rights to sensitive objects.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Maintenance]** The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).\n\n**[Maintenance]** This item needs more work. Possible sub-categories include: user in wrong group, and user with insecure profile or \"configuration\". It also might be better expressed as a category than a weakness.\n\n\n\n### Observed Examples\n- **CVE-2022-36109:** Containerization product does not record a user's supplementary group ID, allowing bypass of group restrictions.\n- **CVE-1999-1193:** Operating system assigns user to privileged wheel group, allowing the user to gain root privileges.\n\n\n\n\n## CWE-842: Placement of User into Incorrect Group\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product or the administrator places a user into an incorrect group.\n\n### Extended Description\nIf the incorrect group has more access or privileges than the intended group, the user might be able to bypass intended security policy to access unexpected resources or perform unexpected actions. The access-control system might not be able to detect malicious usage of this group membership.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-286\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-1999-1193:** Operating system assigns user to privileged wheel group, allowing the user to gain root privileges.\n- **CVE-2010-3716:** Chain: drafted web request allows the creation of users with arbitrary group membership.\n- **CVE-2008-5397:** Chain: improper processing of configuration options causes users to contain unintended group memberships.\n\n\n\n\n## CWE-328: Use of Weak Hash\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).\n\n### Extended Description\n\n\nA hash function is defined as an algorithm that maps arbitrarily sized data into a fixed-sized digest (output) such that the following properties hold:\n\n\n  1. The algorithm is not invertible (also called \"one-way\" or \"not reversible\")\n\n  1. The algorithm is deterministic; the same input produces the same digest every time\n\n Building on this definition, a cryptographic hash function must also ensure that a malicious actor cannot leverage the hash function to have a reasonable chance of success at determining any of the following:\n\n  1. the original input (preimage attack), given only the digest\n\n  1. another input that can produce the same digest (2nd preimage attack), given the original input\n\n  1. a set of two or more inputs that evaluate to the same digest (birthday attack), given the actor can arbitrarily choose the inputs to be hashed and can do so a reasonable amount of times\n\nWhat is regarded as \"reasonable\" varies by context and threat model, but in general, \"reasonable\" could cover any attack that is more efficient than brute force (i.e., on average, attempting half of all possible combinations). Note that some attacks might be more efficient than brute force but are still not regarded as achievable in the real world.\n\nAny algorithm that does not meet the above conditions will generally be considered weak for general use in hashing.\n\n\nIn addition to algorithmic weaknesses, a hash function can be made weak by using the hash in a security context that breaks its security guarantees. For example, using a hash function without a salt for storing passwords (that are sufficiently short) could enable an adversary to create a \"rainbow table\" [REF-637] to recover the password under certain conditions; this attack works against such hash functions as MD5, SHA-1, and SHA-2.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-326\nChildOf -> CWE-327\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** Since CWE 4.4, various cryptography-related entries including CWE-328 have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.\n\n\n\n### Observed Examples\n- **CVE-2022-30320:** Programmable Logic Controller (PLC) uses a protocol with a cryptographically insecure hashing algorithm for passwords.\n- **CVE-2005-4900:** SHA-1 algorithm is not collision-resistant.\n- **CVE-2020-25685:** DNS product uses a weak hash (CRC32 or SHA-1) of the query name, allowing attacker to forge responses by computing domain names with the same hash.\n\n\n\n\n## CWE-202: Exposure of Sensitive Information Through Data Queries\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nWhen trying to keep information confidential, an attacker can often infer some of the information by using statistics.\n\n### Extended Description\nIn situations where data should not be tied to individual users, but a large number of users should be able to make queries that \"scrub\" the identity of users, it may be possible to get information about a user -- e.g., by specifying search terms that are known to be unique to that user.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1230\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** \n\nThe relationship between CWE-202 and CWE-612 needs to be investigated more closely, as they may be different descriptions of the same kind of problem. CWE-202 is also being considered for deprecation, as it is not clearly described and may have been misunderstood by CWE users. It could be argued that this issue is better covered by CAPEC; an attacker can utilize their data-query privileges to perform this kind of operation, and if the attacker should not be allowed to perform the operation - or if the sensitive data should not have been made accessible at all - then that is more appropriately classified as a separate CWE related to authorization (see the parent, CWE-1230).\n\n\n\n\n### Observed Examples\n- **CVE-2022-41935:** Wiki product allows an adversary to discover filenames via a series of queries starting with one letter and then iteratively extending the match.\n\n\n\n\n## CWE-201: Insertion of Sensitive Information Into Sent Data\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-200\nCanAlsoBe -> CWE-209\nCanAlsoBe -> CWE-202\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure).\n\n\n\n### Observed Examples\n- **CVE-2022-0708:** Collaboration platform does not clear team emails in a response, allowing leak of email addresses\n\n"
  },
  "timestamp": "2025-03-30 15:54:20",
  "cve_id": "unknown",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "538",
      "name": "Insertion of Sensitive Information into Externally-Accessible File or Directory",
      "type": "Base",
      "score": 0.7812479619249368
    },
    {
      "cwe_id": "552",
      "name": "Files or Directories Accessible to External Parties",
      "type": "Base",
      "score": 0.7603920079370441
    },
    {
      "cwe_id": "212",
      "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
      "type": "Base",
      "score": 0.7585926989040355
    },
    {
      "cwe_id": "202",
      "name": "Exposure of Sensitive Information Through Data Queries",
      "type": "Base",
      "score": 0.7572090460495128
    },
    {
      "cwe_id": "668",
      "name": "Exposure of Resource to Wrong Sphere",
      "type": "Class",
      "score": 0.7559098856788855
    },
    {
      "cwe_id": "639",
      "name": "Authorization Bypass Through User-Controlled Key",
      "type": "Base",
      "score": 0.7530217103158001
    },
    {
      "cwe_id": "807",
      "name": "Reliance on Untrusted Inputs in a Security Decision",
      "type": "Base",
      "score": 0.7482208213952264
    },
    {
      "cwe_id": "74",
      "name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
      "type": "Class",
      "score": 0.7467332953495301
    },
    {
      "cwe_id": "41",
      "name": "Improper Resolution of Path Equivalence",
      "type": "Base",
      "score": 0.7447762687874626
    },
    {
      "cwe_id": "497",
      "name": "Exposure of Sensitive System Information to an Unauthorized Control Sphere",
      "type": "Base",
      "score": 0.7447176441542129
    }
  ]
}