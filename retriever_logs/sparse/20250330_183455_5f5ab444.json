{
  "retriever": "sparse",
  "query": "## Vulnerability Description\nWAVLINK WN572HP3, WN533A8, WN530H4, WN535G3, WN531P3 adm.cgi has no filtering on parameters ppp_username, ppp_passwd, rwan_gateway, rwan_mask and rwan_ip, which leads to **command injection** in page /wan.shtml.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **lack of parameter filtering**\n- **weakness:** **command injection**\n- **product:** WAVLINK WN572HP3 and WN533A8 and WN530H4 and WN535G3 and WN531P3\n- **component:** /wan.shtml\n\n## CVE Reference Links Content Summary\n```\n{\n  \"vulnerability_1\": {\n    \"page\": \"/wizard_router_mesh.shtml\",\n    \"cgi_program\": \"adm.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `adm.cgi` program, specifically on parameters: `web_pskValue`, `wl_Method`, `wlan_ssid`, `EncrypType`, `rwan_ip`, `rwan_mask`, `rwan_gateway`, `ppp_username`, `ppp_passwd` and `ppp_setver`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/adm.cgi` with malicious input in the vulnerable parameters when configuring 'Router Mode' via the `/wizard_router_mesh.shtml` page.\",\n   \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_2\": {\n    \"page\": \"/ledonoff.shtml\",\n    \"cgi_program\": \"adm.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `adm.cgi` program, specifically on the `led_switch` parameter.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/adm.cgi` with malicious input in the `led_switch` parameter when switching LED via the `/ledonoff.shtml` page.\",\n    \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_3\": {\n    \"page\": \"/wan.shtml\",\n    \"cgi_program\": \"adm.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `adm.cgi` program, specifically on parameters: `ppp_username`, `ppp_passwd`, `rwan_gateway`, `rwan_mask` and `rwan_ip`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n   \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/adm.cgi` with malicious input in the vulnerable parameters when setting 'WAN' via the `/wan.shtml` page.\",\n   \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n   \"vulnerability_4\": {\n    \"page\": \"/wizard_rep.shtml\",\n    \"cgi_program\": \"adm.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `adm.cgi` program, specifically on parameters: `wlan_signal`, `web_pskValue`, `sel_EncrypTyp`, `sel_Automode`, `wlan_bssid`, `wlan_ssid` and `wlan_channel`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/adm.cgi` with malicious input in the vulnerable parameters when setting 'Repeater Mode' via the `/wizard_rep.shtml` page.\",\n    \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_5\": {\n    \"page\": \"/ledonoff.shtml\",\n    \"cgi_program\": \"api.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `api.cgi` program, specifically on the hidden parameter `ufconf`.\",\n     \"weaknesses\": [\n      \"Command Injection\"\n    ],\n   \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/api.cgi` with malicious input in the `ufconf` parameter when switching LED via the `/ledonoff.shtml` page. The URL needs to be manually modified from `/cgi-bin/adm.cgi` to `/cgi-bin/api.cgi`.\",\n   \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n   \"vulnerability_6\": {\n    \"page\": \"/cli_black_list.shtml\",\n    \"cgi_program\": \"firewall.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `firewall.cgi` program, specifically on parameter `add_mac`.\",\n     \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/firewall.cgi` with malicious input in the `add_mac` parameter when adding WIFI blacklist via the `/cli_black_list.shtml` page.\",\n   \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_7\": {\n    \"page\": \"/cli_black_list.shtml\",\n    \"cgi_program\": \"firewall.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `firewall.cgi` program, specifically on parameters `del_mac` and `flag`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n   \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/firewall.cgi` with malicious input in the `del_mac` and `flag` parameters when deleting WIFI blacklist via the `/cli_black_list.shtml` page.\",\n    \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n   \"vulnerability_8\": {\n    \"page\": \"/man_security.shtml\",\n    \"cgi_program\": \"firewall.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `firewall.cgi` program, specifically on parameters: `remoteManagementEnabled`, `blockPortScanEnabled`, `pingFrmWANFilterEnabled` and `blockSynFloodEnabled`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/firewall.cgi` with malicious input in the vulnerable parameters when setting system firewall via the `/man_security.shtml` page.\",\n    \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_9\": {\n    \"page\": \"/login.shtml\",\n    \"cgi_program\": \"login.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `login.cgi` program, specifically on the `key` parameter.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/login.cgi` with malicious input in the `key` parameter when logging in via the `/login.shtml` page.\",\n     \"required_capabilities\": \"No authentication needed since it occurs on the login page.\"\n  },\n  \"vulnerability_10\": {\n    \"page\": \"/nas_disk.shtml\",\n    \"cgi_program\": \"nas.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `nas.cgi` program, specifically on parameters: `User1Passwd` and `User1`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n     \"impact\": \"Arbitrary command execution on the router's operating system.\",\n     \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/nas.cgi` with malicious input in the vulnerable parameters via the `/nas_disk.shtml` page.\",\n   \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n    \"vulnerability_11\": {\n    \"page\": \"/qos.shtml\",\n    \"cgi_program\": \"qos.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `qos.cgi` program, specifically on hidden parameters `cli_list` and `cli_num`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/qos.cgi` with malicious input in the hidden parameters `cli_list` and `cli_num` via the `/qos.shtml` page. The parameters need to be manually added to the POST request.\",\n     \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_12\": {\n    \"page\": \"/qos.shtml\",\n    \"cgi_program\": \"qos.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `qos.cgi` program, specifically on parameters `qos_bandwith` and `qos_dat`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/qos.cgi` with malicious input in the `qos_bandwith` and `qos_dat` parameters via the `/qos.shtml` page.\",\n   \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_13\": {\n    \"page\": \"/wifi_multi_ssid.shtml\",\n    \"cgi_program\": \"wireless.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `wireless.cgi` program, specifically on parameters `hiddenSSID32g` and `SSID2G2`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n   \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/wireless.cgi` with malicious input in the vulnerable parameters when setting WIFI SSID to extend via the `/wifi_multi_ssid.shtml` page.\",\n     \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n   \"vulnerability_14\": {\n    \"page\": \"/wifi_mesh.shtml\",\n    \"cgi_program\": \"wireless.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `wireless.cgi` program, specifically on hidden parameters `mac_5g` and `Newname`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/wireless.cgi` with malicious input in the hidden parameters `mac_5g` and `Newname` via the `/wifi_mesh.shtml` page. The parameters need to be manually added to the POST request.\",\n     \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_15\": {\n    \"page\": \"/wifi_mesh.shtml\",\n    \"cgi_program\": \"wireless.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `wireless.cgi` program, specifically on the parameter `macAddr`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/wireless.cgi` with malicious input in the `macAddr` parameter when adding the extender via the `/wifi_mesh.shtml` page.\",\n    \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_16\": {\n    \"page\": \"/wifi_mesh.shtml\",\n    \"cgi_program\": \"wireless.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `wireless.cgi` program, specifically on parameters: `delete_list`, `delete_al_mac`, `b_delete_list` and `b_delete_al_mac`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/wireless.cgi` with malicious input in the vulnerable parameters when clicking buttons on the `/wifi_mesh.shtml` page.\",\n     \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  }\n}\n```\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 77 | Improper Neutralization of Special Elements used in a Command ('Command Injection') | Class | Allowed-with-Review | alternate_terms | 1.000 |\n| 2 | 78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | Base | Allowed | alternate_terms | 0.700 |\n| 3 | 790 | Improper Filtering of Special Elements | Class | Allowed-with-Review | sparse | 0.635 |\n| 4 | 425 | Direct Request ('Forced Browsing') | Base | Allowed | sparse | 0.139 |\n| 5 | 791 | Incomplete Filtering of Special Elements | Base | Allowed | sparse | 0.129 |\n| 6 | 259 | Use of Hard-coded Password | Variant | Allowed | dense | 0.537 |\n| 7 | 471 | Modification of Assumed-Immutable Data (MAID) | Base | Allowed | graph | 0.002 |\n| 8 | 434 | Unrestricted Upload of File with Dangerous Type | Base | Allowed | sparse | 0.127 |\n| 9 | 89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | Base | Allowed | sparse | 0.125 |\n| 10 | 96 | Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') | Base | Allowed | sparse | 0.120 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\n### Extended Description\n\n\nMany protocols and products have their own custom command language. While OS or shell command strings are frequently discovered and targeted, developers may not realize that these other command languages might also be vulnerable to attacks.\n\n\n### Alternative Terms\nCommand injection: an attack-oriented phrase for this weakness. Note: often used when \"OS command injection\" (CWE-78) was intended.\n\n### Relationships\nChildOf -> CWE-74\nChildOf -> CWE-74\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** CWE-77 is often misused when OS command injection (CWE-78) was intended instead [REF-1287].\n**Comments:** Ensure that the analysis focuses on the root-cause error that allows the execution of commands, as there are many weaknesses that can lead to this consequence. See Terminology Notes. If the weakness involves a command language besides OS shell invocation, then CWE-77 could be used.\n**Reasons:**\n- Frequent Misuse\n**Suggested Alternatives:**\n- CWE-78: OS Command Injection\n\n\n### Additional Notes\n**[Terminology]** \n\nThe \"command injection\" phrase carries different meanings, either as an attack or as a technical impact. The most common usage of \"command injection\" refers to the more-accurate OS command injection (CWE-78), but there are many command languages.\n\n\nIn vulnerability-focused analysis, the phrase may refer to any situation in which the adversary can execute commands of their own choosing, i.e., the focus is on the risk and/or technical impact of exploitation. Many proof-of-concept exploits focus on the ability to execute commands and may emphasize \"command injection.\" However, there are dozens of weaknesses that can allow execution of commands. That is, the ability to execute commands could be resultant from another weakness.\n\n\nTo some, \"command injection\" can include cases in which the functionality intentionally allows the user to specify an entire command, which is then executed. In this case, the root cause weakness might be related to missing or incorrect authorization, since an adversary should not be able to specify arbitrary commands, but some users or admins are allowed.\n\n\nCWE-77 and its descendants are specifically focused on behaviors in which the product is intentionally building a command to execute, and the adversary can inject separators into the command or otherwise change the command being executed.\n\n\n**[Other]** \n\nCommand injection is a common problem with wrapper programs.\n\n\n\n\n### Observed Examples\n- **CVE-2022-1509:** injection of sed script syntax (\"sed injection\")\n- **CVE-2024-5184:** API service using a large generative AI model allows direct prompt injection to leak hard-coded system prompts or execute other prompts.\n- **CVE-2020-11698:** anti-spam product allows injection of SNMP commands into confiuration file\n\n\n\n\n## CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\n### Extended Description\n\n\nThis weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.\n\n\nThere are at least two subtypes of OS command injection:\n\n\n  - The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(\"nslookup [HOSTNAME]\") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.\n\n  - The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use \"exec([COMMAND])\" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line.\n\nFrom a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.\n\n### Alternative Terms\nShell injection\nShell metacharacters\nOS Command Injection\n\n### Relationships\nChildOf -> CWE-77\nChildOf -> CWE-74\nChildOf -> CWE-77\nChildOf -> CWE-77\nCanAlsoBe -> CWE-88\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Terminology]** The \"OS command injection\" phrase carries different meanings to different people. For some people, it only refers to cases in which the attacker injects command separators into arguments for an application-controlled program that is being invoked. For some people, it refers to any type of attack that can allow the attacker to execute OS commands of their own choosing. This usage could include untrusted search path weaknesses (CWE-426) that cause the application to find and execute an attacker-controlled program. Further complicating the issue is the case when argument injection (CWE-88) allows alternate command-line switches or options to be inserted into the command line, such as an \"-exec\" switch whose purpose may be to execute the subsequent argument as a command (this -exec switch exists in the UNIX \"find\" command, for example). In this latter case, however, CWE-88 could be regarded as the primary weakness in a chain with CWE-78.\n\n**[Research Gap]** More investigation is needed into the distinction between the OS command injection variants, including the role with argument injection (CWE-88). Equivalent distinctions may exist in other injection-related problems such as SQL injection.\n\n\n\n### Observed Examples\n- **CVE-2020-10987:** OS command injection in Wi-Fi router, as exploited in the wild per CISA KEV.\n- **CVE-2020-10221:** Template functionality in network configuration management tool allows OS command injection, as exploited in the wild per CISA KEV.\n- **CVE-2020-9054:** Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.\n\n\n\n\n## CWE-790: Improper Filtering of Special Elements\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-138\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n\n\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n### Extended Description\nWeb applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.\n\n### Alternative Terms\nforced browsing: The \"forced browsing\" term could be misinterpreted to include weaknesses such as CSRF or XSS, so its use is discouraged.\n\n### Relationships\nChildOf -> CWE-862\nChildOf -> CWE-862\nChildOf -> CWE-288\nChildOf -> CWE-424\nCanPrecede -> CWE-471\nCanPrecede -> CWE-98\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Overlaps Modification of Assumed-Immutable Data (MAID), authorization errors, container errors; often primary to other weaknesses such as XSS and SQL injection.\n\n**[Theoretical]** \"Forced browsing\" is a step-based manipulation involving the omission of one or more steps, whose order is assumed to be immutable. The application does not verify that the first step was performed successfully before the second step. The consequence is typically \"authentication bypass\" or \"path disclosure,\" although it can be primary to all kinds of weaknesses, especially in languages such as PHP, which allow external modification of assumed-immutable variables.\n\n\n\n### Observed Examples\n- **CVE-2022-29238:** Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.\n- **CVE-2022-23607:** Python-based HTTP library did not scope cookies to a particular domain such that \"supercookies\" could be sent to any domain on redirect.\n- **CVE-2004-2144:** Bypass authentication via direct request.\n\n\n\n\n## CWE-791: Incomplete Filtering of Special Elements\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-790\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n\n\n\n## CWE-259: Use of Hard-coded Password\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.\n\n### Extended Description\n\n\nA hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:\n\n```\n\t\tInbound: the product contains an authentication mechanism that checks for a hard-coded password.\n\t\tOutbound: the product connects to another system or component, and it contains hard-coded password for connecting to that component.\n```\nIn the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the product will have the same password, even across different organizations, this enables massive attacks such as worms to take place.\n\nThe Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-798\nChildOf -> CWE-798\nChildOf -> CWE-798\nPeerOf -> CWE-321\nPeerOf -> CWE-257\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** This entry could be split into multiple variants: an inbound variant (as seen in the second demonstrative example) and an outbound variant (as seen in the first demonstrative example). These variants are likely to have different consequences, detectability, etc. More importantly, from a vulnerability theory perspective, they could be characterized as different behaviors.\n\n\n\n### Observed Examples\n- **CVE-2022-29964:** Distributed Control System (DCS) has hard-coded passwords for local shell access\n- **CVE-2021-37555:** Telnet service for IoT feeder for dogs and cats has hard-coded password [REF-1288]\n- **CVE-2021-35033:** Firmware for a WiFi router uses a hard-coded password for a BusyBox shell, allowing bypass of authentication through the UART port\n\n\n\n\n## CWE-471: Modification of Assumed-Immutable Data (MAID)\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not properly protect an assumed-immutable element from being modified by an attacker.\n\n### Extended Description\nThis occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-664\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** MAID issues can be primary to many other weaknesses, and they are a major factor in languages that provide easy access to internal program constructs, such as PHP's register_globals and similar features. However, MAID issues can also be resultant from weaknesses that modify internal state; for example, a program might validate some data and store it in memory, but a buffer overflow could overwrite that validated data, leading to a change in program logic.\n\n**[Theoretical]** There are many examples where the MUTABILITY property is a major factor in a vulnerability.\n\n\n\n### Observed Examples\n- **CVE-2002-1757:** Relies on $PHP_SELF variable for authentication.\n- **CVE-2005-1905:** Gain privileges by modifying assumed-immutable code addresses that are accessed by a driver.\n\n\n\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nUnrestricted File Upload: Used in vulnerability databases and elsewhere, but it is insufficiently precise. The phrase could be interpreted as the lack of restrictions on the size or number of uploaded files, which is a resource consumption issue.\n\n### Relationships\nChildOf -> CWE-669\nChildOf -> CWE-669\nPeerOf -> CWE-351\nPeerOf -> CWE-436\nPeerOf -> CWE-430\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** \n\nThis can have a chaining relationship with incomplete denylist / permissive allowlist errors when the product tries, but fails, to properly limit which types of files are allowed (CWE-183, CWE-184).\n\n\nThis can also overlap multiple interpretation errors for intermediaries, e.g. anti-virus products that do not remove or quarantine attachments with certain file extensions that can be processed by client systems.\n\n\n\n\n### Observed Examples\n- **CVE-2023-5227:** PHP-based FAQ management app does not check the MIME type for uploaded images\n- **CVE-2001-0901:** Web-based mail product stores \".shtml\" attachments that could contain SSI\n- **CVE-2002-1841:** PHP upload does not restrict file types\n\n\n\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nSQL injection: a common attack-oriented phrase\nSQLi: a common abbreviation for \"SQL injection\"\n\n### Relationships\nChildOf -> CWE-943\nChildOf -> CWE-74\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** SQL injection can be resultant from special character mismanagement, MAID, or denylist/allowlist problems. It can be primary to authentication errors.\n\n\n\n### Observed Examples\n- **CVE-2023-32530:** SQL injection in security product dashboard using crafted certificate fields\n- **CVE-2021-42258:** SQL injection in time and billing software, as exploited in the wild per CISA KEV.\n- **CVE-2021-27101:** SQL injection in file-transfer system via a crafted Host header, as exploited in the wild per CISA KEV.\n\n\n\n\n## CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-94\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** \"HTML injection\" (see CWE-79: XSS) could be thought of as an example of this, but the code is injected and executed on the client side, not the server side. Server-Side Includes (SSI) are an example of direct static code injection.\n\n\n\n### Observed Examples\n- **CVE-2002-0495:** Perl code directly injected into CGI library file from parameters to another CGI program.\n- **CVE-2005-1876:** Direct PHP code injection into supporting template file.\n- **CVE-2005-1894:** Direct code injection into PHP script that can be accessed by attacker.\n\n",
  "keyphrases": {
    "base_query": "## Vulnerability Description\nWAVLINK WN572HP3, WN533A8, WN530H4, WN535G3, WN531P3 adm.cgi has no filtering on parameters ppp_username, ppp_passwd, rwan_gateway, rwan_mask and rwan_ip, which leads to **command injection** in page /wan.shtml.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **lack of parameter filtering**\n- **weakness:** **command injection**\n- **product:** WAVLINK WN572HP3 and WN533A8 and WN530H4 and WN535G3 and WN531P3\n- **component:** /wan.shtml\n\n## CVE Reference Links Content Summary\n```\n{\n  \"vulnerability_1\": {\n    \"page\": \"/wizard_router_mesh.shtml\",\n    \"cgi_program\": \"adm.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `adm.cgi` program, specifically on parameters: `web_pskValue`, `wl_Method`, `wlan_ssid`, `EncrypType`, `rwan_ip`, `rwan_mask`, `rwan_gateway`, `ppp_username`, `ppp_passwd` and `ppp_setver`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/adm.cgi` with malicious input in the vulnerable parameters when configuring 'Router Mode' via the `/wizard_router_mesh.shtml` page.\",\n   \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_2\": {\n    \"page\": \"/ledonoff.shtml\",\n    \"cgi_program\": \"adm.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `adm.cgi` program, specifically on the `led_switch` parameter.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/adm.cgi` with malicious input in the `led_switch` parameter when switching LED via the `/ledonoff.shtml` page.\",\n    \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_3\": {\n    \"page\": \"/wan.shtml\",\n    \"cgi_program\": \"adm.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `adm.cgi` program, specifically on parameters: `ppp_username`, `ppp_passwd`, `rwan_gateway`, `rwan_mask` and `rwan_ip`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n   \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/adm.cgi` with malicious input in the vulnerable parameters when setting 'WAN' via the `/wan.shtml` page.\",\n   \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n   \"vulnerability_4\": {\n    \"page\": \"/wizard_rep.shtml\",\n    \"cgi_program\": \"adm.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `adm.cgi` program, specifically on parameters: `wlan_signal`, `web_pskValue`, `sel_EncrypTyp`, `sel_Automode`, `wlan_bssid`, `wlan_ssid` and `wlan_channel`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/adm.cgi` with malicious input in the vulnerable parameters when setting 'Repeater Mode' via the `/wizard_rep.shtml` page.\",\n    \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_5\": {\n    \"page\": \"/ledonoff.shtml\",\n    \"cgi_program\": \"api.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `api.cgi` program, specifically on the hidden parameter `ufconf`.\",\n     \"weaknesses\": [\n      \"Command Injection\"\n    ],\n   \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/api.cgi` with malicious input in the `ufconf` parameter when switching LED via the `/ledonoff.shtml` page. The URL needs to be manually modified from `/cgi-bin/adm.cgi` to `/cgi-bin/api.cgi`.\",\n   \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n   \"vulnerability_6\": {\n    \"page\": \"/cli_black_list.shtml\",\n    \"cgi_program\": \"firewall.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `firewall.cgi` program, specifically on parameter `add_mac`.\",\n     \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/firewall.cgi` with malicious input in the `add_mac` parameter when adding WIFI blacklist via the `/cli_black_list.shtml` page.\",\n   \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_7\": {\n    \"page\": \"/cli_black_list.shtml\",\n    \"cgi_program\": \"firewall.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `firewall.cgi` program, specifically on parameters `del_mac` and `flag`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n   \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/firewall.cgi` with malicious input in the `del_mac` and `flag` parameters when deleting WIFI blacklist via the `/cli_black_list.shtml` page.\",\n    \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n   \"vulnerability_8\": {\n    \"page\": \"/man_security.shtml\",\n    \"cgi_program\": \"firewall.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `firewall.cgi` program, specifically on parameters: `remoteManagementEnabled`, `blockPortScanEnabled`, `pingFrmWANFilterEnabled` and `blockSynFloodEnabled`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/firewall.cgi` with malicious input in the vulnerable parameters when setting system firewall via the `/man_security.shtml` page.\",\n    \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_9\": {\n    \"page\": \"/login.shtml\",\n    \"cgi_program\": \"login.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `login.cgi` program, specifically on the `key` parameter.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/login.cgi` with malicious input in the `key` parameter when logging in via the `/login.shtml` page.\",\n     \"required_capabilities\": \"No authentication needed since it occurs on the login page.\"\n  },\n  \"vulnerability_10\": {\n    \"page\": \"/nas_disk.shtml\",\n    \"cgi_program\": \"nas.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `nas.cgi` program, specifically on parameters: `User1Passwd` and `User1`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n     \"impact\": \"Arbitrary command execution on the router's operating system.\",\n     \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/nas.cgi` with malicious input in the vulnerable parameters via the `/nas_disk.shtml` page.\",\n   \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n    \"vulnerability_11\": {\n    \"page\": \"/qos.shtml\",\n    \"cgi_program\": \"qos.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `qos.cgi` program, specifically on hidden parameters `cli_list` and `cli_num`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/qos.cgi` with malicious input in the hidden parameters `cli_list` and `cli_num` via the `/qos.shtml` page. The parameters need to be manually added to the POST request.\",\n     \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_12\": {\n    \"page\": \"/qos.shtml\",\n    \"cgi_program\": \"qos.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `qos.cgi` program, specifically on parameters `qos_bandwith` and `qos_dat`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/qos.cgi` with malicious input in the `qos_bandwith` and `qos_dat` parameters via the `/qos.shtml` page.\",\n   \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_13\": {\n    \"page\": \"/wifi_multi_ssid.shtml\",\n    \"cgi_program\": \"wireless.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `wireless.cgi` program, specifically on parameters `hiddenSSID32g` and `SSID2G2`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n   \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/wireless.cgi` with malicious input in the vulnerable parameters when setting WIFI SSID to extend via the `/wifi_multi_ssid.shtml` page.\",\n     \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n   \"vulnerability_14\": {\n    \"page\": \"/wifi_mesh.shtml\",\n    \"cgi_program\": \"wireless.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `wireless.cgi` program, specifically on hidden parameters `mac_5g` and `Newname`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/wireless.cgi` with malicious input in the hidden parameters `mac_5g` and `Newname` via the `/wifi_mesh.shtml` page. The parameters need to be manually added to the POST request.\",\n     \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_15\": {\n    \"page\": \"/wifi_mesh.shtml\",\n    \"cgi_program\": \"wireless.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `wireless.cgi` program, specifically on the parameter `macAddr`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/wireless.cgi` with malicious input in the `macAddr` parameter when adding the extender via the `/wifi_mesh.shtml` page.\",\n    \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  },\n  \"vulnerability_16\": {\n    \"page\": \"/wifi_mesh.shtml\",\n    \"cgi_program\": \"wireless.cgi\",\n    \"root_cause\": \"Lack of input sanitization in the `wireless.cgi` program, specifically on parameters: `delete_list`, `delete_al_mac`, `b_delete_list` and `b_delete_al_mac`.\",\n    \"weaknesses\": [\n      \"Command Injection\"\n    ],\n    \"impact\": \"Arbitrary command execution on the router's operating system.\",\n    \"attack_vector\": \"By sending a crafted POST request to `/cgi-bin/wireless.cgi` with malicious input in the vulnerable parameters when clicking buttons on the `/wifi_mesh.shtml` page.\",\n     \"required_capabilities\": \"Attacker needs to be authenticated to the router's web interface.\"\n  }\n}\n```\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 77 | Improper Neutralization of Special Elements used in a Command ('Command Injection') | Class | Allowed-with-Review | alternate_terms | 1.000 |\n| 2 | 78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | Base | Allowed | alternate_terms | 0.700 |\n| 3 | 790 | Improper Filtering of Special Elements | Class | Allowed-with-Review | sparse | 0.635 |\n| 4 | 425 | Direct Request ('Forced Browsing') | Base | Allowed | sparse | 0.139 |\n| 5 | 791 | Incomplete Filtering of Special Elements | Base | Allowed | sparse | 0.129 |\n| 6 | 259 | Use of Hard-coded Password | Variant | Allowed | dense | 0.537 |\n| 7 | 471 | Modification of Assumed-Immutable Data (MAID) | Base | Allowed | graph | 0.002 |\n| 8 | 434 | Unrestricted Upload of File with Dangerous Type | Base | Allowed | sparse | 0.127 |\n| 9 | 89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | Base | Allowed | sparse | 0.125 |\n| 10 | 96 | Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') | Base | Allowed | sparse | 0.120 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\n### Extended Description\n\n\nMany protocols and products have their own custom command language. While OS or shell command strings are frequently discovered and targeted, developers may not realize that these other command languages might also be vulnerable to attacks.\n\n\n### Alternative Terms\nCommand injection: an attack-oriented phrase for this weakness. Note: often used when \"OS command injection\" (CWE-78) was intended.\n\n### Relationships\nChildOf -> CWE-74\nChildOf -> CWE-74\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** CWE-77 is often misused when OS command injection (CWE-78) was intended instead [REF-1287].\n**Comments:** Ensure that the analysis focuses on the root-cause error that allows the execution of commands, as there are many weaknesses that can lead to this consequence. See Terminology Notes. If the weakness involves a command language besides OS shell invocation, then CWE-77 could be used.\n**Reasons:**\n- Frequent Misuse\n**Suggested Alternatives:**\n- CWE-78: OS Command Injection\n\n\n### Additional Notes\n**[Terminology]** \n\nThe \"command injection\" phrase carries different meanings, either as an attack or as a technical impact. The most common usage of \"command injection\" refers to the more-accurate OS command injection (CWE-78), but there are many command languages.\n\n\nIn vulnerability-focused analysis, the phrase may refer to any situation in which the adversary can execute commands of their own choosing, i.e., the focus is on the risk and/or technical impact of exploitation. Many proof-of-concept exploits focus on the ability to execute commands and may emphasize \"command injection.\" However, there are dozens of weaknesses that can allow execution of commands. That is, the ability to execute commands could be resultant from another weakness.\n\n\nTo some, \"command injection\" can include cases in which the functionality intentionally allows the user to specify an entire command, which is then executed. In this case, the root cause weakness might be related to missing or incorrect authorization, since an adversary should not be able to specify arbitrary commands, but some users or admins are allowed.\n\n\nCWE-77 and its descendants are specifically focused on behaviors in which the product is intentionally building a command to execute, and the adversary can inject separators into the command or otherwise change the command being executed.\n\n\n**[Other]** \n\nCommand injection is a common problem with wrapper programs.\n\n\n\n\n### Observed Examples\n- **CVE-2022-1509:** injection of sed script syntax (\"sed injection\")\n- **CVE-2024-5184:** API service using a large generative AI model allows direct prompt injection to leak hard-coded system prompts or execute other prompts.\n- **CVE-2020-11698:** anti-spam product allows injection of SNMP commands into confiuration file\n\n\n\n\n## CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\n### Extended Description\n\n\nThis weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.\n\n\nThere are at least two subtypes of OS command injection:\n\n\n  - The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(\"nslookup [HOSTNAME]\") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.\n\n  - The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use \"exec([COMMAND])\" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line.\n\nFrom a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.\n\n### Alternative Terms\nShell injection\nShell metacharacters\nOS Command Injection\n\n### Relationships\nChildOf -> CWE-77\nChildOf -> CWE-74\nChildOf -> CWE-77\nChildOf -> CWE-77\nCanAlsoBe -> CWE-88\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Terminology]** The \"OS command injection\" phrase carries different meanings to different people. For some people, it only refers to cases in which the attacker injects command separators into arguments for an application-controlled program that is being invoked. For some people, it refers to any type of attack that can allow the attacker to execute OS commands of their own choosing. This usage could include untrusted search path weaknesses (CWE-426) that cause the application to find and execute an attacker-controlled program. Further complicating the issue is the case when argument injection (CWE-88) allows alternate command-line switches or options to be inserted into the command line, such as an \"-exec\" switch whose purpose may be to execute the subsequent argument as a command (this -exec switch exists in the UNIX \"find\" command, for example). In this latter case, however, CWE-88 could be regarded as the primary weakness in a chain with CWE-78.\n\n**[Research Gap]** More investigation is needed into the distinction between the OS command injection variants, including the role with argument injection (CWE-88). Equivalent distinctions may exist in other injection-related problems such as SQL injection.\n\n\n\n### Observed Examples\n- **CVE-2020-10987:** OS command injection in Wi-Fi router, as exploited in the wild per CISA KEV.\n- **CVE-2020-10221:** Template functionality in network configuration management tool allows OS command injection, as exploited in the wild per CISA KEV.\n- **CVE-2020-9054:** Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.\n\n\n\n\n## CWE-790: Improper Filtering of Special Elements\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-138\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n\n\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n### Extended Description\nWeb applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.\n\n### Alternative Terms\nforced browsing: The \"forced browsing\" term could be misinterpreted to include weaknesses such as CSRF or XSS, so its use is discouraged.\n\n### Relationships\nChildOf -> CWE-862\nChildOf -> CWE-862\nChildOf -> CWE-288\nChildOf -> CWE-424\nCanPrecede -> CWE-471\nCanPrecede -> CWE-98\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Overlaps Modification of Assumed-Immutable Data (MAID), authorization errors, container errors; often primary to other weaknesses such as XSS and SQL injection.\n\n**[Theoretical]** \"Forced browsing\" is a step-based manipulation involving the omission of one or more steps, whose order is assumed to be immutable. The application does not verify that the first step was performed successfully before the second step. The consequence is typically \"authentication bypass\" or \"path disclosure,\" although it can be primary to all kinds of weaknesses, especially in languages such as PHP, which allow external modification of assumed-immutable variables.\n\n\n\n### Observed Examples\n- **CVE-2022-29238:** Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.\n- **CVE-2022-23607:** Python-based HTTP library did not scope cookies to a particular domain such that \"supercookies\" could be sent to any domain on redirect.\n- **CVE-2004-2144:** Bypass authentication via direct request.\n\n\n\n\n## CWE-791: Incomplete Filtering of Special Elements\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-790\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n\n\n\n## CWE-259: Use of Hard-coded Password\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.\n\n### Extended Description\n\n\nA hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:\n\n```\n\t\tInbound: the product contains an authentication mechanism that checks for a hard-coded password.\n\t\tOutbound: the product connects to another system or component, and it contains hard-coded password for connecting to that component.\n```\nIn the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the product will have the same password, even across different organizations, this enables massive attacks such as worms to take place.\n\nThe Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-798\nChildOf -> CWE-798\nChildOf -> CWE-798\nPeerOf -> CWE-321\nPeerOf -> CWE-257\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** This entry could be split into multiple variants: an inbound variant (as seen in the second demonstrative example) and an outbound variant (as seen in the first demonstrative example). These variants are likely to have different consequences, detectability, etc. More importantly, from a vulnerability theory perspective, they could be characterized as different behaviors.\n\n\n\n### Observed Examples\n- **CVE-2022-29964:** Distributed Control System (DCS) has hard-coded passwords for local shell access\n- **CVE-2021-37555:** Telnet service for IoT feeder for dogs and cats has hard-coded password [REF-1288]\n- **CVE-2021-35033:** Firmware for a WiFi router uses a hard-coded password for a BusyBox shell, allowing bypass of authentication through the UART port\n\n\n\n\n## CWE-471: Modification of Assumed-Immutable Data (MAID)\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not properly protect an assumed-immutable element from being modified by an attacker.\n\n### Extended Description\nThis occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-664\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** MAID issues can be primary to many other weaknesses, and they are a major factor in languages that provide easy access to internal program constructs, such as PHP's register_globals and similar features. However, MAID issues can also be resultant from weaknesses that modify internal state; for example, a program might validate some data and store it in memory, but a buffer overflow could overwrite that validated data, leading to a change in program logic.\n\n**[Theoretical]** There are many examples where the MUTABILITY property is a major factor in a vulnerability.\n\n\n\n### Observed Examples\n- **CVE-2002-1757:** Relies on $PHP_SELF variable for authentication.\n- **CVE-2005-1905:** Gain privileges by modifying assumed-immutable code addresses that are accessed by a driver.\n\n\n\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nUnrestricted File Upload: Used in vulnerability databases and elsewhere, but it is insufficiently precise. The phrase could be interpreted as the lack of restrictions on the size or number of uploaded files, which is a resource consumption issue.\n\n### Relationships\nChildOf -> CWE-669\nChildOf -> CWE-669\nPeerOf -> CWE-351\nPeerOf -> CWE-436\nPeerOf -> CWE-430\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** \n\nThis can have a chaining relationship with incomplete denylist / permissive allowlist errors when the product tries, but fails, to properly limit which types of files are allowed (CWE-183, CWE-184).\n\n\nThis can also overlap multiple interpretation errors for intermediaries, e.g. anti-virus products that do not remove or quarantine attachments with certain file extensions that can be processed by client systems.\n\n\n\n\n### Observed Examples\n- **CVE-2023-5227:** PHP-based FAQ management app does not check the MIME type for uploaded images\n- **CVE-2001-0901:** Web-based mail product stores \".shtml\" attachments that could contain SSI\n- **CVE-2002-1841:** PHP upload does not restrict file types\n\n\n\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nSQL injection: a common attack-oriented phrase\nSQLi: a common abbreviation for \"SQL injection\"\n\n### Relationships\nChildOf -> CWE-943\nChildOf -> CWE-74\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** SQL injection can be resultant from special character mismanagement, MAID, or denylist/allowlist problems. It can be primary to authentication errors.\n\n\n\n### Observed Examples\n- **CVE-2023-32530:** SQL injection in security product dashboard using crafted certificate fields\n- **CVE-2021-42258:** SQL injection in time and billing software, as exploited in the wild per CISA KEV.\n- **CVE-2021-27101:** SQL injection in file-transfer system via a crafted Host header, as exploited in the wild per CISA KEV.\n\n\n\n\n## CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-94\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** \"HTML injection\" (see CWE-79: XSS) could be thought of as an example of this, but the code is injected and executed on the client side, not the server side. Server-Side Includes (SSI) are an example of direct static code injection.\n\n\n\n### Observed Examples\n- **CVE-2002-0495:** Perl code directly injected into CGI library file from parameters to another CGI program.\n- **CVE-2005-1876:** Direct PHP code injection into supporting template file.\n- **CVE-2005-1894:** Direct code injection into PHP script that can be accessed by attacker.\n\n"
  },
  "timestamp": "2025-03-30 18:34:55",
  "cve_id": "unknown",
  "result_count": 5,
  "results": [
    {
      "cwe_id": "790",
      "name": "Improper Filtering of Special Elements",
      "score": 8785.564991459609,
      "search_source": "unknown"
    },
    {
      "cwe_id": "78",
      "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "score": 8074.516842497411,
      "search_source": "unknown"
    },
    {
      "cwe_id": "138",
      "name": "Improper Neutralization of Special Elements",
      "score": 7945.242602092657,
      "search_source": "unknown"
    },
    {
      "cwe_id": "94",
      "name": "Improper Control of Generation of Code ('Code Injection')",
      "score": 7605.1290664853805,
      "search_source": "unknown"
    },
    {
      "cwe_id": "88",
      "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
      "score": 7602.266704816194,
      "search_source": "unknown"
    }
  ]
}