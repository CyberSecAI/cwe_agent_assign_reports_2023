{
  "retriever": "sparse",
  "query": "## Vulnerability Description\nArq Backup 7.19.5.0 and below **stores backup encryption passwords using reversible encryption**. This issue allows attackers with administrative privileges to recover cleartext passwords.\n\n### Vulnerability Description Key Phrases\n- **weakness:** **stores backup encryption passwords using reversible encryption**\n- **impact:** recover cleartext passwords\n- **attacker:** attackers with administrative privileges\n- **product:** Arq Backup\n- **version:** 7.19.5.0 and below\n\n## CVE Reference Links Content Summary\nBased on the provided content, here's an analysis of CVE-2022-36617:\n\n**Root Cause of Vulnerability:**\n\nThe vulnerability stems from the way Arq Backup was storing the backup encryption password. Instead of storing only the encryption key derived from the user's password, it was storing the actual password itself in a reversibly encrypted format.\n\n**Weaknesses/Vulnerabilities Present:**\n\n*   **Insecure Storage of Sensitive Data:** The primary weakness is the storage of the user's backup encryption password in a reversibly encrypted form, making it susceptible to theft.\n*   **Reversible Encryption:**  The use of reversible encryption for sensitive passwords is a vulnerability, as it allows for relatively easy decryption compared to irreversible hashing techniques.\n\n**Impact of Exploitation:**\n\n*   **Data Breach:** An attacker with administrative privileges on a compromised system could steal the stored encryption password, allowing them to decrypt and access the user's backed-up data.\n*   **Wider Access:** Since users often reuse passwords, a compromised backup encryption password could grant an attacker access to other systems and services beyond the scope of the Arq Backup application.\n\n**Attack Vectors:**\n\n*   **Local Malware:** The primary attack vector is malware running locally with administrative privileges on the victim's machine.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Administrative Privileges:** The attacker must have administrative privileges (e.g., root) on the target system to access the reversibly encrypted password.\n*   **Local Access:** The attack is based on local system access; it is not a remote attack.\n\n**Additional Notes:**\n\n*   The vendor, Arq Backup, has addressed this vulnerability by storing only the derived encryption key instead of the password itself.\n*   The vulnerability was identified by Sam Haskins and responsibly disclosed to the vendor.\n*   The patch for the vulnerability was released in Arq Backup version 7.19.10.0 for Windows and 7.19.3 for macOS.\n*   The report also highlights that storing other secrets, like OAuth refresh tokens, in a reversibly encrypted way is not problematic due to their non-reused nature.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 311 | Missing Encryption of Sensitive Data | Class | Discouraged | sparse | 0.228 |\n| 2 | 312 | Cleartext Storage of Sensitive Information | Base | Allowed | sparse | 0.223 |\n| 3 | 522 | Insufficiently Protected Credentials | Class | Allowed-with-Review | sparse | 0.220 |\n| 4 | 256 | Plaintext Storage of a Password | Base | Allowed | sparse | 0.197 |\n| 5 | 798 | Use of Hard-coded Credentials | Base | Allowed | sparse | 0.182 |\n| 6 | 257 | Storing Passwords in a Recoverable Format | Base | Allowed | dense | 0.519 |\n| 7 | 523 | Unprotected Transport of Credentials | Base | Allowed | graph | 0.002 |\n| 8 | 328 | Use of Weak Hash | Base | Allowed | sparse | 0.182 |\n| 9 | 319 | Cleartext Transmission of Sensitive Information | Base | Allowed | sparse | 0.178 |\n| 10 | 321 | Use of Hard-coded Cryptographic Key | Variant | Allowed | sparse | 0.173 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-311: Missing Encryption of Sensitive Data\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not encrypt sensitive or critical information before storage or transmission.\n\n### Extended Description\nThe lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-311 is high-level with more precise children available. It is a level-1 Class (i.e., a child of a Pillar).\n**Comments:** Consider children CWE-312: Cleartext Storage of Sensitive Information or CWE-319: Cleartext Transmission of Sensitive Information.\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Relationship]** There is an overlapping relationship between insecure storage of sensitive information (CWE-922) and missing encryption of sensitive information (CWE-311). Encryption is often used to prevent an attacker from reading the sensitive data. However, encryption does not prevent the attacker from erasing or overwriting the data.\n\n\n\n### Observed Examples\n- **CVE-2009-2272:** password and username stored in cleartext in a cookie\n- **CVE-2009-1466:** password stored in cleartext in a file with insecure permissions\n- **CVE-2009-0152:** chat program disables SSL in some circumstances even when the user says to use SSL.\n\n\n\n\n## CWE-312: Cleartext Storage of Sensitive Information\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.\n\n### Extended Description\n\n\nBecause the information is stored in cleartext (i.e., unencrypted), attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.\n\n\nWhen organizations adopt cloud services, it can be easier for attackers to access the data from anywhere on the Internet.\n\n\nIn some systems/environments such as cloud, the use of \"double encryption\" (at both the software and hardware layer) might be required, and the developer might be solely responsible for both layers, instead of shared responsibility with the administrator of the broader system/environment.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-311\nChildOf -> CWE-311\nChildOf -> CWE-922\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Terminology]** Different people use \"cleartext\" and \"plaintext\" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding).\n\n\n\n### Observed Examples\n- **CVE-2022-30275:** Remote Terminal Unit (RTU) uses a driver that relies on a password stored in plaintext.\n- **CVE-2009-2272:** password and username stored in cleartext in a cookie\n- **CVE-2009-1466:** password stored in cleartext in a file with insecure permissions\n\n\n\n\n## CWE-522: Insufficiently Protected Credentials\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1390\nChildOf -> CWE-287\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2022-30018:** A messaging platform serializes all elements of User/Group objects, making private information available to adversaries\n- **CVE-2022-29959:** Initialization file contains credentials that can be decoded using a \"simple string transformation\"\n- **CVE-2022-35411:** Python-based RPC framework enables pickle functionality by default, allowing clients to unpickle untrusted data.\n\n\n\n\n## CWE-256: Plaintext Storage of a Password\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nStoring a password in plaintext may result in a system compromise.\n\n### Extended Description\nPassword management issues occur when a password is stored in plaintext in an application's properties, configuration file, or memory. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource. In some contexts, even storage of a plaintext password in memory is considered a security risk if the password is not cleared immediately after it is used.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-522\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-30275:** Remote Terminal Unit (RTU) uses a driver that relies on a password stored in plaintext.\n\n\n\n\n## CWE-798: Use of Hard-coded Credentials\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product contains hard-coded credentials, such as a password or cryptographic key.\n\n### Extended Description\n\n\nThere are two main variations:\n\n\n  - Inbound: the product contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials. In this variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. It can also be difficult for the administrator to detect.\n\n  - Outbound: the product connects to another system or component, and it contains hard-coded credentials for connecting to that component. This variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password that can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product.\n\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1391\nChildOf -> CWE-287\nChildOf -> CWE-344\nChildOf -> CWE-671\nPeerOf -> CWE-257\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-29953:** Condition Monitor firmware has a maintenance interface with hard-coded credentials\n- **CVE-2022-29960:** Engineering Workstation uses hard-coded cryptographic keys that could allow for unathorized filesystem access and privilege escalation\n- **CVE-2022-29964:** Distributed Control System (DCS) has hard-coded passwords for local shell access\n\n\n\n\n## CWE-257: Storing Passwords in a Recoverable Format\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-522\nPeerOf -> CWE-259\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** The meaning of this entry needs to be investigated more closely, especially with respect to what is meant by \"recoverable.\"\n\n\n\n### Observed Examples\n- **CVE-2022-30018:** A messaging platform serializes all elements of User/Group objects, making private information available to adversaries\n\n\n\n\n## CWE-523: Unprotected Transport of Credentials\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nLogin pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-522\nCanAlsoBe -> CWE-312\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n\n\n\n## CWE-328: Use of Weak Hash\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).\n\n### Extended Description\n\n\nA hash function is defined as an algorithm that maps arbitrarily sized data into a fixed-sized digest (output) such that the following properties hold:\n\n\n  1. The algorithm is not invertible (also called \"one-way\" or \"not reversible\")\n\n  1. The algorithm is deterministic; the same input produces the same digest every time\n\n Building on this definition, a cryptographic hash function must also ensure that a malicious actor cannot leverage the hash function to have a reasonable chance of success at determining any of the following:\n\n  1. the original input (preimage attack), given only the digest\n\n  1. another input that can produce the same digest (2nd preimage attack), given the original input\n\n  1. a set of two or more inputs that evaluate to the same digest (birthday attack), given the actor can arbitrarily choose the inputs to be hashed and can do so a reasonable amount of times\n\nWhat is regarded as \"reasonable\" varies by context and threat model, but in general, \"reasonable\" could cover any attack that is more efficient than brute force (i.e., on average, attempting half of all possible combinations). Note that some attacks might be more efficient than brute force but are still not regarded as achievable in the real world.\n\nAny algorithm that does not meet the above conditions will generally be considered weak for general use in hashing.\n\n\nIn addition to algorithmic weaknesses, a hash function can be made weak by using the hash in a security context that breaks its security guarantees. For example, using a hash function without a salt for storing passwords (that are sufficiently short) could enable an adversary to create a \"rainbow table\" [REF-637] to recover the password under certain conditions; this attack works against such hash functions as MD5, SHA-1, and SHA-2.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-326\nChildOf -> CWE-327\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** Since CWE 4.4, various cryptography-related entries including CWE-328 have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.\n\n\n\n### Observed Examples\n- **CVE-2022-30320:** Programmable Logic Controller (PLC) uses a protocol with a cryptographically insecure hashing algorithm for passwords.\n- **CVE-2005-4900:** SHA-1 algorithm is not collision-resistant.\n- **CVE-2020-25685:** DNS product uses a weak hash (CRC32 or SHA-1) of the query name, allowing attacker to forge responses by computing domain names with the same hash.\n\n\n\n\n## CWE-319: Cleartext Transmission of Sensitive Information\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\n\n### Extended Description\n\n\nMany communication channels can be \"sniffed\" (monitored) by adversaries during data transmission. For example, in networking, packets can traverse many intermediary nodes from the source to the destination, whether across the internet, an internal network, the cloud, etc. Some actors might have privileged access to a network interface or any link along the channel, such as a router, but they might not be authorized to collect the underlying data. As a result, network traffic could be sniffed by adversaries, spilling security-critical data.\n\n\nApplicable communication channels are not limited to software products. Applicable channels include hardware-specific technologies such as internal hardware networks and external debug channels, supporting remote JTAG debugging. When mitigations are not applied to combat adversaries within the product's threat model, this weakness significantly lowers the difficulty of exploitation by such adversaries.\n\n\nWhen full communications are recorded or logged, such as with a packet dump, an adversary could attempt to obtain the dump long after the transmission has occurred and try to \"sniff\" the cleartext from the recorded communications in the dump itself. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. \n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-311\nChildOf -> CWE-311\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-29519:** Programmable Logic Controller (PLC) sends sensitive information in plaintext, including passwords and session tokens.\n- **CVE-2022-30312:** Building Controller uses a protocol that transmits authentication credentials in plaintext.\n- **CVE-2022-31204:** Programmable Logic Controller (PLC) sends password in plaintext.\n\n\n\n\n## CWE-321: Use of Hard-coded Cryptographic Key\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-798\nChildOf -> CWE-798\nChildOf -> CWE-798\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** The main difference between the use of hard-coded passwords and the use of hard-coded cryptographic keys is the false sense of security that the former conveys. Many people believe that simply hashing a hard-coded password before storage will protect the information from malicious users. However, many hashes are reversible (or at least vulnerable to brute force attacks) -- and further, many authentication protocols simply request the hash itself, making it no better than a password.\n\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-29960:** Engineering Workstation uses hard-coded cryptographic keys that could allow for unathorized filesystem access and privilege escalation\n- **CVE-2022-30271:** Remote Terminal Unit (RTU) uses a hard-coded SSH private key that is likely to be used by default.\n- **CVE-2020-10884:** WiFi router service has a hard-coded encryption key, allowing root access\n\n",
  "keyphrases": {
    "base_query": "## Vulnerability Description\nArq Backup 7.19.5.0 and below **stores backup encryption passwords using reversible encryption**. This issue allows attackers with administrative privileges to recover cleartext passwords.\n\n### Vulnerability Description Key Phrases\n- **weakness:** **stores backup encryption passwords using reversible encryption**\n- **impact:** recover cleartext passwords\n- **attacker:** attackers with administrative privileges\n- **product:** Arq Backup\n- **version:** 7.19.5.0 and below\n\n## CVE Reference Links Content Summary\nBased on the provided content, here's an analysis of CVE-2022-36617:\n\n**Root Cause of Vulnerability:**\n\nThe vulnerability stems from the way Arq Backup was storing the backup encryption password. Instead of storing only the encryption key derived from the user's password, it was storing the actual password itself in a reversibly encrypted format.\n\n**Weaknesses/Vulnerabilities Present:**\n\n*   **Insecure Storage of Sensitive Data:** The primary weakness is the storage of the user's backup encryption password in a reversibly encrypted form, making it susceptible to theft.\n*   **Reversible Encryption:**  The use of reversible encryption for sensitive passwords is a vulnerability, as it allows for relatively easy decryption compared to irreversible hashing techniques.\n\n**Impact of Exploitation:**\n\n*   **Data Breach:** An attacker with administrative privileges on a compromised system could steal the stored encryption password, allowing them to decrypt and access the user's backed-up data.\n*   **Wider Access:** Since users often reuse passwords, a compromised backup encryption password could grant an attacker access to other systems and services beyond the scope of the Arq Backup application.\n\n**Attack Vectors:**\n\n*   **Local Malware:** The primary attack vector is malware running locally with administrative privileges on the victim's machine.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Administrative Privileges:** The attacker must have administrative privileges (e.g., root) on the target system to access the reversibly encrypted password.\n*   **Local Access:** The attack is based on local system access; it is not a remote attack.\n\n**Additional Notes:**\n\n*   The vendor, Arq Backup, has addressed this vulnerability by storing only the derived encryption key instead of the password itself.\n*   The vulnerability was identified by Sam Haskins and responsibly disclosed to the vendor.\n*   The patch for the vulnerability was released in Arq Backup version 7.19.10.0 for Windows and 7.19.3 for macOS.\n*   The report also highlights that storing other secrets, like OAuth refresh tokens, in a reversibly encrypted way is not problematic due to their non-reused nature.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 311 | Missing Encryption of Sensitive Data | Class | Discouraged | sparse | 0.228 |\n| 2 | 312 | Cleartext Storage of Sensitive Information | Base | Allowed | sparse | 0.223 |\n| 3 | 522 | Insufficiently Protected Credentials | Class | Allowed-with-Review | sparse | 0.220 |\n| 4 | 256 | Plaintext Storage of a Password | Base | Allowed | sparse | 0.197 |\n| 5 | 798 | Use of Hard-coded Credentials | Base | Allowed | sparse | 0.182 |\n| 6 | 257 | Storing Passwords in a Recoverable Format | Base | Allowed | dense | 0.519 |\n| 7 | 523 | Unprotected Transport of Credentials | Base | Allowed | graph | 0.002 |\n| 8 | 328 | Use of Weak Hash | Base | Allowed | sparse | 0.182 |\n| 9 | 319 | Cleartext Transmission of Sensitive Information | Base | Allowed | sparse | 0.178 |\n| 10 | 321 | Use of Hard-coded Cryptographic Key | Variant | Allowed | sparse | 0.173 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-311: Missing Encryption of Sensitive Data\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not encrypt sensitive or critical information before storage or transmission.\n\n### Extended Description\nThe lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-311 is high-level with more precise children available. It is a level-1 Class (i.e., a child of a Pillar).\n**Comments:** Consider children CWE-312: Cleartext Storage of Sensitive Information or CWE-319: Cleartext Transmission of Sensitive Information.\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Relationship]** There is an overlapping relationship between insecure storage of sensitive information (CWE-922) and missing encryption of sensitive information (CWE-311). Encryption is often used to prevent an attacker from reading the sensitive data. However, encryption does not prevent the attacker from erasing or overwriting the data.\n\n\n\n### Observed Examples\n- **CVE-2009-2272:** password and username stored in cleartext in a cookie\n- **CVE-2009-1466:** password stored in cleartext in a file with insecure permissions\n- **CVE-2009-0152:** chat program disables SSL in some circumstances even when the user says to use SSL.\n\n\n\n\n## CWE-312: Cleartext Storage of Sensitive Information\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.\n\n### Extended Description\n\n\nBecause the information is stored in cleartext (i.e., unencrypted), attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.\n\n\nWhen organizations adopt cloud services, it can be easier for attackers to access the data from anywhere on the Internet.\n\n\nIn some systems/environments such as cloud, the use of \"double encryption\" (at both the software and hardware layer) might be required, and the developer might be solely responsible for both layers, instead of shared responsibility with the administrator of the broader system/environment.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-311\nChildOf -> CWE-311\nChildOf -> CWE-922\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Terminology]** Different people use \"cleartext\" and \"plaintext\" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding).\n\n\n\n### Observed Examples\n- **CVE-2022-30275:** Remote Terminal Unit (RTU) uses a driver that relies on a password stored in plaintext.\n- **CVE-2009-2272:** password and username stored in cleartext in a cookie\n- **CVE-2009-1466:** password stored in cleartext in a file with insecure permissions\n\n\n\n\n## CWE-522: Insufficiently Protected Credentials\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1390\nChildOf -> CWE-287\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2022-30018:** A messaging platform serializes all elements of User/Group objects, making private information available to adversaries\n- **CVE-2022-29959:** Initialization file contains credentials that can be decoded using a \"simple string transformation\"\n- **CVE-2022-35411:** Python-based RPC framework enables pickle functionality by default, allowing clients to unpickle untrusted data.\n\n\n\n\n## CWE-256: Plaintext Storage of a Password\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nStoring a password in plaintext may result in a system compromise.\n\n### Extended Description\nPassword management issues occur when a password is stored in plaintext in an application's properties, configuration file, or memory. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource. In some contexts, even storage of a plaintext password in memory is considered a security risk if the password is not cleared immediately after it is used.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-522\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-30275:** Remote Terminal Unit (RTU) uses a driver that relies on a password stored in plaintext.\n\n\n\n\n## CWE-798: Use of Hard-coded Credentials\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product contains hard-coded credentials, such as a password or cryptographic key.\n\n### Extended Description\n\n\nThere are two main variations:\n\n\n  - Inbound: the product contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials. In this variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. It can also be difficult for the administrator to detect.\n\n  - Outbound: the product connects to another system or component, and it contains hard-coded credentials for connecting to that component. This variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password that can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product.\n\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1391\nChildOf -> CWE-287\nChildOf -> CWE-344\nChildOf -> CWE-671\nPeerOf -> CWE-257\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-29953:** Condition Monitor firmware has a maintenance interface with hard-coded credentials\n- **CVE-2022-29960:** Engineering Workstation uses hard-coded cryptographic keys that could allow for unathorized filesystem access and privilege escalation\n- **CVE-2022-29964:** Distributed Control System (DCS) has hard-coded passwords for local shell access\n\n\n\n\n## CWE-257: Storing Passwords in a Recoverable Format\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-522\nPeerOf -> CWE-259\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** The meaning of this entry needs to be investigated more closely, especially with respect to what is meant by \"recoverable.\"\n\n\n\n### Observed Examples\n- **CVE-2022-30018:** A messaging platform serializes all elements of User/Group objects, making private information available to adversaries\n\n\n\n\n## CWE-523: Unprotected Transport of Credentials\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nLogin pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-522\nCanAlsoBe -> CWE-312\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n\n\n\n## CWE-328: Use of Weak Hash\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).\n\n### Extended Description\n\n\nA hash function is defined as an algorithm that maps arbitrarily sized data into a fixed-sized digest (output) such that the following properties hold:\n\n\n  1. The algorithm is not invertible (also called \"one-way\" or \"not reversible\")\n\n  1. The algorithm is deterministic; the same input produces the same digest every time\n\n Building on this definition, a cryptographic hash function must also ensure that a malicious actor cannot leverage the hash function to have a reasonable chance of success at determining any of the following:\n\n  1. the original input (preimage attack), given only the digest\n\n  1. another input that can produce the same digest (2nd preimage attack), given the original input\n\n  1. a set of two or more inputs that evaluate to the same digest (birthday attack), given the actor can arbitrarily choose the inputs to be hashed and can do so a reasonable amount of times\n\nWhat is regarded as \"reasonable\" varies by context and threat model, but in general, \"reasonable\" could cover any attack that is more efficient than brute force (i.e., on average, attempting half of all possible combinations). Note that some attacks might be more efficient than brute force but are still not regarded as achievable in the real world.\n\nAny algorithm that does not meet the above conditions will generally be considered weak for general use in hashing.\n\n\nIn addition to algorithmic weaknesses, a hash function can be made weak by using the hash in a security context that breaks its security guarantees. For example, using a hash function without a salt for storing passwords (that are sufficiently short) could enable an adversary to create a \"rainbow table\" [REF-637] to recover the password under certain conditions; this attack works against such hash functions as MD5, SHA-1, and SHA-2.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-326\nChildOf -> CWE-327\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** Since CWE 4.4, various cryptography-related entries including CWE-328 have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.\n\n\n\n### Observed Examples\n- **CVE-2022-30320:** Programmable Logic Controller (PLC) uses a protocol with a cryptographically insecure hashing algorithm for passwords.\n- **CVE-2005-4900:** SHA-1 algorithm is not collision-resistant.\n- **CVE-2020-25685:** DNS product uses a weak hash (CRC32 or SHA-1) of the query name, allowing attacker to forge responses by computing domain names with the same hash.\n\n\n\n\n## CWE-319: Cleartext Transmission of Sensitive Information\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\n\n### Extended Description\n\n\nMany communication channels can be \"sniffed\" (monitored) by adversaries during data transmission. For example, in networking, packets can traverse many intermediary nodes from the source to the destination, whether across the internet, an internal network, the cloud, etc. Some actors might have privileged access to a network interface or any link along the channel, such as a router, but they might not be authorized to collect the underlying data. As a result, network traffic could be sniffed by adversaries, spilling security-critical data.\n\n\nApplicable communication channels are not limited to software products. Applicable channels include hardware-specific technologies such as internal hardware networks and external debug channels, supporting remote JTAG debugging. When mitigations are not applied to combat adversaries within the product's threat model, this weakness significantly lowers the difficulty of exploitation by such adversaries.\n\n\nWhen full communications are recorded or logged, such as with a packet dump, an adversary could attempt to obtain the dump long after the transmission has occurred and try to \"sniff\" the cleartext from the recorded communications in the dump itself. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. \n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-311\nChildOf -> CWE-311\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-29519:** Programmable Logic Controller (PLC) sends sensitive information in plaintext, including passwords and session tokens.\n- **CVE-2022-30312:** Building Controller uses a protocol that transmits authentication credentials in plaintext.\n- **CVE-2022-31204:** Programmable Logic Controller (PLC) sends password in plaintext.\n\n\n\n\n## CWE-321: Use of Hard-coded Cryptographic Key\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-798\nChildOf -> CWE-798\nChildOf -> CWE-798\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** The main difference between the use of hard-coded passwords and the use of hard-coded cryptographic keys is the false sense of security that the former conveys. Many people believe that simply hashing a hard-coded password before storage will protect the information from malicious users. However, many hashes are reversible (or at least vulnerable to brute force attacks) -- and further, many authentication protocols simply request the hash itself, making it no better than a password.\n\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-29960:** Engineering Workstation uses hard-coded cryptographic keys that could allow for unathorized filesystem access and privilege escalation\n- **CVE-2022-30271:** Remote Terminal Unit (RTU) uses a hard-coded SSH private key that is likely to be used by default.\n- **CVE-2020-10884:** WiFi router service has a hard-coded encryption key, allowing root access\n\n"
  },
  "timestamp": "2025-03-31 09:04:16",
  "cve_id": "unknown",
  "result_count": 5,
  "results": [
    {
      "cwe_id": "328",
      "name": "Use of Weak Hash",
      "score": 5921.315802887419,
      "search_source": "unknown"
    },
    {
      "cwe_id": "916",
      "name": "Use of Password Hash With Insufficient Computational Effort",
      "score": 5743.38233021544,
      "search_source": "unknown"
    },
    {
      "cwe_id": "312",
      "name": "Cleartext Storage of Sensitive Information",
      "score": 5735.489772401586,
      "search_source": "unknown"
    },
    {
      "cwe_id": "798",
      "name": "Use of Hard-coded Credentials",
      "score": 5698.188156478246,
      "search_source": "unknown"
    },
    {
      "cwe_id": "319",
      "name": "Cleartext Transmission of Sensitive Information",
      "score": 5682.823046193629,
      "search_source": "unknown"
    }
  ]
}