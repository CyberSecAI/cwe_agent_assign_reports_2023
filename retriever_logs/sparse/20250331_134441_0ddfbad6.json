{
  "retriever": "sparse",
  "query": "## Vulnerability Description\nWAVLINK WN572HP3, WN533A8, WN530H4, WN535G3, WN531P3 wireless.cgi **has no filtering on parameter hiddenSSID32g and SSID2G2**, which leads to **command injection** in page /wifi_multi_ssid.shtml.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **has no filtering on parameter hiddenSSID32g and SSID2G2**\n- **weakness:** **command injection**\n- **product:** WAVLINK WN572HP3, WN533A8, WN530H4, WN535G3, WN531P3\n- **component:** wireless.cgi\n\n## CVE Reference Links Content Summary\nThe provided content details multiple command injection vulnerabilities affecting WAVLINK routers. Here's a breakdown of the information, with each vulnerability separated for clarity:\n\n**Vulnerability 1**\n\n*   **Affected Page:** `/wizard_router_mesh.shtml`\n*   **Vulnerable CGI:** `adm.cgi`\n*   **Vulnerable Parameters:** `web_pskValue`, `wl_Method`, `wlan_ssid`, `EncrypType`, `rwan_ip`, `rwan_mask`, `rwan_gateway`, `ppp_username`, `ppp_passwd`, and `ppp_setver`.\n*   **Root Cause:** Lack of input sanitization on the listed parameters in `adm.cgi`.\n*   **Attack Vector:** Sending a crafted POST request to `/cgi-bin/adm.cgi` with malicious commands injected into any of the vulnerable parameters, after navigating to the `/wizard_router_mesh.shtml` page and choosing 'Router Mode'.\n*   **Impact:** Remote command execution on the router's operating system.\n*   **Required Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the router and must be authenticated (logged in).\n\n**Vulnerability 2**\n\n*   **Affected Page:** `/ledonoff.shtml`\n*   **Vulnerable CGI:** `adm.cgi`\n*   **Vulnerable Parameter:** `led_switch`\n*   **Root Cause:** Lack of input sanitization on the `led_switch` parameter in `adm.cgi`.\n*   **Attack Vector:** Sending a crafted POST request to `/cgi-bin/adm.cgi` with a malicious command injected into the `led_switch` parameter after navigating to the `/ledonoff.shtml` page and triggering an LED switch.\n*   **Impact:** Remote command execution on the router's operating system.\n*   **Required Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the router and must be authenticated (logged in).\n\n**Vulnerability 3**\n\n*   **Affected Page:** `/wan.shtml`\n*  **Vulnerable CGI:** `adm.cgi`\n*   **Vulnerable Parameters:** `ppp_username`, `ppp_passwd`, `rwan_gateway`, `rwan_mask`, and `rwan_ip`.\n*   **Root Cause:** Lack of input sanitization on the listed parameters in `adm.cgi`.\n*   **Attack Vector:** Sending a crafted POST request to `/cgi-bin/adm.cgi` with malicious commands injected into any of the vulnerable parameters, after navigating to the `/wan.shtml` page and making changes to the WAN settings.\n*   **Impact:** Remote command execution on the router's operating system.\n*   **Required Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the router and must be authenticated (logged in).\n\n**Vulnerability 4**\n\n*   **Affected Page:** `/wizard_rep.shtml`\n*   **Vulnerable CGI:** `adm.cgi`\n*   **Vulnerable Parameters:** `wlan_signal`, `web_pskValue`, `sel_EncrypTyp`, `sel_Automode`, `wlan_bssid`, `wlan_ssid`, and `wlan_channel`.\n*   **Root Cause:** Lack of input sanitization on the listed parameters in `adm.cgi`.\n*   **Attack Vector:** Sending a crafted POST request to `/cgi-bin/adm.cgi` with malicious commands injected into any of the vulnerable parameters, after navigating to the `/wizard_rep.shtml` page and choosing 'Repeater Mode'.\n*   **Impact:** Remote command execution on the router's operating system.\n*   **Required Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the router and must be authenticated (logged in).\n\n**Vulnerability 5**\n\n*   **Affected Page:** `/ledonoff.shtml`\n*   **Vulnerable CGI:** `api.cgi`\n*   **Vulnerable Parameter:** `ufconf` (hidden parameter)\n*   **Root Cause:** Lack of input sanitization on the `ufconf` parameter in `api.cgi`. The parameter is not visible in the POST request by default but is present in the cgi binary.\n*   **Attack Vector:**  Sending a crafted POST request to `/cgi-bin/api.cgi` with the `ufconf` parameter containing a malicious command after visiting the `/ledonoff.shtml` page.\n*   **Impact:** Remote command execution on the router's operating system.\n*    **Required Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the router, must be authenticated, and must be aware of this hidden parameter.\n\n**Vulnerability 6**\n\n*   **Affected Page:** `/cli_black_list.shtml`\n*   **Vulnerable CGI:** `firewall.cgi`\n*   **Vulnerable Parameter:** `add_mac`\n*   **Root Cause:** Lack of input sanitization on the `add_mac` parameter in `firewall.cgi`.\n*   **Attack Vector:** Sending a crafted POST request to `/cgi-bin/firewall.cgi` with a malicious command injected into the `add_mac` parameter when adding a device to the blacklist after navigating to `/cli_black_list.shtml`.\n*   **Impact:** Remote command execution on the router's operating system.\n*   **Required Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the router and must be authenticated (logged in).\n\n**Vulnerability 7**\n\n*   **Affected Page:** `/cli_black_list.shtml`\n*   **Vulnerable CGI:** `firewall.cgi`\n*   **Vulnerable Parameters:** `del_mac` and `flag`\n*   **Root Cause:** Lack of input sanitization on `del_mac` and `flag` parameters in `firewall.cgi`.\n*   **Attack Vector:** Sending a crafted POST request to `/cgi-bin/firewall.cgi` with malicious commands injected into either the `del_mac` or `flag` parameters, after navigating to `/cli_black_list.shtml` and removing a device from the blacklist.\n*   **Impact:** Remote command execution on the router's operating system.\n*   **Required Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the router and must be authenticated (logged in).\n\n**Vulnerability 8**\n\n*   **Affected Page:** `/man_security.shtml`\n*   **Vulnerable CGI:** `firewall.cgi`\n*   **Vulnerable Parameters:** `remoteManagementEnabled`, `blockPortScanEnabled`, `pingFrmWANFilterEnabled`, and `blockSynFloodEnabled`.\n*   **Root Cause:** Lack of input sanitization on the listed parameters in `firewall.cgi`.\n*   **Attack Vector:** Sending a crafted POST request to `/cgi-bin/firewall.cgi` with malicious commands injected into any of the vulnerable parameters after navigating to `/man_security.shtml` and modifying firewall settings.\n*   **Impact:** Remote command execution on the router's operating system.\n*   **Required Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the router and must be authenticated (logged in).\n\n**Vulnerability 9**\n\n*   **Affected Page:** `/login.shtml`\n*   **Vulnerable CGI:** `login.cgi`\n*   **Vulnerable Parameter:** `key`\n*   **Root Cause:** Lack of input sanitization on the `key` parameter in `login.cgi`.\n*   **Attack Vector:** Sending a crafted POST request to `/cgi-bin/login.cgi` with a malicious command injected into the `key` parameter when attempting to login.\n*   **Impact:** Remote command execution on the router's operating system.\n*   **Required Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the router. No authentication is required for this particular vulnerability, as it occurs at the login page.\n\n**Vulnerability 10**\n\n*   **Affected Page:** `/nas_disk.shtml`\n*  **Vulnerable CGI:** `nas.cgi`\n*   **Vulnerable Parameters:** `User1Passwd` and `User1`.\n*   **Root Cause:** Lack of input sanitization on the `User1Passwd` and `User1` parameters in `nas.cgi`.\n*   **Attack Vector:** Sending a crafted POST request to `/cgi-bin/nas.cgi` with malicious commands injected into either `User1Passwd` or `User1`, after navigating to `/nas_disk.shtml` and clicking the apply button.\n*   **Impact:** Remote command execution on the router's operating system.\n*   **Required Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the router and must be authenticated (logged in).\n\n**Vulnerability 11**\n\n*   **Affected Page:** `/qos.shtml`\n*   **Vulnerable CGI:** `qos.cgi`\n*   **Vulnerable Parameters:** `cli_list` and `cli_num` (hidden parameters)\n*   **Root Cause:** Lack of input sanitization on the hidden `cli_list` and `cli_num` parameters in `qos.cgi`.\n*   **Attack Vector:** Sending a crafted POST request to `/cgi-bin/qos.cgi` (after navigating to `/qos.shtml`) with the `cli_list` and `cli_num` parameters added, containing malicious commands.\n*   **Impact:** Remote command execution on the router's operating system.\n*   **Required Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the router, must be authenticated, and must be aware of these hidden parameters.\n\n**Vulnerability 12**\n\n*   **Affected Page:** `/qos.shtml`\n*   **Vulnerable CGI:** `qos.cgi`\n*   **Vulnerable Parameters:** `qos_bandwith` and `qos_dat`\n*   **Root Cause:** Lack of input sanitization on the `qos_bandwith` and `qos_dat` parameters in `qos.cgi`.\n*   **Attack Vector:** Sending a crafted POST request to `/cgi-bin/qos.cgi` with malicious commands injected into `qos_bandwith` or `qos_dat`, after navigating to `/qos.shtml`.\n*   **Impact:** Remote command execution on the router's operating system.\n*    **Required Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the router and must be authenticated (logged in).\n\n**Vulnerability 13**\n\n*   **Affected Page:** `/wifi_multi_ssid.shtml`\n*   **Vulnerable CGI:** `wireless.cgi`\n*   **Vulnerable Parameters:** `hiddenSSID32g` and `SSID2G2`\n*   **Root Cause:** Lack of input sanitization on the `hiddenSSID32g` and `SSID2G2` parameters in `wireless.cgi`.\n*   **Attack Vector:** Sending a crafted POST request to `/cgi-bin/wireless.cgi` with malicious commands injected into `hiddenSSID32g` or `SSID2G2` after navigating to the `/wifi_multi_ssid.shtml` page and making changes to the SSID settings.\n*   **Impact:** Remote command execution on the router's operating system.\n*   **Required Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the router and must be authenticated (logged in).\n\n**Vulnerability 14**\n\n*   **Affected Page:** `/wifi_mesh.shtml`\n*   **Vulnerable CGI:** `wireless.cgi`\n*  **Vulnerable Parameters:** `mac_5g` and `Newname` (hidden parameters)\n*   **Root Cause:** Lack of input sanitization on the hidden parameters `mac_5g` and `Newname` in `wireless.cgi`.\n*   **Attack Vector:** Sending a crafted POST request to `/cgi-bin/wireless.cgi` (after navigating to `/wifi_mesh.shtml`) with the parameters `mac_5g` and `Newname` added, containing malicious commands.\n*   **Impact:** Remote command execution on the router's operating system.\n*   **Required Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the router, must be authenticated, and must be aware of these hidden parameters.\n\n**Vulnerability 15**\n\n*   **Affected Page:** `/wifi_mesh.shtml`\n*   **Vulnerable CGI:** `wireless.cgi`\n*   **Vulnerable Parameter:** `macAddr`\n*   **Root Cause:** Lack of input sanitization on the `macAddr` parameter in `wireless.cgi`.\n*   **Attack Vector:** Sending a crafted POST request to `/cgi-bin/wireless.cgi` with a malicious command injected into the `macAddr` parameter, after navigating to `/wifi_mesh.shtml` and attempting to add an extender.\n*   **Impact:** Remote command execution on the router's operating system.\n*   **Required Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the router and must be authenticated (logged in).\n\n**Vulnerability 16**\n\n*   **Affected Page:** `/wifi_mesh.shtml`\n*   **Vulnerable CGI:** `wireless.cgi`\n*   **Vulnerable Parameters:** `delete_list`, `delete_al_mac`, `b_delete_list`, and `b_delete_al_mac`\n*   **Root Cause:** Lack of input sanitization on the listed parameters in `wireless.cgi`.\n*   **Attack Vector:** Sending a crafted POST request to `/cgi-bin/wireless.cgi` with malicious commands injected into any of the vulnerable parameters, after navigating to `/wifi_mesh.shtml` and attempting to remove an extender.\n*   **Impact:** Remote command execution on the router's operating system.\n*   **Required Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the router and must be authenticated (logged in).\n\n**Summary of Vulnerabilities**\n\nThe core vulnerability across all the described instances is the lack of proper input validation and sanitization in various CGI scripts (`adm.cgi`, `firewall.cgi`, `login.cgi`, `nas.cgi`, `qos.cgi`, and `wireless.cgi`) on the WAVLINK routers. This allows an attacker to inject operating system commands into HTTP POST requests, which the router then executes. The affected models include WN572HP3, WN533A8, WN530H4, WN535G3, and WN531P3.\n\n**Overall Impact**\n\nSuccessful exploitation of these vulnerabilities can lead to:\n\n*   Full control of the affected device.\n*   Potential for further network compromise.\n*   The ability to use the router in botnet activities.\n*   Theft of sensitive data handled by the router.\n\nThe content provided is more detailed than the typical CVE description which only includes a brief summary of the vulnerability. This content provides detailed technical information about the vulnerable parameters, attack vectors, and specific vulnerable pages.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 77 | Improper Neutralization of Special Elements used in a Command ('Command Injection') | Class | Allowed-with-Review | alternate_terms | 1.000 |\n| 2 | 78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | Base | Allowed | alternate_terms | 0.700 |\n| 3 | 790 | Improper Filtering of Special Elements | Class | Allowed-with-Review | sparse | 0.568 |\n| 4 | 425 | Direct Request ('Forced Browsing') | Base | Allowed | sparse | 0.153 |\n| 5 | 791 | Incomplete Filtering of Special Elements | Base | Allowed | sparse | 0.131 |\n| 6 | 134 | Use of Externally-Controlled Format String | Base | Allowed | dense | 0.544 |\n| 7 | 471 | Modification of Assumed-Immutable Data (MAID) | Base | Allowed | graph | 0.002 |\n| 8 | 89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | Base | Allowed | sparse | 0.125 |\n| 9 | 93 | Improper Neutralization of CRLF Sequences ('CRLF Injection') | Base | Allowed | sparse | 0.125 |\n| 10 | 434 | Unrestricted Upload of File with Dangerous Type | Base | Allowed | sparse | 0.120 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\n### Extended Description\n\n\nMany protocols and products have their own custom command language. While OS or shell command strings are frequently discovered and targeted, developers may not realize that these other command languages might also be vulnerable to attacks.\n\n\n### Alternative Terms\nCommand injection: an attack-oriented phrase for this weakness. Note: often used when \"OS command injection\" (CWE-78) was intended.\n\n### Relationships\nChildOf -> CWE-74\nChildOf -> CWE-74\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** CWE-77 is often misused when OS command injection (CWE-78) was intended instead [REF-1287].\n**Comments:** Ensure that the analysis focuses on the root-cause error that allows the execution of commands, as there are many weaknesses that can lead to this consequence. See Terminology Notes. If the weakness involves a command language besides OS shell invocation, then CWE-77 could be used.\n**Reasons:**\n- Frequent Misuse\n**Suggested Alternatives:**\n- CWE-78: OS Command Injection\n\n\n### Additional Notes\n**[Terminology]** \n\nThe \"command injection\" phrase carries different meanings, either as an attack or as a technical impact. The most common usage of \"command injection\" refers to the more-accurate OS command injection (CWE-78), but there are many command languages.\n\n\nIn vulnerability-focused analysis, the phrase may refer to any situation in which the adversary can execute commands of their own choosing, i.e., the focus is on the risk and/or technical impact of exploitation. Many proof-of-concept exploits focus on the ability to execute commands and may emphasize \"command injection.\" However, there are dozens of weaknesses that can allow execution of commands. That is, the ability to execute commands could be resultant from another weakness.\n\n\nTo some, \"command injection\" can include cases in which the functionality intentionally allows the user to specify an entire command, which is then executed. In this case, the root cause weakness might be related to missing or incorrect authorization, since an adversary should not be able to specify arbitrary commands, but some users or admins are allowed.\n\n\nCWE-77 and its descendants are specifically focused on behaviors in which the product is intentionally building a command to execute, and the adversary can inject separators into the command or otherwise change the command being executed.\n\n\n**[Other]** \n\nCommand injection is a common problem with wrapper programs.\n\n\n\n\n### Observed Examples\n- **CVE-2022-1509:** injection of sed script syntax (\"sed injection\")\n- **CVE-2024-5184:** API service using a large generative AI model allows direct prompt injection to leak hard-coded system prompts or execute other prompts.\n- **CVE-2020-11698:** anti-spam product allows injection of SNMP commands into confiuration file\n\n\n\n\n## CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\n### Extended Description\n\n\nThis weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.\n\n\nThere are at least two subtypes of OS command injection:\n\n\n  - The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(\"nslookup [HOSTNAME]\") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.\n\n  - The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use \"exec([COMMAND])\" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line.\n\nFrom a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.\n\n### Alternative Terms\nShell injection\nShell metacharacters\nOS Command Injection\n\n### Relationships\nChildOf -> CWE-77\nChildOf -> CWE-74\nChildOf -> CWE-77\nChildOf -> CWE-77\nCanAlsoBe -> CWE-88\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Terminology]** The \"OS command injection\" phrase carries different meanings to different people. For some people, it only refers to cases in which the attacker injects command separators into arguments for an application-controlled program that is being invoked. For some people, it refers to any type of attack that can allow the attacker to execute OS commands of their own choosing. This usage could include untrusted search path weaknesses (CWE-426) that cause the application to find and execute an attacker-controlled program. Further complicating the issue is the case when argument injection (CWE-88) allows alternate command-line switches or options to be inserted into the command line, such as an \"-exec\" switch whose purpose may be to execute the subsequent argument as a command (this -exec switch exists in the UNIX \"find\" command, for example). In this latter case, however, CWE-88 could be regarded as the primary weakness in a chain with CWE-78.\n\n**[Research Gap]** More investigation is needed into the distinction between the OS command injection variants, including the role with argument injection (CWE-88). Equivalent distinctions may exist in other injection-related problems such as SQL injection.\n\n\n\n### Observed Examples\n- **CVE-2020-10987:** OS command injection in Wi-Fi router, as exploited in the wild per CISA KEV.\n- **CVE-2020-10221:** Template functionality in network configuration management tool allows OS command injection, as exploited in the wild per CISA KEV.\n- **CVE-2020-9054:** Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.\n\n\n\n\n## CWE-790: Improper Filtering of Special Elements\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-138\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n\n\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n### Extended Description\nWeb applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.\n\n### Alternative Terms\nforced browsing: The \"forced browsing\" term could be misinterpreted to include weaknesses such as CSRF or XSS, so its use is discouraged.\n\n### Relationships\nChildOf -> CWE-862\nChildOf -> CWE-862\nChildOf -> CWE-288\nChildOf -> CWE-424\nCanPrecede -> CWE-471\nCanPrecede -> CWE-98\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Overlaps Modification of Assumed-Immutable Data (MAID), authorization errors, container errors; often primary to other weaknesses such as XSS and SQL injection.\n\n**[Theoretical]** \"Forced browsing\" is a step-based manipulation involving the omission of one or more steps, whose order is assumed to be immutable. The application does not verify that the first step was performed successfully before the second step. The consequence is typically \"authentication bypass\" or \"path disclosure,\" although it can be primary to all kinds of weaknesses, especially in languages such as PHP, which allow external modification of assumed-immutable variables.\n\n\n\n### Observed Examples\n- **CVE-2022-29238:** Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.\n- **CVE-2022-23607:** Python-based HTTP library did not scope cookies to a particular domain such that \"supercookies\" could be sent to any domain on redirect.\n- **CVE-2004-2144:** Bypass authentication via direct request.\n\n\n\n\n## CWE-791: Incomplete Filtering of Special Elements\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-790\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n\n\n\n## CWE-134: Use of Externally-Controlled Format String\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses a function that accepts a format string as an argument, but the format string originates from an external source.\n\n### Extended Description\n\n\nWhen an attacker can modify an externally-controlled format string, this can lead to buffer overflows, denial of service, or data representation problems.\n\n\nIt should be noted that in some circumstances, such as internationalization, the set of format strings is externally controlled by design. If the source of these format strings is trusted (e.g. only contained in library files that are only modifiable by the system administrator), then the external control might not itself pose a vulnerability.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-668\nChildOf -> CWE-668\nCanPrecede -> CWE-123\nChildOf -> CWE-20\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Applicable Platform]** \n\nThis weakness is possible in any programming language that support format strings.\n\n\n**[Other]** \n\nWhile Format String vulnerabilities typically fall under the Buffer Overflow category, technically they are not overflowed buffers. The Format String vulnerability is fairly new (circa 1999) and stems from the fact that there is no realistic way for a function that takes a variable number of arguments to determine just how many arguments were passed in. The most common functions that take a variable number of arguments, including C-runtime functions, are the printf() family of calls. The Format String problem appears in a number of ways. A *printf() call without a format specifier is dangerous and can be exploited. For example, printf(input); is exploitable, while printf(y, input); is not exploitable in that context. The result of the first call, used incorrectly, allows for an attacker to be able to peek at stack memory since the input string will be used as the format specifier. The attacker can stuff the input string with format specifiers and begin reading stack values, since the remaining parameters will be pulled from the stack. Worst case, this improper use may give away enough control to allow an arbitrary value (or values in the case of an exploit program) to be written into the memory of the running program.\n\n\nFrequently targeted entities are file names, process names, identifiers.\n\n\nFormat string problems are a classic C/C++ issue that are now rare due to the ease of discovery. One main reason format string vulnerabilities can be exploited is due to the %n operator. The %n operator will write the number of characters, which have been printed by the format string therefore far, to the memory pointed to by its argument. Through skilled creation of a format string, a malicious user may use values on the stack to create a write-what-where condition. Once this is achieved, they can execute arbitrary code. Other operators can be used as well; for example, a %9999s operator could also trigger a buffer overflow, or when used in file-formatting functions like fprintf, it can generate a much larger output than intended.\n\n\n**[Research Gap]** Format string issues are under-studied for languages other than C. Memory or disk consumption, control flow or variable alteration, and data corruption may result from format string exploitation in applications written in other languages such as Perl, PHP, Python, etc.\n\n\n\n### Observed Examples\n- **CVE-2002-1825:** format string in Perl program\n- **CVE-2001-0717:** format string in bad call to syslog function\n- **CVE-2002-0573:** format string in bad call to syslog function\n\n\n\n\n## CWE-471: Modification of Assumed-Immutable Data (MAID)\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not properly protect an assumed-immutable element from being modified by an attacker.\n\n### Extended Description\nThis occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-664\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** MAID issues can be primary to many other weaknesses, and they are a major factor in languages that provide easy access to internal program constructs, such as PHP's register_globals and similar features. However, MAID issues can also be resultant from weaknesses that modify internal state; for example, a program might validate some data and store it in memory, but a buffer overflow could overwrite that validated data, leading to a change in program logic.\n\n**[Theoretical]** There are many examples where the MUTABILITY property is a major factor in a vulnerability.\n\n\n\n### Observed Examples\n- **CVE-2002-1757:** Relies on $PHP_SELF variable for authentication.\n- **CVE-2005-1905:** Gain privileges by modifying assumed-immutable code addresses that are accessed by a driver.\n\n\n\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nSQL injection: a common attack-oriented phrase\nSQLi: a common abbreviation for \"SQL injection\"\n\n### Relationships\nChildOf -> CWE-943\nChildOf -> CWE-74\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** SQL injection can be resultant from special character mismanagement, MAID, or denylist/allowlist problems. It can be primary to authentication errors.\n\n\n\n### Observed Examples\n- **CVE-2023-32530:** SQL injection in security product dashboard using crafted certificate fields\n- **CVE-2021-42258:** SQL injection in time and billing software, as exploited in the wild per CISA KEV.\n- **CVE-2021-27101:** SQL injection in file-transfer system via a crafted Host header, as exploited in the wild per CISA KEV.\n\n\n\n\n## CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-74\nCanPrecede -> CWE-117\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2002-1771:** CRLF injection enables spam proxy (add mail headers) using email address or name.\n- **CVE-2002-1783:** CRLF injection in API function arguments modify headers for outgoing requests.\n- **CVE-2004-1513:** Spoofed entries in web server log file via carriage returns\n\n\n\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nUnrestricted File Upload: Used in vulnerability databases and elsewhere, but it is insufficiently precise. The phrase could be interpreted as the lack of restrictions on the size or number of uploaded files, which is a resource consumption issue.\n\n### Relationships\nChildOf -> CWE-669\nChildOf -> CWE-669\nPeerOf -> CWE-351\nPeerOf -> CWE-436\nPeerOf -> CWE-430\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** \n\nThis can have a chaining relationship with incomplete denylist / permissive allowlist errors when the product tries, but fails, to properly limit which types of files are allowed (CWE-183, CWE-184).\n\n\nThis can also overlap multiple interpretation errors for intermediaries, e.g. anti-virus products that do not remove or quarantine attachments with certain file extensions that can be processed by client systems.\n\n\n\n\n### Observed Examples\n- **CVE-2023-5227:** PHP-based FAQ management app does not check the MIME type for uploaded images\n- **CVE-2001-0901:** Web-based mail product stores \".shtml\" attachments that could contain SSI\n- **CVE-2002-1841:** PHP upload does not restrict file types\n\n",
  "keyphrases": {},
  "timestamp": "2025-03-31 13:44:41",
  "cve_id": "unknown",
  "result_count": 5,
  "results": [
    {
      "cwe_id": "790",
      "name": "Improper Filtering of Special Elements",
      "score": 9891.843779954801,
      "search_source": "base_query"
    },
    {
      "cwe_id": "78",
      "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "score": 9045.068003528677,
      "search_source": "base_query"
    },
    {
      "cwe_id": "138",
      "name": "Improper Neutralization of Special Elements",
      "score": 8777.972064747699,
      "search_source": "base_query"
    },
    {
      "cwe_id": "22",
      "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
      "score": 8554.130711358017,
      "search_source": "base_query"
    },
    {
      "cwe_id": "88",
      "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
      "score": 8485.765169387074,
      "search_source": "base_query"
    }
  ]
}