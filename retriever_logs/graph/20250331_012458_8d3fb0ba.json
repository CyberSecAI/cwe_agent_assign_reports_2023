{
  "retriever": "graph",
  "query": "## Vulnerability Description\nSudo before 1.9.5p2 contains an **off-by-one error** that can result in a **heap-based buffer overflow**, which allows privilege escalation to root via \"sudoedit -s\" and a command-line argument that ends with a single backslash character.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **off-by-one error**\n- **weakness:** **heap-based buffer overflow**\n- **impact:** privilege escalation to root\n- **vector:** command-line argument ending with single backslash\n- **product:** Sudo\n- **version:** before 1.9.5p2\n\n## CVE Reference Links Content Summary\n```json\n{\n  \"guidelines\": \"1. First verify if the content relates to the CVE specified based on the official description\\n2. If the content does not relate to this CVE, respond with \\\"UNRELATED\\\"\\n3. If no useful vulnerability information is found, respond with \\\"NOINFO\\\" \\n4. For relevant content, extract:\\n   - Root cause of vulnerability\\n   - Weaknesses/vulnerabilities present\\n   - Impact of exploitation\\n   - Attack vectors\\n   - Required attacker capabilities/position\\n\\nAdditional instructions:\\n- Preserve original technical details and descriptions\\n- Remove unrelated content\\n- Translate non-English content to English\\n- Note if the content provides more detail than the official CVE description\",\n  \"response\": {\n    \"CVE-2021-3156\": [\n      {\n        \"content_source\": \"www.kb.cert.org_ddfaa341_20250108_124807.html\",\n        \"root_cause\": \"A heap-based buffer overflow exists in the `set_cmd()` function of sudo.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow\"\n        ],\n        \"impact\": \"A local non-administrative attacker can elevate their privileges to execute commands with administrator privileges.\",\n        \"attack_vectors\": [\n          \"Local access to an affected machine\"\n        ],\n        \"required_attacker_capabilities\": [\n          \"Local access to an affected machine\"\n        ]\n      },\n      {\n        \"content_source\": \"github.com_97ef01f3_20250108_153957.html\",\n         \"root_cause\": \"NOINFO\",\n        \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n        \"required_attacker_capabilities\": \"NOINFO\"\n      },\n      {\n        \"content_source\": \"www.openwall.com_979606b3_20250108_124757.html\",\n        \"root_cause\": \"A heap-based buffer overflow vulnerability exists in the `set_cmd()` function in sudo where if a command-line argument ends with a single backslash character, an out-of-bounds memory copy occurs due to improper unescaping.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow due to incorrect unescaping of a backslash character in command-line arguments.\"\n        ],\n        \"impact\": \"Any local user can gain root privileges on a vulnerable host with a default sudo configuration. Allows attackers to control the size of the user_args buffer that they overflow and independently control the size and content of the overflow.\",\n        \"attack_vectors\": [\n          \"Exploitable via the `sudoedit -s` command with a command-line argument ending in a backslash character.\"\n        ],\n         \"required_attacker_capabilities\": [\n          \"Local user (normal and system users, sudoers and non-sudoers).\"\n        ],\n         \"additional_details\": \"This vulnerability is present in legacy versions from 1.8.2 to 1.8.31p2 and all stable versions from 1.9.0 to 1.9.5p1. Exploit techniques include overwriting struct sudo_hook_entry to redirect code execution, overwriting heap-based struct nss_module name[], or overwriting def_timestampdir with an arbitrary symlink.\"\n      },\n     {\n        \"content_source\": \"sec.cloudapps.cisco.com_fee78a22_20250108_153952.html\",\n        \"root_cause\": \"Improper parsing of command line parameters in Sudo may result in a heap-based buffer overflow. Specifically, crafted parameters passed to sudoedit can cause a heap-based buffer overflow.\",\n        \"weaknesses\": [\n          \"Improper parsing of command line parameters resulting in a heap-based buffer overflow\"\n        ],\n        \"impact\": \"An authenticated, local attacker can execute commands or binaries with root privileges.\",\n        \"attack_vectors\": [\n          \"Accessing a Unix shell on an affected device and invoking the `sudoedit` command with crafted parameters or by executing a binary exploit.\"\n        ],\n         \"required_attacker_capabilities\": [\n           \"An authenticated local attacker capable of accessing a Unix shell on an affected device\"\n        ]\n      },\n   {\n        \"content_source\": \"github.com_f0514a42_20250108_153956.html\",\n         \"root_cause\": \"NOINFO\",\n        \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n        \"required_attacker_capabilities\": \"NOINFO\"\n      },\n      {\n        \"content_source\": \"www.debian.org_9de40279_20250108_124800.html\",\n        \"root_cause\": \"A heap-based buffer overflow vulnerability was found in sudo, a program designed to provide limited super user privileges to specific users.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow\"\n        ],\n         \"impact\": \"Local users can exploit this flaw for root privilege escalation.\",\n        \"attack_vectors\": [\n            \"Local users (sudoers and non-sudoers)\"\n          ],\n        \"required_attacker_capabilities\": [\n            \"Local user access\"\n          ]\n      },\n        {\n        \"content_source\": \"security.gentoo.org_08e70803_20250108_124802.html\",\n        \"root_cause\": \"A heap-based buffer overflow vulnerability exists in sudo.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow.\"\n        ],\n        \"impact\": \"Local users can gain unauthorized privileges on the system.\",\n        \"attack_vectors\": [\n          \"Local\"\n        ],\n          \"required_attacker_capabilities\": [\n             \"Local user access\"\n          ]\n      },\n      {\n        \"content_source\": \"tools.cisco.com_fdff3844_20250108_124805.html\",\n       \"root_cause\": \"Improper parsing of command line parameters in Sudo may result in a heap-based buffer overflow. Specifically, crafted parameters passed to sudoedit can cause a heap-based buffer overflow.\",\n        \"weaknesses\": [\n          \"Improper parsing of command line parameters resulting in a heap-based buffer overflow\"\n        ],\n        \"impact\": \"An authenticated, local attacker can execute commands or binaries with root privileges.\",\n        \"attack_vectors\": [\n          \"Accessing a Unix shell on an affected device and invoking the `sudoedit` command with crafted parameters or by executing a binary exploit.\"\n        ],\n          \"required_attacker_capabilities\": [\n           \"An authenticated local attacker capable of accessing a Unix shell on an affected device\"\n        ]\n      },\n      {\n        \"content_source\": \"www.openwall.com_67a199a4_20250108_124758.html\",\n         \"root_cause\": \"Out-of-bounds read/write vulnerability during argument unescaping in `set_cmnd()` in sudo, specifically when a command-line argument ends with a single backslash character.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow due to improper unescaping of backslash characters in command line arguments\"\n        ],\n        \"impact\": \"Local attackers can achieve privilege escalation and execute code as root.\",\n        \"attack_vectors\": [\n          \"The vulnerability can be exploited by running sudoedit with a specially crafted command-line argument that ends with a single backslash character.\"\n        ],\n         \"required_attacker_capabilities\": [\n           \"Requires local user access, without needing sudoers permissions or the user password.\"\n         ]\n      },\n      {\n        \"content_source\": \"www.synology.com_cd476a8e_20250108_124818.html\",\n        \"root_cause\": \"Heap-based buffer overflow when processing command line arguments.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow\"\n        ],\n          \"impact\": \"Local users can conduct privilege escalation attacks.\",\n         \"attack_vectors\": [\n           \"Local access to a susceptible system\"\n        ],\n        \"required_attacker_capabilities\": [\n           \"Local access\"\n        ]\n     },\n     {\n        \"content_source\": \"seclists.org_0b3cd48b_20250108_124756.html\",\n        \"root_cause\": \"A heap-based buffer overflow exists in sudo due to improper handling of a backslash character at the end of a command-line argument during parsing.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow.\"\n        ],\n        \"impact\": \"Any local user can gain root privileges on a vulnerable host with a default sudo configuration.\",\n         \"attack_vectors\": [\n            \"Exploitable when sudo is executed in shell mode using -s or -i option with a command-line argument that ends with a single backslash character.\"\n        ],\n        \"required_attacker_capabilities\": [\n            \"A local user, including non-sudo users and non-administrative users.\"\n          ]\n     },\n      {\n        \"content_source\": \"ubuntu.com_bebfc6e2_20250108_153945.html\",\n       \"root_cause\": \"An off-by-one error in Sudo's parsing of command line parameters, leading to a heap-based buffer overflow.\",\n        \"weaknesses\": [\n           \"Off-by-one error resulting in heap-based buffer overflow.\"\n        ],\n        \"impact\": \"Privilege escalation to root.\",\n        \"attack_vectors\": [\n          \"`sudoedit -s` with a command-line argument ending with a single backslash character.\"\n        ],\n        \"required_attacker_capabilities\": [\n             \"Local access\"\n          ]\n      },\n    {\n        \"content_source\": \"www.openwall.com_8b0d7e67_20250108_124758.html\",\n         \"root_cause\": \"A minor bug in sudo where the NO_ROOT_MAILER flag which was meant to harden sudo and avoid using mailer was broken.\",\n          \"weaknesses\": [\n          \"Broken hardening option (NO_ROOT_MAILER) in sudo that eases exploitation of the heap overflow.\"\n        ],\n        \"impact\": \"Makes exploit easier by allowing for more direct control of heap memory layout.\",\n        \"attack_vectors\": [\n            \"Local access with an exploit for CVE-2021-3156.\"\n          ],\n          \"required_attacker_capabilities\": [\n            \"Local user with sudo access\"\n          ],\n         \"additional_details\": \" This bug is used in combination with the Baron Samedit heap overflow. With NO_ROOT_MAILER working, the exploit is ~156 lines of code, whereas without it, the exploit is ~43 lines long. This highlights how the broken hardening mechanism increases exploit complexity\"\n      },\n        {\n        \"content_source\": \"blog.qualys.com_e270e781_20250108_153946.html\",\n        \"root_cause\": \"Heap overflow vulnerability in the `set_cmnd()` function in Sudo due to incorrect parsing of command line arguments. Specifically, if a command-line argument ends with a single backslash character, `set_cmnd()` performs an out-of-bounds copy to a heap buffer.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow\",\n           \"Improper argument handling\"\n        ],\n        \"impact\": \"Any unprivileged local user can gain root privileges on a vulnerable host. This is due to being able to control the size of the user_args buffer being overflowed and size and content of the overflow itself.\",\n        \"attack_vectors\": [\n            \"`sudoedit -s` with a command-line argument ending with a single backslash character.\"\n          ],\n        \"required_attacker_capabilities\": [\n           \"Any local user (normal users and system users, sudoers and non-sudoers).\"\n        ],\n         \"additional_details\": \"Vulnerability introduced in July 2011, and affects versions 1.8.2 to 1.8.31p2 and 1.9.0 to 1.9.5p1. Three exploits were developed that obtained full root privileges on Ubuntu 20.04, Debian 10, and Fedora 33.\"\n    },\n    {\n        \"content_source\": \"sec.cloudapps.cisco.com_89db7c50_20250108_153953.html\",\n        \"root_cause\": \"Improper parsing of command line parameters in Sudo, resulting in a heap-based buffer overflow.\",\n        \"weaknesses\": [\n            \"Improper command-line parameter parsing\",\n            \"Heap-based buffer overflow.\"\n        ],\n        \"impact\": \"An authenticated local attacker may execute commands or binaries with root privileges.\",\n         \"attack_vectors\": [\n            \"Accessing a Unix shell on an affected device and then invoking the `sudoedit` command with crafted parameters or by executing a binary exploit.\"\n        ],\n           \"required_attacker_capabilities\": [\n            \"An authenticated local attacker, with access to a Unix shell on an affected device\"\n          ]\n      },\n      {\n        \"content_source\": \"www.openwall.com_bc3f8cce_20250108_124757.html\",\n         \"root_cause\": \"Heap-based buffer overflow in Sudo's set_cmnd() function when handling arguments ending with a backslash. Specifically, during the unescaping of command line arguments in sudoedit.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow due to improper unescaping.\"\n        ],\n        \"impact\": \"Privilege escalation to root\",\n        \"attack_vectors\": [\n             \"The vulnerability is triggered by using sudoedit with the `-s` option, followed by an argument ending with a single backslash character.\"\n           ],\n          \"required_attacker_capabilities\": [\n            \"No specific privilege requirements, any local user can exploit this.\"\n        ]\n      },\n      {\n        \"content_source\": \"www.suse.com_53fb7cb8_20250108_153947.html\",\n       \"root_cause\": \"Off-by-one error in Sudo before 1.9.5p2 can result in a heap-based buffer overflow.\",\n         \"weaknesses\": [\n             \"Off-by-one error leading to heap-based buffer overflow\"\n          ],\n        \"impact\": \"Privilege escalation to root\",\n        \"attack_vectors\": [\n            \"sudoedit -s and a command-line argument that ends with a single backslash character.\"\n        ],\n         \"required_attacker_capabilities\": [\n           \"Local user\"\n        ]\n      },\n      {\n         \"content_source\": \"tools.cisco.com_fdff3844_20250108_124805.html\",\n           \"root_cause\": \"Improper command line parameter parsing, specifically in the `sudoedit` command, which can lead to a heap-based buffer overflow.\",\n           \"weaknesses\": [\n             \"Heap-based buffer overflow\",\n             \"Improper command-line parameter parsing\"\n            ],\n         \"impact\": \"An authenticated, local attacker can execute commands or binaries with root privileges.\",\n         \"attack_vectors\": [\n            \"Access a Unix shell on an affected device and then invoke the sudoedit command with crafted parameters or by executing a binary exploit.\"\n           ],\n            \"required_attacker_capabilities\": [\n           \"Authenticated local user access\"\n         ]\n    },\n{\n    \"content_source\": \"www.openwall.com_068cc409_20250108_124757.html\",\n        \"root_cause\": \"A heap-based buffer overflow in `sudo` occurs due to how the utility processes command-line arguments, particularly when an argument ends with a backslash character. The vulnerability occurs in the `set_cmnd()` function.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow\"\n        ],\n        \"impact\": \"A local user can escalate privileges to root.\",\n         \"attack_vectors\": [\n           \"A specially crafted command-line argument used with `sudoedit -s` where a single backslash is the last character before the null terminator\"\n         ],\n        \"required_attacker_capabilities\": [\n            \"Local unprivileged user access.\"\n          ]\n    },\n    {\n        \"content_source\": \"www.openwall.com_a53720b4_20250108_124758.html\",\n       \"root_cause\": \"The glibc's __vsyslog_internal() function has a heap-based buffer overflow due to improper handling of the program name (argv[0] or openlog() ident argument) length.\",\n        \"weaknesses\": [\n            \"Heap-based buffer overflow.\",\n            \"Improper handling of long program name strings in syslog.\"\n          ],\n         \"impact\": \"Local Privilege Escalation, from any unprivileged user to full root.\",\n         \"attack_vectors\": [\n            \"Local user access\"\n          ],\n        \"required_attacker_capabilities\": [\n          \"Local, unprivileged user access\"\n         ]\n      },\n      {\n        \"content_source\": \"packetstormsecurity.com_4186acd1_20250108_124755.html\",\n          \"root_cause\": \"NOINFO\",\n          \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n          \"required_attacker_capabilities\": \"NOINFO\"\n      },\n        {\n        \"content_source\": \"packetstormsecurity.com_0f0d5e18_20250108_124751.html\",\n        \"root_cause\": \"NOINFO\",\n          \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n          \"required_attacker_capabilities\": \"NOINFO\"\n      },\n          {\n        \"content_source\": \"packetstormsecurity.com_4b97e923_20250108_124753.html\",\n          \"root_cause\": \"NOINFO\",\n        \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n         \"required_attacker_capabilities\": \"NOINFO\"\n       },\n     {\n        \"content_source\": \"kc.mcafee.com_8fe1da70_20250108_124759.html\",\n        \"root_cause\": \"NOINFO\",\n        \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n         \"required_attacker_capabilities\": \"NOINFO\"\n       },\n     {\n        \"content_source\": \"lists.fedoraproject.org_71b49072_20250108_124800.html\",\n           \"root_cause\": \"NOINFO\",\n        \"weaknesses\": \"NOINFO\",\n         \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n         \"required_attacker_capabilities\": \"NOINFO\"\n      },\n      {\n        \"content_source\": \"www.openwall.com_a436ebfc_20250108_124758.html\",\n        \"root_cause\": \"A heap-based buffer overflow in Sudo, specifically when the name[] field of a heap-based struct nss_module is overwritten, combined with an overwrite of def_timestampdir.\",\n         \"weaknesses\": [\n          \"Heap-based buffer overflow.\",\n            \"Improper overwrite of function pointers\"\n          ],\n        \"impact\": \"Privilege escalation to root, arbitrary code execution.\",\n         \"attack_vectors\": [\n           \"Local access via command line arguments, leveraging how Sudo uses setlocale() and handles directory creation. Also includes ability to execute arbitrary shared library loaded by Sudo with root privileges when nss_module struct is corrupted.\"\n         ],\n          \"required_attacker_capabilities\": [\n              \"Local User access to system\"\n          ]\n      },\n      {\n        \"content_source\": \"www.openwall.com_d2a06585_20250108_124757.html\",\n          \"root_cause\": \"A heap-based buffer overflow in the GNU C Library's __vsyslog_internal() function, which is called by both syslog() and vsyslog().  The vulnerability is due to how the function handles program names that are longer than 1024 bytes.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow in syslog function\",\n          \"Insecure handling of program name length\"\n        ],\n        \"impact\": \"Local Privilege Escalation, from any unprivileged user to full root. Allows attacker to overwrite arbitrary memory on the heap by controlling the program's argv[0] and environment variables.\",\n         \"attack_vectors\": [\n            \"Exploited using the `su` command with a long program name for argv[0] that is larger than 1024 bytes combined with a crafted whitelist option.\",\n           \"Local access required\"\n        ],\n           \"required_attacker_capabilities\": [\n           \"Local user access\"\n          ]\n      },\n       {\n         \"content_source\": \"support.apple.com_8479d2e8_20250108_124803.html\",\n           \"root_cause\": \"Vulnerability exists in sudo where the issue is addressed by updating to sudo version 1.9.5p2.\",\n           \"weaknesses\": [\n             \"Buffer overflow\"\n           ],\n           \"impact\": \"A local attacker may be able to elevate their privileges\",\n        \"attack_vectors\": [\n            \"Local access.\"\n         ],\n            \"required_attacker_capabilities\": [\n              \"Local user access.\"\n            ]\n        }\n\n    ]\n  }\n}\n```\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | Class | Discouraged | alternate_terms | 0.800 |\n| 2 | 190 | Integer Overflow or Wraparound | Base | Allowed | alternate_terms | 0.800 |\n| 3 | 193 | Off-by-one Error | Base | Allowed | sparse | 0.403 |\n| 4 | 122 | Heap-based Buffer Overflow | Variant | Allowed | sparse | 0.265 |\n| 5 | 1284 | Improper Validation of Specified Quantity in Input | Base | Allowed | sparse | 0.247 |\n| 6 | 250 | Execution with Unnecessary Privileges | Base | Allowed | dense | 0.522 |\n| 7 | 128 | Wrap-around Error | Base | Allowed | graph | 0.003 |\n| 8 | 131 | Incorrect Calculation of Buffer Size | Base | Allowed | sparse | 0.246 |\n| 9 | 126 | Buffer Over-read | Variant | Allowed | sparse | 0.245 |\n| 10 | 121 | Stack-based Buffer Overflow | Variant | Allowed | sparse | 0.241 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n**Abstraction:** Class\n**Status:** Stable\n\n### Description\nThe product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nBuffer Overflow: This term has many different meanings to different audiences. From a CWE mapping perspective, this term should be avoided where possible. Some researchers, developers, and tools intend for it to mean \"write past the end of a buffer,\" whereas others use the same term to mean \"any read or write outside the boundaries of a buffer, whether before the beginning of the buffer or after the end of the buffer.\" Others could mean \"any action after the end of a buffer, whether it is a read or write.\" Since the term is commonly used for exploitation and for vulnerabilities, it further confuses things.\nbuffer overrun: Some prominent vendors and researchers use the term \"buffer overrun,\" but most people use \"buffer overflow.\" See the alternate term for \"buffer overflow\" for context.\nmemory safety: Generally used for techniques that avoid weaknesses related to memory access, such as those identified by CWE-119 and its descendants. However, the term is not formal, and there is likely disagreement between practitioners as to which weaknesses are implicitly covered by the \"memory safety\" term.\n\n### Relationships\nChildOf -> CWE-118\nChildOf -> CWE-20\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.\n**Comments:** Look at CWE-119's children and consider mapping to CWEs such as CWE-787: Out-of-bounds Write, CWE-125: Out-of-bounds Read, or others.\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Applicable Platform]** \n\nIt is possible in any programming languages without memory management support to attempt an operation outside of the bounds of a memory buffer, but the consequences will vary widely depending on the language, platform, and chip architecture.\n\n\n\n\n### Observed Examples\n- **CVE-2021-22991:** Incorrect URI normalization in application traffic product leads to buffer overflow, as exploited in the wild per CISA KEV.\n- **CVE-2020-29557:** Buffer overflow in Wi-Fi router web interface, as exploited in the wild per CISA KEV.\n- **CVE-2009-2550:** Classic stack-based buffer overflow in media player using a long entry in a playlist\n\n\n\n\n## CWE-190: Integer Overflow or Wraparound\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nOverflow: The terms \"overflow\" and \"wraparound\" are used interchangeably by some people, but they can have more precise distinctions by others. See Terminology Notes.\nWraparound: The terms \"overflow\" and \"wraparound\" are used interchangeably by some people, but they can have more precise distinctions by others. See Terminology Notes.\nwrap, wrap-around, wrap around: Alternate spellings of \"wraparound\"\n\n### Relationships\nChildOf -> CWE-682\nChildOf -> CWE-682\nChildOf -> CWE-20\nCanPrecede -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Be careful of terminology problems with \"overflow,\" \"underflow,\" and \"wraparound\" - see Terminology Notes. Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n**Suggested Alternatives:**\n- CWE-191: Integer Underflow (Wrap or Wraparound). Consider CWE-191 when the result is less than the minimum value that can be represented (sometimes called \"underflows\").\n\n\n### Additional Notes\n**[Relationship]** Integer overflows can be primary to buffer overflows when they cause less memory to be allocated than expected.\n\n**[Terminology]** \n\n\"Integer overflow\" is sometimes used to cover several types of errors, including signedness errors, or buffer overflows that involve manipulation of integer data types instead of characters. Part of the confusion results from the fact that 0xffffffff is -1 in a signed context. Other confusion also arises because of the role that integer overflows have in chains.\n\n\nA \"wraparound\" is a well-defined, standard behavior that follows specific rules for how to handle situations when the intended numeric value is too large or too small to be represented, as specified in standards such as C11.\n\n\n\"Overflow\" is sometimes conflated with \"wraparound\" but typically indicates a non-standard or undefined behavior.\n\n\nThe \"overflow\" term is sometimes used to indicate cases where either the maximum or the minimum is exceeded, but others might only use \"overflow\" to indicate exceeding the maximum while using \"underflow\" for exceeding the minimum.\n\n\nSome people use \"overflow\" to mean any value outside the representable range - whether greater than the maximum, or less than the minimum - but CWE uses \"underflow\" for cases in which the intended result is less than the minimum.\n\n\nSee [REF-1440] for additional explanation of the ambiguity of terminology.\n\n\n**[Other]** While there may be circumstances in which the logic intentionally relies on wrapping - such as with modular arithmetic in timers or counters - it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs.\n\n\n\n### Observed Examples\n- **CVE-2021-43537:** Chain: in a web browser, an unsigned 64-bit integer is forcibly cast to a 32-bit integer (CWE-681) and potentially leading to an integer overflow (CWE-190). If an integer overflow occurs, this can cause heap memory corruption (CWE-122)\n- **CVE-2022-21668:** Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).\n- **CVE-2022-0545:** Chain: 3D renderer has an integer overflow (CWE-190) leading to write-what-where condition (CWE-123) using a crafted image.\n\n\n\n\n## CWE-193: Off-by-one Error\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nA product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\noff-by-five: An \"off-by-five\" error was reported for sudo in 2002 (CVE-2002-0184), but that is more like a \"length calculation\" error.\n\n### Relationships\nChildOf -> CWE-682\nChildOf -> CWE-682\nCanPrecede -> CWE-617\nCanPrecede -> CWE-170\nCanPrecede -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This is not always a buffer overflow. For example, an off-by-one error could be a factor in a partial comparison, a read from the wrong memory location, an incorrect conditional, etc.\n\n\n\n### Observed Examples\n- **CVE-2003-0252:** Off-by-one error allows remote attackers to cause a denial of service and possibly execute arbitrary code via requests that do not contain newlines.\n- **CVE-2001-1391:** Off-by-one vulnerability in driver allows users to modify kernel memory.\n- **CVE-2002-0083:** Off-by-one error allows local users or remote malicious servers to gain privileges.\n\n\n\n\n## CWE-122: Heap-based Buffer Overflow\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nA heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-788\nChildOf -> CWE-787\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Heap-based buffer overflows are usually just as dangerous as stack-based buffer overflows.\n\n\n\n### Observed Examples\n- **CVE-2021-43537:** Chain: in a web browser, an unsigned 64-bit integer is forcibly cast to a 32-bit integer (CWE-681) and potentially leading to an integer overflow (CWE-190). If an integer overflow occurs, this can cause heap memory corruption (CWE-122)\n- **CVE-2007-4268:** Chain: integer signedness error (CWE-195) passes signed comparison, leading to heap overflow (CWE-122)\n- **CVE-2009-2523:** Chain: product does not handle when an input string is not NULL terminated (CWE-170), leading to buffer over-read (CWE-125) or heap-based buffer overflow (CWE-122).\n\n\n\n\n## CWE-1284: Improper Validation of Specified Quantity in Input\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.\n\n### Extended Description\n\n\nSpecified quantities include size, length, frequency, price, rate, number of operations, time, and others. Code may rely on specified quantities to allocate resources, perform calculations, control iteration, etc. When the quantity is not properly validated, then attackers can specify malicious quantities to cause excessive resource allocation, trigger unexpected failures, enable buffer overflows, etc.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-20\nChildOf -> CWE-20\nCanPrecede -> CWE-789\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** This entry is still under development and will continue to see updates and content improvements.\n\n\n\n### Observed Examples\n- **CVE-2022-21668:** Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).\n- **CVE-2008-1440:** lack of validation of length field leads to infinite loop\n- **CVE-2008-2374:** lack of validation of string length fields allows memory consumption or buffer over-read\n\n\n\n\n## CWE-250: Execution with Unnecessary Privileges\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.\n\n### Extended Description\n\n\nNew weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges.\n\n\nPrivilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-269\nChildOf -> CWE-657\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** There is a close association with CWE-653 (Insufficient Separation of Privileges). CWE-653 is about providing separate components for each privilege; CWE-250 is about ensuring that each component has the least amount of privileges possible.\n\n**[Maintenance]** CWE-271, CWE-272, and CWE-250 are all closely related and possibly overlapping. CWE-271 is probably better suited as a category. Both CWE-272 and CWE-250 are in active use by the community. The \"least privilege\" phrase has multiple interpretations.\n\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2007-4217:** FTP client program on a certain OS runs with setuid privileges and has a buffer overflow. Most clients do not need extra privileges, so an overflow is not a vulnerability for those clients.\n- **CVE-2008-1877:** Program runs with privileges and calls another program with the same privileges, which allows read of arbitrary files.\n- **CVE-2007-5159:** OS incorrectly installs a program with setuid privileges, allowing users to gain privileges.\n\n\n\n\n## CWE-128: Wrap-around Error\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nWrap around errors occur whenever a value is incremented past the maximum value for its type and therefore \"wraps around\" to a very small, negative, or undefined value.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-682\nCanPrecede -> CWE-119\nPeerOf -> CWE-190\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** The relationship between overflow and wrap-around needs to be examined more closely, since several entries (including CWE-190) are closely related.\n\n\n\n\n\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-682\nChildOf -> CWE-682\nChildOf -> CWE-682\nChildOf -> CWE-682\nCanPrecede -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** \n\nThis is a broad category. Some examples include:\n\n\n  - simple math errors,\n\n  - incorrectly updating parallel counters,\n\n  - not accounting for size differences when \"transforming\" one input to another format (e.g. URL canonicalization or other transformation that can generate a result that's larger than the original input, i.e. \"expansion\").\n\nThis level of detail is rarely available in public reports, so it is difficult to find good examples.\n\n**[Maintenance]** \n\nThis weakness may be a composite or a chain. It also may contain layering or perspective differences.\n\n\nThis issue may be associated with many different types of incorrect calculations (CWE-682), although the integer overflow (CWE-190) is probably the most prevalent. This can be primary to resource consumption problems (CWE-400), including uncontrolled memory allocation (CWE-789). However, its relationship with out-of-bounds buffer access (CWE-119) must also be considered.\n\n\n\n\n### Observed Examples\n- **CVE-2020-17087:** Chain: integer truncation (CWE-197) causes small buffer allocation (CWE-131) leading to out-of-bounds write (CWE-787) in kernel pool, as exploited in the wild per CISA KEV.\n- **CVE-2004-1363:** substitution overflow: buffer overflow using environment variables that are expanded after the length check is performed\n- **CVE-2004-0747:** substitution overflow: buffer overflow using expansion of environment variables\n\n\n\n\n## CWE-126: Buffer Over-read\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.\n\n### Extended Description\nThis typically occurs when the pointer or its index is incremented to a position beyond the bounds of the buffer or when pointer arithmetic results in a position outside of the valid memory location to name a few. This may result in exposure of sensitive information or possibly a crash.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-125\nChildOf -> CWE-788\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** These problems may be resultant from missing sentinel values (CWE-463) or trusting a user-influenced input length variable.\n\n\n\n### Observed Examples\n- **CVE-2022-1733:** Text editor has out-of-bounds read past end of line while indenting C code\n- **CVE-2014-0160:** Chain: \"Heartbleed\" bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.\n- **CVE-2009-2523:** Chain: product does not handle when an input string is not NULL terminated, leading to buffer over-read or heap-based buffer overflow.\n\n\n\n\n## CWE-121: Stack-based Buffer Overflow\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nStack Overflow: \"Stack Overflow\" is often used to mean the same thing as stack-based buffer overflow, however it is also used on occasion to mean stack exhaustion, usually a result from an excessively recursive function call. Due to the ambiguity of the term, use of stack overflow to describe either circumstance is discouraged.\n\n### Relationships\nChildOf -> CWE-788\nChildOf -> CWE-787\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** Stack-based buffer overflows can instantiate in return address overwrites, stack pointer overwrites or frame pointer overwrites. They can also be considered function pointer overwrites, array indexer overwrites or write-what-where condition, etc.\n\n\n\n### Observed Examples\n- **CVE-2021-35395:** Stack-based buffer overflows in SFK for wifi chipset used for IoT/embedded devices, as exploited in the wild per CISA KEV.\n\n Consider specifically these CWEs: CWE-131 CWE-190 CWE-805 CWE-124 CWE-197 CWE-193 CWE-1284 CWE-191 CWE-122 CWE-125",
  "keyphrases": {
    "original_query": "## Vulnerability Description\nSudo before 1.9.5p2 contains an **off-by-one error** that can result in a **heap-based buffer overflow**, which allows privilege escalation to root via \"sudoedit -s\" and a command-line argument that ends with a single backslash character.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **off-by-one error**\n- **weakness:** **heap-based buffer overflow**\n- **impact:** privilege escalation to root\n- **vector:** command-line argument ending with single backslash\n- **product:** Sudo\n- **version:** before 1.9.5p2\n\n## CVE Reference Links Content Summary\n```json\n{\n  \"guidelines\": \"1. First verify if the content relates to the CVE specified based on the official description\\n2. If the content does not relate to this CVE, respond with \\\"UNRELATED\\\"\\n3. If no useful vulnerability information is found, respond with \\\"NOINFO\\\" \\n4. For relevant content, extract:\\n   - Root cause of vulnerability\\n   - Weaknesses/vulnerabilities present\\n   - Impact of exploitation\\n   - Attack vectors\\n   - Required attacker capabilities/position\\n\\nAdditional instructions:\\n- Preserve original technical details and descriptions\\n- Remove unrelated content\\n- Translate non-English content to English\\n- Note if the content provides more detail than the official CVE description\",\n  \"response\": {\n    \"CVE-2021-3156\": [\n      {\n        \"content_source\": \"www.kb.cert.org_ddfaa341_20250108_124807.html\",\n        \"root_cause\": \"A heap-based buffer overflow exists in the `set_cmd()` function of sudo.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow\"\n        ],\n        \"impact\": \"A local non-administrative attacker can elevate their privileges to execute commands with administrator privileges.\",\n        \"attack_vectors\": [\n          \"Local access to an affected machine\"\n        ],\n        \"required_attacker_capabilities\": [\n          \"Local access to an affected machine\"\n        ]\n      },\n      {\n        \"content_source\": \"github.com_97ef01f3_20250108_153957.html\",\n         \"root_cause\": \"NOINFO\",\n        \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n        \"required_attacker_capabilities\": \"NOINFO\"\n      },\n      {\n        \"content_source\": \"www.openwall.com_979606b3_20250108_124757.html\",\n        \"root_cause\": \"A heap-based buffer overflow vulnerability exists in the `set_cmd()` function in sudo where if a command-line argument ends with a single backslash character, an out-of-bounds memory copy occurs due to improper unescaping.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow due to incorrect unescaping of a backslash character in command-line arguments.\"\n        ],\n        \"impact\": \"Any local user can gain root privileges on a vulnerable host with a default sudo configuration. Allows attackers to control the size of the user_args buffer that they overflow and independently control the size and content of the overflow.\",\n        \"attack_vectors\": [\n          \"Exploitable via the `sudoedit -s` command with a command-line argument ending in a backslash character.\"\n        ],\n         \"required_attacker_capabilities\": [\n          \"Local user (normal and system users, sudoers and non-sudoers).\"\n        ],\n         \"additional_details\": \"This vulnerability is present in legacy versions from 1.8.2 to 1.8.31p2 and all stable versions from 1.9.0 to 1.9.5p1. Exploit techniques include overwriting struct sudo_hook_entry to redirect code execution, overwriting heap-based struct nss_module name[], or overwriting def_timestampdir with an arbitrary symlink.\"\n      },\n     {\n        \"content_source\": \"sec.cloudapps.cisco.com_fee78a22_20250108_153952.html\",\n        \"root_cause\": \"Improper parsing of command line parameters in Sudo may result in a heap-based buffer overflow. Specifically, crafted parameters passed to sudoedit can cause a heap-based buffer overflow.\",\n        \"weaknesses\": [\n          \"Improper parsing of command line parameters resulting in a heap-based buffer overflow\"\n        ],\n        \"impact\": \"An authenticated, local attacker can execute commands or binaries with root privileges.\",\n        \"attack_vectors\": [\n          \"Accessing a Unix shell on an affected device and invoking the `sudoedit` command with crafted parameters or by executing a binary exploit.\"\n        ],\n         \"required_attacker_capabilities\": [\n           \"An authenticated local attacker capable of accessing a Unix shell on an affected device\"\n        ]\n      },\n   {\n        \"content_source\": \"github.com_f0514a42_20250108_153956.html\",\n         \"root_cause\": \"NOINFO\",\n        \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n        \"required_attacker_capabilities\": \"NOINFO\"\n      },\n      {\n        \"content_source\": \"www.debian.org_9de40279_20250108_124800.html\",\n        \"root_cause\": \"A heap-based buffer overflow vulnerability was found in sudo, a program designed to provide limited super user privileges to specific users.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow\"\n        ],\n         \"impact\": \"Local users can exploit this flaw for root privilege escalation.\",\n        \"attack_vectors\": [\n            \"Local users (sudoers and non-sudoers)\"\n          ],\n        \"required_attacker_capabilities\": [\n            \"Local user access\"\n          ]\n      },\n        {\n        \"content_source\": \"security.gentoo.org_08e70803_20250108_124802.html\",\n        \"root_cause\": \"A heap-based buffer overflow vulnerability exists in sudo.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow.\"\n        ],\n        \"impact\": \"Local users can gain unauthorized privileges on the system.\",\n        \"attack_vectors\": [\n          \"Local\"\n        ],\n          \"required_attacker_capabilities\": [\n             \"Local user access\"\n          ]\n      },\n      {\n        \"content_source\": \"tools.cisco.com_fdff3844_20250108_124805.html\",\n       \"root_cause\": \"Improper parsing of command line parameters in Sudo may result in a heap-based buffer overflow. Specifically, crafted parameters passed to sudoedit can cause a heap-based buffer overflow.\",\n        \"weaknesses\": [\n          \"Improper parsing of command line parameters resulting in a heap-based buffer overflow\"\n        ],\n        \"impact\": \"An authenticated, local attacker can execute commands or binaries with root privileges.\",\n        \"attack_vectors\": [\n          \"Accessing a Unix shell on an affected device and invoking the `sudoedit` command with crafted parameters or by executing a binary exploit.\"\n        ],\n          \"required_attacker_capabilities\": [\n           \"An authenticated local attacker capable of accessing a Unix shell on an affected device\"\n        ]\n      },\n      {\n        \"content_source\": \"www.openwall.com_67a199a4_20250108_124758.html\",\n         \"root_cause\": \"Out-of-bounds read/write vulnerability during argument unescaping in `set_cmnd()` in sudo, specifically when a command-line argument ends with a single backslash character.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow due to improper unescaping of backslash characters in command line arguments\"\n        ],\n        \"impact\": \"Local attackers can achieve privilege escalation and execute code as root.\",\n        \"attack_vectors\": [\n          \"The vulnerability can be exploited by running sudoedit with a specially crafted command-line argument that ends with a single backslash character.\"\n        ],\n         \"required_attacker_capabilities\": [\n           \"Requires local user access, without needing sudoers permissions or the user password.\"\n         ]\n      },\n      {\n        \"content_source\": \"www.synology.com_cd476a8e_20250108_124818.html\",\n        \"root_cause\": \"Heap-based buffer overflow when processing command line arguments.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow\"\n        ],\n          \"impact\": \"Local users can conduct privilege escalation attacks.\",\n         \"attack_vectors\": [\n           \"Local access to a susceptible system\"\n        ],\n        \"required_attacker_capabilities\": [\n           \"Local access\"\n        ]\n     },\n     {\n        \"content_source\": \"seclists.org_0b3cd48b_20250108_124756.html\",\n        \"root_cause\": \"A heap-based buffer overflow exists in sudo due to improper handling of a backslash character at the end of a command-line argument during parsing.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow.\"\n        ],\n        \"impact\": \"Any local user can gain root privileges on a vulnerable host with a default sudo configuration.\",\n         \"attack_vectors\": [\n            \"Exploitable when sudo is executed in shell mode using -s or -i option with a command-line argument that ends with a single backslash character.\"\n        ],\n        \"required_attacker_capabilities\": [\n            \"A local user, including non-sudo users and non-administrative users.\"\n          ]\n     },\n      {\n        \"content_source\": \"ubuntu.com_bebfc6e2_20250108_153945.html\",\n       \"root_cause\": \"An off-by-one error in Sudo's parsing of command line parameters, leading to a heap-based buffer overflow.\",\n        \"weaknesses\": [\n           \"Off-by-one error resulting in heap-based buffer overflow.\"\n        ],\n        \"impact\": \"Privilege escalation to root.\",\n        \"attack_vectors\": [\n          \"`sudoedit -s` with a command-line argument ending with a single backslash character.\"\n        ],\n        \"required_attacker_capabilities\": [\n             \"Local access\"\n          ]\n      },\n    {\n        \"content_source\": \"www.openwall.com_8b0d7e67_20250108_124758.html\",\n         \"root_cause\": \"A minor bug in sudo where the NO_ROOT_MAILER flag which was meant to harden sudo and avoid using mailer was broken.\",\n          \"weaknesses\": [\n          \"Broken hardening option (NO_ROOT_MAILER) in sudo that eases exploitation of the heap overflow.\"\n        ],\n        \"impact\": \"Makes exploit easier by allowing for more direct control of heap memory layout.\",\n        \"attack_vectors\": [\n            \"Local access with an exploit for CVE-2021-3156.\"\n          ],\n          \"required_attacker_capabilities\": [\n            \"Local user with sudo access\"\n          ],\n         \"additional_details\": \" This bug is used in combination with the Baron Samedit heap overflow. With NO_ROOT_MAILER working, the exploit is ~156 lines of code, whereas without it, the exploit is ~43 lines long. This highlights how the broken hardening mechanism increases exploit complexity\"\n      },\n        {\n        \"content_source\": \"blog.qualys.com_e270e781_20250108_153946.html\",\n        \"root_cause\": \"Heap overflow vulnerability in the `set_cmnd()` function in Sudo due to incorrect parsing of command line arguments. Specifically, if a command-line argument ends with a single backslash character, `set_cmnd()` performs an out-of-bounds copy to a heap buffer.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow\",\n           \"Improper argument handling\"\n        ],\n        \"impact\": \"Any unprivileged local user can gain root privileges on a vulnerable host. This is due to being able to control the size of the user_args buffer being overflowed and size and content of the overflow itself.\",\n        \"attack_vectors\": [\n            \"`sudoedit -s` with a command-line argument ending with a single backslash character.\"\n          ],\n        \"required_attacker_capabilities\": [\n           \"Any local user (normal users and system users, sudoers and non-sudoers).\"\n        ],\n         \"additional_details\": \"Vulnerability introduced in July 2011, and affects versions 1.8.2 to 1.8.31p2 and 1.9.0 to 1.9.5p1. Three exploits were developed that obtained full root privileges on Ubuntu 20.04, Debian 10, and Fedora 33.\"\n    },\n    {\n        \"content_source\": \"sec.cloudapps.cisco.com_89db7c50_20250108_153953.html\",\n        \"root_cause\": \"Improper parsing of command line parameters in Sudo, resulting in a heap-based buffer overflow.\",\n        \"weaknesses\": [\n            \"Improper command-line parameter parsing\",\n            \"Heap-based buffer overflow.\"\n        ],\n        \"impact\": \"An authenticated local attacker may execute commands or binaries with root privileges.\",\n         \"attack_vectors\": [\n            \"Accessing a Unix shell on an affected device and then invoking the `sudoedit` command with crafted parameters or by executing a binary exploit.\"\n        ],\n           \"required_attacker_capabilities\": [\n            \"An authenticated local attacker, with access to a Unix shell on an affected device\"\n          ]\n      },\n      {\n        \"content_source\": \"www.openwall.com_bc3f8cce_20250108_124757.html\",\n         \"root_cause\": \"Heap-based buffer overflow in Sudo's set_cmnd() function when handling arguments ending with a backslash. Specifically, during the unescaping of command line arguments in sudoedit.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow due to improper unescaping.\"\n        ],\n        \"impact\": \"Privilege escalation to root\",\n        \"attack_vectors\": [\n             \"The vulnerability is triggered by using sudoedit with the `-s` option, followed by an argument ending with a single backslash character.\"\n           ],\n          \"required_attacker_capabilities\": [\n            \"No specific privilege requirements, any local user can exploit this.\"\n        ]\n      },\n      {\n        \"content_source\": \"www.suse.com_53fb7cb8_20250108_153947.html\",\n       \"root_cause\": \"Off-by-one error in Sudo before 1.9.5p2 can result in a heap-based buffer overflow.\",\n         \"weaknesses\": [\n             \"Off-by-one error leading to heap-based buffer overflow\"\n          ],\n        \"impact\": \"Privilege escalation to root\",\n        \"attack_vectors\": [\n            \"sudoedit -s and a command-line argument that ends with a single backslash character.\"\n        ],\n         \"required_attacker_capabilities\": [\n           \"Local user\"\n        ]\n      },\n      {\n         \"content_source\": \"tools.cisco.com_fdff3844_20250108_124805.html\",\n           \"root_cause\": \"Improper command line parameter parsing, specifically in the `sudoedit` command, which can lead to a heap-based buffer overflow.\",\n           \"weaknesses\": [\n             \"Heap-based buffer overflow\",\n             \"Improper command-line parameter parsing\"\n            ],\n         \"impact\": \"An authenticated, local attacker can execute commands or binaries with root privileges.\",\n         \"attack_vectors\": [\n            \"Access a Unix shell on an affected device and then invoke the sudoedit command with crafted parameters or by executing a binary exploit.\"\n           ],\n            \"required_attacker_capabilities\": [\n           \"Authenticated local user access\"\n         ]\n    },\n{\n    \"content_source\": \"www.openwall.com_068cc409_20250108_124757.html\",\n        \"root_cause\": \"A heap-based buffer overflow in `sudo` occurs due to how the utility processes command-line arguments, particularly when an argument ends with a backslash character. The vulnerability occurs in the `set_cmnd()` function.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow\"\n        ],\n        \"impact\": \"A local user can escalate privileges to root.\",\n         \"attack_vectors\": [\n           \"A specially crafted command-line argument used with `sudoedit -s` where a single backslash is the last character before the null terminator\"\n         ],\n        \"required_attacker_capabilities\": [\n            \"Local unprivileged user access.\"\n          ]\n    },\n    {\n        \"content_source\": \"www.openwall.com_a53720b4_20250108_124758.html\",\n       \"root_cause\": \"The glibc's __vsyslog_internal() function has a heap-based buffer overflow due to improper handling of the program name (argv[0] or openlog() ident argument) length.\",\n        \"weaknesses\": [\n            \"Heap-based buffer overflow.\",\n            \"Improper handling of long program name strings in syslog.\"\n          ],\n         \"impact\": \"Local Privilege Escalation, from any unprivileged user to full root.\",\n         \"attack_vectors\": [\n            \"Local user access\"\n          ],\n        \"required_attacker_capabilities\": [\n          \"Local, unprivileged user access\"\n         ]\n      },\n      {\n        \"content_source\": \"packetstormsecurity.com_4186acd1_20250108_124755.html\",\n          \"root_cause\": \"NOINFO\",\n          \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n          \"required_attacker_capabilities\": \"NOINFO\"\n      },\n        {\n        \"content_source\": \"packetstormsecurity.com_0f0d5e18_20250108_124751.html\",\n        \"root_cause\": \"NOINFO\",\n          \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n          \"required_attacker_capabilities\": \"NOINFO\"\n      },\n          {\n        \"content_source\": \"packetstormsecurity.com_4b97e923_20250108_124753.html\",\n          \"root_cause\": \"NOINFO\",\n        \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n         \"required_attacker_capabilities\": \"NOINFO\"\n       },\n     {\n        \"content_source\": \"kc.mcafee.com_8fe1da70_20250108_124759.html\",\n        \"root_cause\": \"NOINFO\",\n        \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n         \"required_attacker_capabilities\": \"NOINFO\"\n       },\n     {\n        \"content_source\": \"lists.fedoraproject.org_71b49072_20250108_124800.html\",\n           \"root_cause\": \"NOINFO\",\n        \"weaknesses\": \"NOINFO\",\n         \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n         \"required_attacker_capabilities\": \"NOINFO\"\n      },\n      {\n        \"content_source\": \"www.openwall.com_a436ebfc_20250108_124758.html\",\n        \"root_cause\": \"A heap-based buffer overflow in Sudo, specifically when the name[] field of a heap-based struct nss_module is overwritten, combined with an overwrite of def_timestampdir.\",\n         \"weaknesses\": [\n          \"Heap-based buffer overflow.\",\n            \"Improper overwrite of function pointers\"\n          ],\n        \"impact\": \"Privilege escalation to root, arbitrary code execution.\",\n         \"attack_vectors\": [\n           \"Local access via command line arguments, leveraging how Sudo uses setlocale() and handles directory creation. Also includes ability to execute arbitrary shared library loaded by Sudo with root privileges when nss_module struct is corrupted.\"\n         ],\n          \"required_attacker_capabilities\": [\n              \"Local User access to system\"\n          ]\n      },\n      {\n        \"content_source\": \"www.openwall.com_d2a06585_20250108_124757.html\",\n          \"root_cause\": \"A heap-based buffer overflow in the GNU C Library's __vsyslog_internal() function, which is called by both syslog() and vsyslog().  The vulnerability is due to how the function handles program names that are longer than 1024 bytes.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow in syslog function\",\n          \"Insecure handling of program name length\"\n        ],\n        \"impact\": \"Local Privilege Escalation, from any unprivileged user to full root. Allows attacker to overwrite arbitrary memory on the heap by controlling the program's argv[0] and environment variables.\",\n         \"attack_vectors\": [\n            \"Exploited using the `su` command with a long program name for argv[0] that is larger than 1024 bytes combined with a crafted whitelist option.\",\n           \"Local access required\"\n        ],\n           \"required_attacker_capabilities\": [\n           \"Local user access\"\n          ]\n      },\n       {\n         \"content_source\": \"support.apple.com_8479d2e8_20250108_124803.html\",\n           \"root_cause\": \"Vulnerability exists in sudo where the issue is addressed by updating to sudo version 1.9.5p2.\",\n           \"weaknesses\": [\n             \"Buffer overflow\"\n           ],\n           \"impact\": \"A local attacker may be able to elevate their privileges\",\n        \"attack_vectors\": [\n            \"Local access.\"\n         ],\n            \"required_attacker_capabilities\": [\n              \"Local user access.\"\n            ]\n        }\n\n    ]\n  }\n}\n```\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | Class | Discouraged | alternate_terms | 0.800 |\n| 2 | 190 | Integer Overflow or Wraparound | Base | Allowed | alternate_terms | 0.800 |\n| 3 | 193 | Off-by-one Error | Base | Allowed | sparse | 0.403 |\n| 4 | 122 | Heap-based Buffer Overflow | Variant | Allowed | sparse | 0.265 |\n| 5 | 1284 | Improper Validation of Specified Quantity in Input | Base | Allowed | sparse | 0.247 |\n| 6 | 250 | Execution with Unnecessary Privileges | Base | Allowed | dense | 0.522 |\n| 7 | 128 | Wrap-around Error | Base | Allowed | graph | 0.003 |\n| 8 | 131 | Incorrect Calculation of Buffer Size | Base | Allowed | sparse | 0.246 |\n| 9 | 126 | Buffer Over-read | Variant | Allowed | sparse | 0.245 |\n| 10 | 121 | Stack-based Buffer Overflow | Variant | Allowed | sparse | 0.241 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n**Abstraction:** Class\n**Status:** Stable\n\n### Description\nThe product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nBuffer Overflow: This term has many different meanings to different audiences. From a CWE mapping perspective, this term should be avoided where possible. Some researchers, developers, and tools intend for it to mean \"write past the end of a buffer,\" whereas others use the same term to mean \"any read or write outside the boundaries of a buffer, whether before the beginning of the buffer or after the end of the buffer.\" Others could mean \"any action after the end of a buffer, whether it is a read or write.\" Since the term is commonly used for exploitation and for vulnerabilities, it further confuses things.\nbuffer overrun: Some prominent vendors and researchers use the term \"buffer overrun,\" but most people use \"buffer overflow.\" See the alternate term for \"buffer overflow\" for context.\nmemory safety: Generally used for techniques that avoid weaknesses related to memory access, such as those identified by CWE-119 and its descendants. However, the term is not formal, and there is likely disagreement between practitioners as to which weaknesses are implicitly covered by the \"memory safety\" term.\n\n### Relationships\nChildOf -> CWE-118\nChildOf -> CWE-20\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.\n**Comments:** Look at CWE-119's children and consider mapping to CWEs such as CWE-787: Out-of-bounds Write, CWE-125: Out-of-bounds Read, or others.\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Applicable Platform]** \n\nIt is possible in any programming languages without memory management support to attempt an operation outside of the bounds of a memory buffer, but the consequences will vary widely depending on the language, platform, and chip architecture.\n\n\n\n\n### Observed Examples\n- **CVE-2021-22991:** Incorrect URI normalization in application traffic product leads to buffer overflow, as exploited in the wild per CISA KEV.\n- **CVE-2020-29557:** Buffer overflow in Wi-Fi router web interface, as exploited in the wild per CISA KEV.\n- **CVE-2009-2550:** Classic stack-based buffer overflow in media player using a long entry in a playlist\n\n\n\n\n## CWE-190: Integer Overflow or Wraparound\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nOverflow: The terms \"overflow\" and \"wraparound\" are used interchangeably by some people, but they can have more precise distinctions by others. See Terminology Notes.\nWraparound: The terms \"overflow\" and \"wraparound\" are used interchangeably by some people, but they can have more precise distinctions by others. See Terminology Notes.\nwrap, wrap-around, wrap around: Alternate spellings of \"wraparound\"\n\n### Relationships\nChildOf -> CWE-682\nChildOf -> CWE-682\nChildOf -> CWE-20\nCanPrecede -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Be careful of terminology problems with \"overflow,\" \"underflow,\" and \"wraparound\" - see Terminology Notes. Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n**Suggested Alternatives:**\n- CWE-191: Integer Underflow (Wrap or Wraparound). Consider CWE-191 when the result is less than the minimum value that can be represented (sometimes called \"underflows\").\n\n\n### Additional Notes\n**[Relationship]** Integer overflows can be primary to buffer overflows when they cause less memory to be allocated than expected.\n\n**[Terminology]** \n\n\"Integer overflow\" is sometimes used to cover several types of errors, including signedness errors, or buffer overflows that involve manipulation of integer data types instead of characters. Part of the confusion results from the fact that 0xffffffff is -1 in a signed context. Other confusion also arises because of the role that integer overflows have in chains.\n\n\nA \"wraparound\" is a well-defined, standard behavior that follows specific rules for how to handle situations when the intended numeric value is too large or too small to be represented, as specified in standards such as C11.\n\n\n\"Overflow\" is sometimes conflated with \"wraparound\" but typically indicates a non-standard or undefined behavior.\n\n\nThe \"overflow\" term is sometimes used to indicate cases where either the maximum or the minimum is exceeded, but others might only use \"overflow\" to indicate exceeding the maximum while using \"underflow\" for exceeding the minimum.\n\n\nSome people use \"overflow\" to mean any value outside the representable range - whether greater than the maximum, or less than the minimum - but CWE uses \"underflow\" for cases in which the intended result is less than the minimum.\n\n\nSee [REF-1440] for additional explanation of the ambiguity of terminology.\n\n\n**[Other]** While there may be circumstances in which the logic intentionally relies on wrapping - such as with modular arithmetic in timers or counters - it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs.\n\n\n\n### Observed Examples\n- **CVE-2021-43537:** Chain: in a web browser, an unsigned 64-bit integer is forcibly cast to a 32-bit integer (CWE-681) and potentially leading to an integer overflow (CWE-190). If an integer overflow occurs, this can cause heap memory corruption (CWE-122)\n- **CVE-2022-21668:** Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).\n- **CVE-2022-0545:** Chain: 3D renderer has an integer overflow (CWE-190) leading to write-what-where condition (CWE-123) using a crafted image.\n\n\n\n\n## CWE-193: Off-by-one Error\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nA product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\noff-by-five: An \"off-by-five\" error was reported for sudo in 2002 (CVE-2002-0184), but that is more like a \"length calculation\" error.\n\n### Relationships\nChildOf -> CWE-682\nChildOf -> CWE-682\nCanPrecede -> CWE-617\nCanPrecede -> CWE-170\nCanPrecede -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This is not always a buffer overflow. For example, an off-by-one error could be a factor in a partial comparison, a read from the wrong memory location, an incorrect conditional, etc.\n\n\n\n### Observed Examples\n- **CVE-2003-0252:** Off-by-one error allows remote attackers to cause a denial of service and possibly execute arbitrary code via requests that do not contain newlines.\n- **CVE-2001-1391:** Off-by-one vulnerability in driver allows users to modify kernel memory.\n- **CVE-2002-0083:** Off-by-one error allows local users or remote malicious servers to gain privileges.\n\n\n\n\n## CWE-122: Heap-based Buffer Overflow\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nA heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-788\nChildOf -> CWE-787\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Heap-based buffer overflows are usually just as dangerous as stack-based buffer overflows.\n\n\n\n### Observed Examples\n- **CVE-2021-43537:** Chain: in a web browser, an unsigned 64-bit integer is forcibly cast to a 32-bit integer (CWE-681) and potentially leading to an integer overflow (CWE-190). If an integer overflow occurs, this can cause heap memory corruption (CWE-122)\n- **CVE-2007-4268:** Chain: integer signedness error (CWE-195) passes signed comparison, leading to heap overflow (CWE-122)\n- **CVE-2009-2523:** Chain: product does not handle when an input string is not NULL terminated (CWE-170), leading to buffer over-read (CWE-125) or heap-based buffer overflow (CWE-122).\n\n\n\n\n## CWE-1284: Improper Validation of Specified Quantity in Input\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.\n\n### Extended Description\n\n\nSpecified quantities include size, length, frequency, price, rate, number of operations, time, and others. Code may rely on specified quantities to allocate resources, perform calculations, control iteration, etc. When the quantity is not properly validated, then attackers can specify malicious quantities to cause excessive resource allocation, trigger unexpected failures, enable buffer overflows, etc.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-20\nChildOf -> CWE-20\nCanPrecede -> CWE-789\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** This entry is still under development and will continue to see updates and content improvements.\n\n\n\n### Observed Examples\n- **CVE-2022-21668:** Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).\n- **CVE-2008-1440:** lack of validation of length field leads to infinite loop\n- **CVE-2008-2374:** lack of validation of string length fields allows memory consumption or buffer over-read\n\n\n\n\n## CWE-250: Execution with Unnecessary Privileges\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.\n\n### Extended Description\n\n\nNew weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges.\n\n\nPrivilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-269\nChildOf -> CWE-657\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** There is a close association with CWE-653 (Insufficient Separation of Privileges). CWE-653 is about providing separate components for each privilege; CWE-250 is about ensuring that each component has the least amount of privileges possible.\n\n**[Maintenance]** CWE-271, CWE-272, and CWE-250 are all closely related and possibly overlapping. CWE-271 is probably better suited as a category. Both CWE-272 and CWE-250 are in active use by the community. The \"least privilege\" phrase has multiple interpretations.\n\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2007-4217:** FTP client program on a certain OS runs with setuid privileges and has a buffer overflow. Most clients do not need extra privileges, so an overflow is not a vulnerability for those clients.\n- **CVE-2008-1877:** Program runs with privileges and calls another program with the same privileges, which allows read of arbitrary files.\n- **CVE-2007-5159:** OS incorrectly installs a program with setuid privileges, allowing users to gain privileges.\n\n\n\n\n## CWE-128: Wrap-around Error\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nWrap around errors occur whenever a value is incremented past the maximum value for its type and therefore \"wraps around\" to a very small, negative, or undefined value.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-682\nCanPrecede -> CWE-119\nPeerOf -> CWE-190\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** The relationship between overflow and wrap-around needs to be examined more closely, since several entries (including CWE-190) are closely related.\n\n\n\n\n\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-682\nChildOf -> CWE-682\nChildOf -> CWE-682\nChildOf -> CWE-682\nCanPrecede -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** \n\nThis is a broad category. Some examples include:\n\n\n  - simple math errors,\n\n  - incorrectly updating parallel counters,\n\n  - not accounting for size differences when \"transforming\" one input to another format (e.g. URL canonicalization or other transformation that can generate a result that's larger than the original input, i.e. \"expansion\").\n\nThis level of detail is rarely available in public reports, so it is difficult to find good examples.\n\n**[Maintenance]** \n\nThis weakness may be a composite or a chain. It also may contain layering or perspective differences.\n\n\nThis issue may be associated with many different types of incorrect calculations (CWE-682), although the integer overflow (CWE-190) is probably the most prevalent. This can be primary to resource consumption problems (CWE-400), including uncontrolled memory allocation (CWE-789). However, its relationship with out-of-bounds buffer access (CWE-119) must also be considered.\n\n\n\n\n### Observed Examples\n- **CVE-2020-17087:** Chain: integer truncation (CWE-197) causes small buffer allocation (CWE-131) leading to out-of-bounds write (CWE-787) in kernel pool, as exploited in the wild per CISA KEV.\n- **CVE-2004-1363:** substitution overflow: buffer overflow using environment variables that are expanded after the length check is performed\n- **CVE-2004-0747:** substitution overflow: buffer overflow using expansion of environment variables\n\n\n\n\n## CWE-126: Buffer Over-read\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.\n\n### Extended Description\nThis typically occurs when the pointer or its index is incremented to a position beyond the bounds of the buffer or when pointer arithmetic results in a position outside of the valid memory location to name a few. This may result in exposure of sensitive information or possibly a crash.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-125\nChildOf -> CWE-788\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** These problems may be resultant from missing sentinel values (CWE-463) or trusting a user-influenced input length variable.\n\n\n\n### Observed Examples\n- **CVE-2022-1733:** Text editor has out-of-bounds read past end of line while indenting C code\n- **CVE-2014-0160:** Chain: \"Heartbleed\" bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.\n- **CVE-2009-2523:** Chain: product does not handle when an input string is not NULL terminated, leading to buffer over-read or heap-based buffer overflow.\n\n\n\n\n## CWE-121: Stack-based Buffer Overflow\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nStack Overflow: \"Stack Overflow\" is often used to mean the same thing as stack-based buffer overflow, however it is also used on occasion to mean stack exhaustion, usually a result from an excessively recursive function call. Due to the ambiguity of the term, use of stack overflow to describe either circumstance is discouraged.\n\n### Relationships\nChildOf -> CWE-788\nChildOf -> CWE-787\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** Stack-based buffer overflows can instantiate in return address overwrites, stack pointer overwrites or frame pointer overwrites. They can also be considered function pointer overwrites, array indexer overwrites or write-what-where condition, etc.\n\n\n\n### Observed Examples\n- **CVE-2021-35395:** Stack-based buffer overflows in SFK for wifi chipset used for IoT/embedded devices, as exploited in the wild per CISA KEV.\n\n",
    "enhanced_query": "## Vulnerability Description\nSudo before 1.9.5p2 contains an **off-by-one error** that can result in a **heap-based buffer overflow**, which allows privilege escalation to root via \"sudoedit -s\" and a command-line argument that ends with a single backslash character.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **off-by-one error**\n- **weakness:** **heap-based buffer overflow**\n- **impact:** privilege escalation to root\n- **vector:** command-line argument ending with single backslash\n- **product:** Sudo\n- **version:** before 1.9.5p2\n\n## CVE Reference Links Content Summary\n```json\n{\n  \"guidelines\": \"1. First verify if the content relates to the CVE specified based on the official description\\n2. If the content does not relate to this CVE, respond with \\\"UNRELATED\\\"\\n3. If no useful vulnerability information is found, respond with \\\"NOINFO\\\" \\n4. For relevant content, extract:\\n   - Root cause of vulnerability\\n   - Weaknesses/vulnerabilities present\\n   - Impact of exploitation\\n   - Attack vectors\\n   - Required attacker capabilities/position\\n\\nAdditional instructions:\\n- Preserve original technical details and descriptions\\n- Remove unrelated content\\n- Translate non-English content to English\\n- Note if the content provides more detail than the official CVE description\",\n  \"response\": {\n    \"CVE-2021-3156\": [\n      {\n        \"content_source\": \"www.kb.cert.org_ddfaa341_20250108_124807.html\",\n        \"root_cause\": \"A heap-based buffer overflow exists in the `set_cmd()` function of sudo.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow\"\n        ],\n        \"impact\": \"A local non-administrative attacker can elevate their privileges to execute commands with administrator privileges.\",\n        \"attack_vectors\": [\n          \"Local access to an affected machine\"\n        ],\n        \"required_attacker_capabilities\": [\n          \"Local access to an affected machine\"\n        ]\n      },\n      {\n        \"content_source\": \"github.com_97ef01f3_20250108_153957.html\",\n         \"root_cause\": \"NOINFO\",\n        \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n        \"required_attacker_capabilities\": \"NOINFO\"\n      },\n      {\n        \"content_source\": \"www.openwall.com_979606b3_20250108_124757.html\",\n        \"root_cause\": \"A heap-based buffer overflow vulnerability exists in the `set_cmd()` function in sudo where if a command-line argument ends with a single backslash character, an out-of-bounds memory copy occurs due to improper unescaping.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow due to incorrect unescaping of a backslash character in command-line arguments.\"\n        ],\n        \"impact\": \"Any local user can gain root privileges on a vulnerable host with a default sudo configuration. Allows attackers to control the size of the user_args buffer that they overflow and independently control the size and content of the overflow.\",\n        \"attack_vectors\": [\n          \"Exploitable via the `sudoedit -s` command with a command-line argument ending in a backslash character.\"\n        ],\n         \"required_attacker_capabilities\": [\n          \"Local user (normal and system users, sudoers and non-sudoers).\"\n        ],\n         \"additional_details\": \"This vulnerability is present in legacy versions from 1.8.2 to 1.8.31p2 and all stable versions from 1.9.0 to 1.9.5p1. Exploit techniques include overwriting struct sudo_hook_entry to redirect code execution, overwriting heap-based struct nss_module name[], or overwriting def_timestampdir with an arbitrary symlink.\"\n      },\n     {\n        \"content_source\": \"sec.cloudapps.cisco.com_fee78a22_20250108_153952.html\",\n        \"root_cause\": \"Improper parsing of command line parameters in Sudo may result in a heap-based buffer overflow. Specifically, crafted parameters passed to sudoedit can cause a heap-based buffer overflow.\",\n        \"weaknesses\": [\n          \"Improper parsing of command line parameters resulting in a heap-based buffer overflow\"\n        ],\n        \"impact\": \"An authenticated, local attacker can execute commands or binaries with root privileges.\",\n        \"attack_vectors\": [\n          \"Accessing a Unix shell on an affected device and invoking the `sudoedit` command with crafted parameters or by executing a binary exploit.\"\n        ],\n         \"required_attacker_capabilities\": [\n           \"An authenticated local attacker capable of accessing a Unix shell on an affected device\"\n        ]\n      },\n   {\n        \"content_source\": \"github.com_f0514a42_20250108_153956.html\",\n         \"root_cause\": \"NOINFO\",\n        \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n        \"required_attacker_capabilities\": \"NOINFO\"\n      },\n      {\n        \"content_source\": \"www.debian.org_9de40279_20250108_124800.html\",\n        \"root_cause\": \"A heap-based buffer overflow vulnerability was found in sudo, a program designed to provide limited super user privileges to specific users.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow\"\n        ],\n         \"impact\": \"Local users can exploit this flaw for root privilege escalation.\",\n        \"attack_vectors\": [\n            \"Local users (sudoers and non-sudoers)\"\n          ],\n        \"required_attacker_capabilities\": [\n            \"Local user access\"\n          ]\n      },\n        {\n        \"content_source\": \"security.gentoo.org_08e70803_20250108_124802.html\",\n        \"root_cause\": \"A heap-based buffer overflow vulnerability exists in sudo.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow.\"\n        ],\n        \"impact\": \"Local users can gain unauthorized privileges on the system.\",\n        \"attack_vectors\": [\n          \"Local\"\n        ],\n          \"required_attacker_capabilities\": [\n             \"Local user access\"\n          ]\n      },\n      {\n        \"content_source\": \"tools.cisco.com_fdff3844_20250108_124805.html\",\n       \"root_cause\": \"Improper parsing of command line parameters in Sudo may result in a heap-based buffer overflow. Specifically, crafted parameters passed to sudoedit can cause a heap-based buffer overflow.\",\n        \"weaknesses\": [\n          \"Improper parsing of command line parameters resulting in a heap-based buffer overflow\"\n        ],\n        \"impact\": \"An authenticated, local attacker can execute commands or binaries with root privileges.\",\n        \"attack_vectors\": [\n          \"Accessing a Unix shell on an affected device and invoking the `sudoedit` command with crafted parameters or by executing a binary exploit.\"\n        ],\n          \"required_attacker_capabilities\": [\n           \"An authenticated local attacker capable of accessing a Unix shell on an affected device\"\n        ]\n      },\n      {\n        \"content_source\": \"www.openwall.com_67a199a4_20250108_124758.html\",\n         \"root_cause\": \"Out-of-bounds read/write vulnerability during argument unescaping in `set_cmnd()` in sudo, specifically when a command-line argument ends with a single backslash character.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow due to improper unescaping of backslash characters in command line arguments\"\n        ],\n        \"impact\": \"Local attackers can achieve privilege escalation and execute code as root.\",\n        \"attack_vectors\": [\n          \"The vulnerability can be exploited by running sudoedit with a specially crafted command-line argument that ends with a single backslash character.\"\n        ],\n         \"required_attacker_capabilities\": [\n           \"Requires local user access, without needing sudoers permissions or the user password.\"\n         ]\n      },\n      {\n        \"content_source\": \"www.synology.com_cd476a8e_20250108_124818.html\",\n        \"root_cause\": \"Heap-based buffer overflow when processing command line arguments.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow\"\n        ],\n          \"impact\": \"Local users can conduct privilege escalation attacks.\",\n         \"attack_vectors\": [\n           \"Local access to a susceptible system\"\n        ],\n        \"required_attacker_capabilities\": [\n           \"Local access\"\n        ]\n     },\n     {\n        \"content_source\": \"seclists.org_0b3cd48b_20250108_124756.html\",\n        \"root_cause\": \"A heap-based buffer overflow exists in sudo due to improper handling of a backslash character at the end of a command-line argument during parsing.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow.\"\n        ],\n        \"impact\": \"Any local user can gain root privileges on a vulnerable host with a default sudo configuration.\",\n         \"attack_vectors\": [\n            \"Exploitable when sudo is executed in shell mode using -s or -i option with a command-line argument that ends with a single backslash character.\"\n        ],\n        \"required_attacker_capabilities\": [\n            \"A local user, including non-sudo users and non-administrative users.\"\n          ]\n     },\n      {\n        \"content_source\": \"ubuntu.com_bebfc6e2_20250108_153945.html\",\n       \"root_cause\": \"An off-by-one error in Sudo's parsing of command line parameters, leading to a heap-based buffer overflow.\",\n        \"weaknesses\": [\n           \"Off-by-one error resulting in heap-based buffer overflow.\"\n        ],\n        \"impact\": \"Privilege escalation to root.\",\n        \"attack_vectors\": [\n          \"`sudoedit -s` with a command-line argument ending with a single backslash character.\"\n        ],\n        \"required_attacker_capabilities\": [\n             \"Local access\"\n          ]\n      },\n    {\n        \"content_source\": \"www.openwall.com_8b0d7e67_20250108_124758.html\",\n         \"root_cause\": \"A minor bug in sudo where the NO_ROOT_MAILER flag which was meant to harden sudo and avoid using mailer was broken.\",\n          \"weaknesses\": [\n          \"Broken hardening option (NO_ROOT_MAILER) in sudo that eases exploitation of the heap overflow.\"\n        ],\n        \"impact\": \"Makes exploit easier by allowing for more direct control of heap memory layout.\",\n        \"attack_vectors\": [\n            \"Local access with an exploit for CVE-2021-3156.\"\n          ],\n          \"required_attacker_capabilities\": [\n            \"Local user with sudo access\"\n          ],\n         \"additional_details\": \" This bug is used in combination with the Baron Samedit heap overflow. With NO_ROOT_MAILER working, the exploit is ~156 lines of code, whereas without it, the exploit is ~43 lines long. This highlights how the broken hardening mechanism increases exploit complexity\"\n      },\n        {\n        \"content_source\": \"blog.qualys.com_e270e781_20250108_153946.html\",\n        \"root_cause\": \"Heap overflow vulnerability in the `set_cmnd()` function in Sudo due to incorrect parsing of command line arguments. Specifically, if a command-line argument ends with a single backslash character, `set_cmnd()` performs an out-of-bounds copy to a heap buffer.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow\",\n           \"Improper argument handling\"\n        ],\n        \"impact\": \"Any unprivileged local user can gain root privileges on a vulnerable host. This is due to being able to control the size of the user_args buffer being overflowed and size and content of the overflow itself.\",\n        \"attack_vectors\": [\n            \"`sudoedit -s` with a command-line argument ending with a single backslash character.\"\n          ],\n        \"required_attacker_capabilities\": [\n           \"Any local user (normal users and system users, sudoers and non-sudoers).\"\n        ],\n         \"additional_details\": \"Vulnerability introduced in July 2011, and affects versions 1.8.2 to 1.8.31p2 and 1.9.0 to 1.9.5p1. Three exploits were developed that obtained full root privileges on Ubuntu 20.04, Debian 10, and Fedora 33.\"\n    },\n    {\n        \"content_source\": \"sec.cloudapps.cisco.com_89db7c50_20250108_153953.html\",\n        \"root_cause\": \"Improper parsing of command line parameters in Sudo, resulting in a heap-based buffer overflow.\",\n        \"weaknesses\": [\n            \"Improper command-line parameter parsing\",\n            \"Heap-based buffer overflow.\"\n        ],\n        \"impact\": \"An authenticated local attacker may execute commands or binaries with root privileges.\",\n         \"attack_vectors\": [\n            \"Accessing a Unix shell on an affected device and then invoking the `sudoedit` command with crafted parameters or by executing a binary exploit.\"\n        ],\n           \"required_attacker_capabilities\": [\n            \"An authenticated local attacker, with access to a Unix shell on an affected device\"\n          ]\n      },\n      {\n        \"content_source\": \"www.openwall.com_bc3f8cce_20250108_124757.html\",\n         \"root_cause\": \"Heap-based buffer overflow in Sudo's set_cmnd() function when handling arguments ending with a backslash. Specifically, during the unescaping of command line arguments in sudoedit.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow due to improper unescaping.\"\n        ],\n        \"impact\": \"Privilege escalation to root\",\n        \"attack_vectors\": [\n             \"The vulnerability is triggered by using sudoedit with the `-s` option, followed by an argument ending with a single backslash character.\"\n           ],\n          \"required_attacker_capabilities\": [\n            \"No specific privilege requirements, any local user can exploit this.\"\n        ]\n      },\n      {\n        \"content_source\": \"www.suse.com_53fb7cb8_20250108_153947.html\",\n       \"root_cause\": \"Off-by-one error in Sudo before 1.9.5p2 can result in a heap-based buffer overflow.\",\n         \"weaknesses\": [\n             \"Off-by-one error leading to heap-based buffer overflow\"\n          ],\n        \"impact\": \"Privilege escalation to root\",\n        \"attack_vectors\": [\n            \"sudoedit -s and a command-line argument that ends with a single backslash character.\"\n        ],\n         \"required_attacker_capabilities\": [\n           \"Local user\"\n        ]\n      },\n      {\n         \"content_source\": \"tools.cisco.com_fdff3844_20250108_124805.html\",\n           \"root_cause\": \"Improper command line parameter parsing, specifically in the `sudoedit` command, which can lead to a heap-based buffer overflow.\",\n           \"weaknesses\": [\n             \"Heap-based buffer overflow\",\n             \"Improper command-line parameter parsing\"\n            ],\n         \"impact\": \"An authenticated, local attacker can execute commands or binaries with root privileges.\",\n         \"attack_vectors\": [\n            \"Access a Unix shell on an affected device and then invoke the sudoedit command with crafted parameters or by executing a binary exploit.\"\n           ],\n            \"required_attacker_capabilities\": [\n           \"Authenticated local user access\"\n         ]\n    },\n{\n    \"content_source\": \"www.openwall.com_068cc409_20250108_124757.html\",\n        \"root_cause\": \"A heap-based buffer overflow in `sudo` occurs due to how the utility processes command-line arguments, particularly when an argument ends with a backslash character. The vulnerability occurs in the `set_cmnd()` function.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow\"\n        ],\n        \"impact\": \"A local user can escalate privileges to root.\",\n         \"attack_vectors\": [\n           \"A specially crafted command-line argument used with `sudoedit -s` where a single backslash is the last character before the null terminator\"\n         ],\n        \"required_attacker_capabilities\": [\n            \"Local unprivileged user access.\"\n          ]\n    },\n    {\n        \"content_source\": \"www.openwall.com_a53720b4_20250108_124758.html\",\n       \"root_cause\": \"The glibc's __vsyslog_internal() function has a heap-based buffer overflow due to improper handling of the program name (argv[0] or openlog() ident argument) length.\",\n        \"weaknesses\": [\n            \"Heap-based buffer overflow.\",\n            \"Improper handling of long program name strings in syslog.\"\n          ],\n         \"impact\": \"Local Privilege Escalation, from any unprivileged user to full root.\",\n         \"attack_vectors\": [\n            \"Local user access\"\n          ],\n        \"required_attacker_capabilities\": [\n          \"Local, unprivileged user access\"\n         ]\n      },\n      {\n        \"content_source\": \"packetstormsecurity.com_4186acd1_20250108_124755.html\",\n          \"root_cause\": \"NOINFO\",\n          \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n          \"required_attacker_capabilities\": \"NOINFO\"\n      },\n        {\n        \"content_source\": \"packetstormsecurity.com_0f0d5e18_20250108_124751.html\",\n        \"root_cause\": \"NOINFO\",\n          \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n          \"required_attacker_capabilities\": \"NOINFO\"\n      },\n          {\n        \"content_source\": \"packetstormsecurity.com_4b97e923_20250108_124753.html\",\n          \"root_cause\": \"NOINFO\",\n        \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n         \"required_attacker_capabilities\": \"NOINFO\"\n       },\n     {\n        \"content_source\": \"kc.mcafee.com_8fe1da70_20250108_124759.html\",\n        \"root_cause\": \"NOINFO\",\n        \"weaknesses\": \"NOINFO\",\n        \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n         \"required_attacker_capabilities\": \"NOINFO\"\n       },\n     {\n        \"content_source\": \"lists.fedoraproject.org_71b49072_20250108_124800.html\",\n           \"root_cause\": \"NOINFO\",\n        \"weaknesses\": \"NOINFO\",\n         \"impact\": \"NOINFO\",\n        \"attack_vectors\": \"NOINFO\",\n         \"required_attacker_capabilities\": \"NOINFO\"\n      },\n      {\n        \"content_source\": \"www.openwall.com_a436ebfc_20250108_124758.html\",\n        \"root_cause\": \"A heap-based buffer overflow in Sudo, specifically when the name[] field of a heap-based struct nss_module is overwritten, combined with an overwrite of def_timestampdir.\",\n         \"weaknesses\": [\n          \"Heap-based buffer overflow.\",\n            \"Improper overwrite of function pointers\"\n          ],\n        \"impact\": \"Privilege escalation to root, arbitrary code execution.\",\n         \"attack_vectors\": [\n           \"Local access via command line arguments, leveraging how Sudo uses setlocale() and handles directory creation. Also includes ability to execute arbitrary shared library loaded by Sudo with root privileges when nss_module struct is corrupted.\"\n         ],\n          \"required_attacker_capabilities\": [\n              \"Local User access to system\"\n          ]\n      },\n      {\n        \"content_source\": \"www.openwall.com_d2a06585_20250108_124757.html\",\n          \"root_cause\": \"A heap-based buffer overflow in the GNU C Library's __vsyslog_internal() function, which is called by both syslog() and vsyslog().  The vulnerability is due to how the function handles program names that are longer than 1024 bytes.\",\n        \"weaknesses\": [\n          \"Heap-based buffer overflow in syslog function\",\n          \"Insecure handling of program name length\"\n        ],\n        \"impact\": \"Local Privilege Escalation, from any unprivileged user to full root. Allows attacker to overwrite arbitrary memory on the heap by controlling the program's argv[0] and environment variables.\",\n         \"attack_vectors\": [\n            \"Exploited using the `su` command with a long program name for argv[0] that is larger than 1024 bytes combined with a crafted whitelist option.\",\n           \"Local access required\"\n        ],\n           \"required_attacker_capabilities\": [\n           \"Local user access\"\n          ]\n      },\n       {\n         \"content_source\": \"support.apple.com_8479d2e8_20250108_124803.html\",\n           \"root_cause\": \"Vulnerability exists in sudo where the issue is addressed by updating to sudo version 1.9.5p2.\",\n           \"weaknesses\": [\n             \"Buffer overflow\"\n           ],\n           \"impact\": \"A local attacker may be able to elevate their privileges\",\n        \"attack_vectors\": [\n            \"Local access.\"\n         ],\n            \"required_attacker_capabilities\": [\n              \"Local user access.\"\n            ]\n        }\n\n    ]\n  }\n}\n```\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | Class | Discouraged | alternate_terms | 0.800 |\n| 2 | 190 | Integer Overflow or Wraparound | Base | Allowed | alternate_terms | 0.800 |\n| 3 | 193 | Off-by-one Error | Base | Allowed | sparse | 0.403 |\n| 4 | 122 | Heap-based Buffer Overflow | Variant | Allowed | sparse | 0.265 |\n| 5 | 1284 | Improper Validation of Specified Quantity in Input | Base | Allowed | sparse | 0.247 |\n| 6 | 250 | Execution with Unnecessary Privileges | Base | Allowed | dense | 0.522 |\n| 7 | 128 | Wrap-around Error | Base | Allowed | graph | 0.003 |\n| 8 | 131 | Incorrect Calculation of Buffer Size | Base | Allowed | sparse | 0.246 |\n| 9 | 126 | Buffer Over-read | Variant | Allowed | sparse | 0.245 |\n| 10 | 121 | Stack-based Buffer Overflow | Variant | Allowed | sparse | 0.241 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n**Abstraction:** Class\n**Status:** Stable\n\n### Description\nThe product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nBuffer Overflow: This term has many different meanings to different audiences. From a CWE mapping perspective, this term should be avoided where possible. Some researchers, developers, and tools intend for it to mean \"write past the end of a buffer,\" whereas others use the same term to mean \"any read or write outside the boundaries of a buffer, whether before the beginning of the buffer or after the end of the buffer.\" Others could mean \"any action after the end of a buffer, whether it is a read or write.\" Since the term is commonly used for exploitation and for vulnerabilities, it further confuses things.\nbuffer overrun: Some prominent vendors and researchers use the term \"buffer overrun,\" but most people use \"buffer overflow.\" See the alternate term for \"buffer overflow\" for context.\nmemory safety: Generally used for techniques that avoid weaknesses related to memory access, such as those identified by CWE-119 and its descendants. However, the term is not formal, and there is likely disagreement between practitioners as to which weaknesses are implicitly covered by the \"memory safety\" term.\n\n### Relationships\nChildOf -> CWE-118\nChildOf -> CWE-20\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.\n**Comments:** Look at CWE-119's children and consider mapping to CWEs such as CWE-787: Out-of-bounds Write, CWE-125: Out-of-bounds Read, or others.\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Applicable Platform]** \n\nIt is possible in any programming languages without memory management support to attempt an operation outside of the bounds of a memory buffer, but the consequences will vary widely depending on the language, platform, and chip architecture.\n\n\n\n\n### Observed Examples\n- **CVE-2021-22991:** Incorrect URI normalization in application traffic product leads to buffer overflow, as exploited in the wild per CISA KEV.\n- **CVE-2020-29557:** Buffer overflow in Wi-Fi router web interface, as exploited in the wild per CISA KEV.\n- **CVE-2009-2550:** Classic stack-based buffer overflow in media player using a long entry in a playlist\n\n\n\n\n## CWE-190: Integer Overflow or Wraparound\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nOverflow: The terms \"overflow\" and \"wraparound\" are used interchangeably by some people, but they can have more precise distinctions by others. See Terminology Notes.\nWraparound: The terms \"overflow\" and \"wraparound\" are used interchangeably by some people, but they can have more precise distinctions by others. See Terminology Notes.\nwrap, wrap-around, wrap around: Alternate spellings of \"wraparound\"\n\n### Relationships\nChildOf -> CWE-682\nChildOf -> CWE-682\nChildOf -> CWE-20\nCanPrecede -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Be careful of terminology problems with \"overflow,\" \"underflow,\" and \"wraparound\" - see Terminology Notes. Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n**Suggested Alternatives:**\n- CWE-191: Integer Underflow (Wrap or Wraparound). Consider CWE-191 when the result is less than the minimum value that can be represented (sometimes called \"underflows\").\n\n\n### Additional Notes\n**[Relationship]** Integer overflows can be primary to buffer overflows when they cause less memory to be allocated than expected.\n\n**[Terminology]** \n\n\"Integer overflow\" is sometimes used to cover several types of errors, including signedness errors, or buffer overflows that involve manipulation of integer data types instead of characters. Part of the confusion results from the fact that 0xffffffff is -1 in a signed context. Other confusion also arises because of the role that integer overflows have in chains.\n\n\nA \"wraparound\" is a well-defined, standard behavior that follows specific rules for how to handle situations when the intended numeric value is too large or too small to be represented, as specified in standards such as C11.\n\n\n\"Overflow\" is sometimes conflated with \"wraparound\" but typically indicates a non-standard or undefined behavior.\n\n\nThe \"overflow\" term is sometimes used to indicate cases where either the maximum or the minimum is exceeded, but others might only use \"overflow\" to indicate exceeding the maximum while using \"underflow\" for exceeding the minimum.\n\n\nSome people use \"overflow\" to mean any value outside the representable range - whether greater than the maximum, or less than the minimum - but CWE uses \"underflow\" for cases in which the intended result is less than the minimum.\n\n\nSee [REF-1440] for additional explanation of the ambiguity of terminology.\n\n\n**[Other]** While there may be circumstances in which the logic intentionally relies on wrapping - such as with modular arithmetic in timers or counters - it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs.\n\n\n\n### Observed Examples\n- **CVE-2021-43537:** Chain: in a web browser, an unsigned 64-bit integer is forcibly cast to a 32-bit integer (CWE-681) and potentially leading to an integer overflow (CWE-190). If an integer overflow occurs, this can cause heap memory corruption (CWE-122)\n- **CVE-2022-21668:** Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).\n- **CVE-2022-0545:** Chain: 3D renderer has an integer overflow (CWE-190) leading to write-what-where condition (CWE-123) using a crafted image.\n\n\n\n\n## CWE-193: Off-by-one Error\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nA product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\noff-by-five: An \"off-by-five\" error was reported for sudo in 2002 (CVE-2002-0184), but that is more like a \"length calculation\" error.\n\n### Relationships\nChildOf -> CWE-682\nChildOf -> CWE-682\nCanPrecede -> CWE-617\nCanPrecede -> CWE-170\nCanPrecede -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This is not always a buffer overflow. For example, an off-by-one error could be a factor in a partial comparison, a read from the wrong memory location, an incorrect conditional, etc.\n\n\n\n### Observed Examples\n- **CVE-2003-0252:** Off-by-one error allows remote attackers to cause a denial of service and possibly execute arbitrary code via requests that do not contain newlines.\n- **CVE-2001-1391:** Off-by-one vulnerability in driver allows users to modify kernel memory.\n- **CVE-2002-0083:** Off-by-one error allows local users or remote malicious servers to gain privileges.\n\n\n\n\n## CWE-122: Heap-based Buffer Overflow\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nA heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-788\nChildOf -> CWE-787\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Heap-based buffer overflows are usually just as dangerous as stack-based buffer overflows.\n\n\n\n### Observed Examples\n- **CVE-2021-43537:** Chain: in a web browser, an unsigned 64-bit integer is forcibly cast to a 32-bit integer (CWE-681) and potentially leading to an integer overflow (CWE-190). If an integer overflow occurs, this can cause heap memory corruption (CWE-122)\n- **CVE-2007-4268:** Chain: integer signedness error (CWE-195) passes signed comparison, leading to heap overflow (CWE-122)\n- **CVE-2009-2523:** Chain: product does not handle when an input string is not NULL terminated (CWE-170), leading to buffer over-read (CWE-125) or heap-based buffer overflow (CWE-122).\n\n\n\n\n## CWE-1284: Improper Validation of Specified Quantity in Input\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.\n\n### Extended Description\n\n\nSpecified quantities include size, length, frequency, price, rate, number of operations, time, and others. Code may rely on specified quantities to allocate resources, perform calculations, control iteration, etc. When the quantity is not properly validated, then attackers can specify malicious quantities to cause excessive resource allocation, trigger unexpected failures, enable buffer overflows, etc.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-20\nChildOf -> CWE-20\nCanPrecede -> CWE-789\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** This entry is still under development and will continue to see updates and content improvements.\n\n\n\n### Observed Examples\n- **CVE-2022-21668:** Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).\n- **CVE-2008-1440:** lack of validation of length field leads to infinite loop\n- **CVE-2008-2374:** lack of validation of string length fields allows memory consumption or buffer over-read\n\n\n\n\n## CWE-250: Execution with Unnecessary Privileges\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.\n\n### Extended Description\n\n\nNew weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges.\n\n\nPrivilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-269\nChildOf -> CWE-657\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** There is a close association with CWE-653 (Insufficient Separation of Privileges). CWE-653 is about providing separate components for each privilege; CWE-250 is about ensuring that each component has the least amount of privileges possible.\n\n**[Maintenance]** CWE-271, CWE-272, and CWE-250 are all closely related and possibly overlapping. CWE-271 is probably better suited as a category. Both CWE-272 and CWE-250 are in active use by the community. The \"least privilege\" phrase has multiple interpretations.\n\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2007-4217:** FTP client program on a certain OS runs with setuid privileges and has a buffer overflow. Most clients do not need extra privileges, so an overflow is not a vulnerability for those clients.\n- **CVE-2008-1877:** Program runs with privileges and calls another program with the same privileges, which allows read of arbitrary files.\n- **CVE-2007-5159:** OS incorrectly installs a program with setuid privileges, allowing users to gain privileges.\n\n\n\n\n## CWE-128: Wrap-around Error\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nWrap around errors occur whenever a value is incremented past the maximum value for its type and therefore \"wraps around\" to a very small, negative, or undefined value.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-682\nCanPrecede -> CWE-119\nPeerOf -> CWE-190\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** The relationship between overflow and wrap-around needs to be examined more closely, since several entries (including CWE-190) are closely related.\n\n\n\n\n\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-682\nChildOf -> CWE-682\nChildOf -> CWE-682\nChildOf -> CWE-682\nCanPrecede -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** \n\nThis is a broad category. Some examples include:\n\n\n  - simple math errors,\n\n  - incorrectly updating parallel counters,\n\n  - not accounting for size differences when \"transforming\" one input to another format (e.g. URL canonicalization or other transformation that can generate a result that's larger than the original input, i.e. \"expansion\").\n\nThis level of detail is rarely available in public reports, so it is difficult to find good examples.\n\n**[Maintenance]** \n\nThis weakness may be a composite or a chain. It also may contain layering or perspective differences.\n\n\nThis issue may be associated with many different types of incorrect calculations (CWE-682), although the integer overflow (CWE-190) is probably the most prevalent. This can be primary to resource consumption problems (CWE-400), including uncontrolled memory allocation (CWE-789). However, its relationship with out-of-bounds buffer access (CWE-119) must also be considered.\n\n\n\n\n### Observed Examples\n- **CVE-2020-17087:** Chain: integer truncation (CWE-197) causes small buffer allocation (CWE-131) leading to out-of-bounds write (CWE-787) in kernel pool, as exploited in the wild per CISA KEV.\n- **CVE-2004-1363:** substitution overflow: buffer overflow using environment variables that are expanded after the length check is performed\n- **CVE-2004-0747:** substitution overflow: buffer overflow using expansion of environment variables\n\n\n\n\n## CWE-126: Buffer Over-read\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.\n\n### Extended Description\nThis typically occurs when the pointer or its index is incremented to a position beyond the bounds of the buffer or when pointer arithmetic results in a position outside of the valid memory location to name a few. This may result in exposure of sensitive information or possibly a crash.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-125\nChildOf -> CWE-788\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** These problems may be resultant from missing sentinel values (CWE-463) or trusting a user-influenced input length variable.\n\n\n\n### Observed Examples\n- **CVE-2022-1733:** Text editor has out-of-bounds read past end of line while indenting C code\n- **CVE-2014-0160:** Chain: \"Heartbleed\" bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.\n- **CVE-2009-2523:** Chain: product does not handle when an input string is not NULL terminated, leading to buffer over-read or heap-based buffer overflow.\n\n\n\n\n## CWE-121: Stack-based Buffer Overflow\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nStack Overflow: \"Stack Overflow\" is often used to mean the same thing as stack-based buffer overflow, however it is also used on occasion to mean stack exhaustion, usually a result from an excessively recursive function call. Due to the ambiguity of the term, use of stack overflow to describe either circumstance is discouraged.\n\n### Relationships\nChildOf -> CWE-788\nChildOf -> CWE-787\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** Stack-based buffer overflows can instantiate in return address overwrites, stack pointer overwrites or frame pointer overwrites. They can also be considered function pointer overwrites, array indexer overwrites or write-what-where condition, etc.\n\n\n\n### Observed Examples\n- **CVE-2021-35395:** Stack-based buffer overflows in SFK for wifi chipset used for IoT/embedded devices, as exploited in the wild per CISA KEV.\n\n Consider specifically these CWEs: CWE-131 CWE-190 CWE-805 CWE-124 CWE-197 CWE-193 CWE-1284 CWE-191 CWE-122 CWE-125",
    "cwe_mentions": [
      "CWE-131",
      "CWE-190",
      "CWE-805",
      "CWE-124",
      "CWE-197",
      "CWE-193",
      "CWE-1284",
      "CWE-191",
      "CWE-122",
      "CWE-125"
    ],
    "search_time": 2.8241913318634033
  },
  "timestamp": "2025-03-31 01:24:58",
  "cve_id": "unknown",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "type": "base",
      "score": 5.031000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "170",
      "name": "Improper Null Termination",
      "type": "base",
      "score": 5.031000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "195",
      "name": "Signed to Unsigned Conversion Error",
      "type": "variant",
      "score": 4.5264,
      "relationship_count": 0
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "type": "base",
      "score": 4.329000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "617",
      "name": "Reachable Assertion",
      "type": "base",
      "score": 4.329000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "123",
      "name": "Write-what-where Condition",
      "type": "base",
      "score": 3.8870000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "type": "variant",
      "score": 3.7507200000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "463",
      "name": "Deletion of Data Structure Sentinel",
      "type": "base",
      "score": 3.6399999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "1339",
      "name": "Insufficient Precision or Accuracy of a Real Number",
      "type": "base",
      "score": 3.5671999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "type": "base",
      "score": 3.3566,
      "relationship_count": 0
    }
  ]
}