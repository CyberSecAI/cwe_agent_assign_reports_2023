{
  "retriever": "graph",
  "query": "## Vulnerability Description\nJenkins Build-Publisher Plugin 1.22 and earlier **does not perform a permission check** in an HTTP endpoint, allowing attackers with Overall/Read permission to obtain names and URLs of Jenkins servers that the plugin is configured to publish builds to, as well as builds pending for publication to those Jenkins servers.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **does not perform a permission check**\n- **impact:** obtain names and URLs of Jenkins servers\n- **vector:** HTTP endpoint\n- **attacker:** attackers with Overall/Read permission\n- **product:** Jenkins Build-Publisher Plugin\n- **version:** 1.22 and earlier\n\n## CVE Reference Links Content Summary\n```\n{\n  \"CVE-2022-41230\": {\n    \"Description\": \"build-publisher Plugin 1.22 and earlier does not perform a permission check in an HTTP endpoint. This allows attackers with Overall/Read permission to obtain names and URLs of Jenkins servers that the plugin is configured to publish builds to, as well as builds pending for publication to those Jenkins servers.\",\n    \"Root cause\": \"Missing permission check in an HTTP endpoint.\",\n    \"Vulnerabilities\": [\n      \"Missing permission check\"\n    ],\n    \"Impact\": \"Attackers with Overall/Read permission can obtain names and URLs of Jenkins servers that the plugin is configured to publish builds to, as well as builds pending for publication to those Jenkins servers.\",\n    \"Attack vectors\": \"HTTP endpoint access\",\n    \"Required capabilities\": \"Overall/Read permission\"\n  }\n}\n```\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 862 | Missing Authorization | Class | Allowed-with-Review | sparse | 0.508 |\n| 2 | 863 | Incorrect Authorization | Class | Allowed-with-Review | sparse | 0.424 |\n| 3 | 256 | Plaintext Storage of a Password | Base | Allowed | sparse | 0.395 |\n| 4 | 285 | Improper Authorization | Class | Discouraged | sparse | 0.386 |\n| 5 | 522 | Insufficiently Protected Credentials | Class | Allowed-with-Review | sparse | 0.373 |\n| 6 | 276 | Incorrect Default Permissions | Base | Allowed | dense | 0.490 |\n| 7 | 942 | Permissive Cross-domain Policy with Untrusted Domains | Variant | Allowed | graph | 0.002 |\n| 8 | 838 | Inappropriate Encoding for Output Context | Base | Allowed | sparse | 0.372 |\n| 9 | 319 | Cleartext Transmission of Sensitive Information | Base | Allowed | sparse | 0.369 |\n| 10 | 306 | Missing Authentication for Critical Function | Base | Allowed | sparse | 0.352 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-862: Missing Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product does not perform an authorization check when an actor attempts to access a resource or perform an action.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n### Observed Examples\n- **CVE-2022-24730:** Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information\n- **CVE-2009-3168:** Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.\n- **CVE-2009-3597:** Web application stores database file under the web root with insufficient access control (CWE-219), allowing direct request.\n\n\n\n\n## CWE-863: Incorrect Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** \n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n\n### Observed Examples\n- **CVE-2021-39155:** Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.\n- **CVE-2019-15900:** Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).\n- **CVE-2009-2213:** Gateway uses default \"Allow\" configuration for its authorization settings.\n\n\n\n\n## CWE-256: Plaintext Storage of a Password\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nStoring a password in plaintext may result in a system compromise.\n\n### Extended Description\nPassword management issues occur when a password is stored in plaintext in an application's properties, configuration file, or memory. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource. In some contexts, even storage of a plaintext password in memory is considered a security risk if the password is not cleared immediately after it is used.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-522\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-30275:** Remote Terminal Unit (RTU) uses a driver that relies on a password stored in plaintext.\n\n\n\n\n## CWE-285: Improper Authorization\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\n### Extended Description\n\n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\nWhen access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.\n\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-284\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-285 is high-level and lower-level CWEs can frequently be used instead. It is a level-1 Class (i.e., a child of a Pillar).\n**Comments:** Look at CWE-285's children and consider mapping to CWEs such as CWE-862: Missing Authorization, CWE-863: Incorrect Authorization, CWE-732: Incorrect Permission Assignment for Critical Resource, or others.\n**Reasons:**\n- Abstraction\n**Suggested Alternatives:**\n- CWE-862: Missing Authorization\n- CWE-863: Incorrect Authorization\n- CWE-732: Incorrect Permission Assignment for Critical Resource\n\n\n\n### Observed Examples\n- **CVE-2022-24730:** Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information\n- **CVE-2009-3168:** Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.\n- **CVE-2009-2960:** Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users.\n\n\n\n\n## CWE-522: Insufficiently Protected Credentials\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1390\nChildOf -> CWE-287\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2022-30018:** A messaging platform serializes all elements of User/Group objects, making private information available to adversaries\n- **CVE-2022-29959:** Initialization file contains credentials that can be decoded using a \"simple string transformation\"\n- **CVE-2022-35411:** Python-based RPC framework enables pickle functionality by default, allowing clients to unpickle untrusted data.\n\n\n\n\n## CWE-276: Incorrect Default Permissions\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nDuring installation, installed file permissions are set to allow anyone to modify those files.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-732\nChildOf -> CWE-732\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2005-1941:** Executables installed world-writable.\n- **CVE-2002-1713:** Home directories installed world-readable.\n- **CVE-2001-1550:** World-writable log files allow information loss; world-readable file has cleartext passwords.\n\n\n\n\n## CWE-942: Permissive Cross-domain Policy with Untrusted Domains\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses a cross-domain policy file that includes domains that should not be trusted.\n\n### Extended Description\n\n\nA cross-domain policy file (\"crossdomain.xml\" in Flash and \"clientaccesspolicy.xml\" in Silverlight) defines a list of domains from which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made.\n\n\nTherefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains.\n\n\nAn overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site.\n\n\nIn many cases, the attack can be launched without the victim even being aware of it.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-863\nChildOf -> CWE-923\nChildOf -> CWE-183\nCanPrecede -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2012-2292:** Product has a Silverlight cross-domain policy that does not restrict access to another application, which allows remote attackers to bypass the Same Origin Policy.\n- **CVE-2014-2049:** The default Flash Cross Domain policies in a product allows remote attackers to access user files.\n- **CVE-2007-6243:** Chain: Adobe Flash Player does not sufficiently restrict the interpretation and usage of cross-domain policy files, which makes it easier for remote attackers to conduct cross-domain and cross-site scripting (XSS) attacks.\n\n\n\n\n## CWE-838: Inappropriate Encoding for Output Context\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component.\n\n### Extended Description\n\n\nThis weakness can cause the downstream component to use a decoding method that produces different data than what the product intended to send. When the wrong encoding is used - even if closely related - the downstream component could decode the data incorrectly. This can have security consequences when the provided boundaries between control and data are inadvertently broken, because the resulting data could introduce control characters or special elements that were not sent by the product. The resulting data could then be used to bypass protection mechanisms such as input validation, and enable injection attacks.\n\n\nWhile using output encoding is essential for ensuring that communications between components are accurate, the use of the wrong encoding - even if closely related - could cause the downstream component to misinterpret the output.\n\n\nFor example, HTML entity encoding is used for elements in the HTML body of a web page. However, a programmer might use entity encoding when generating output for that is used within an attribute of an HTML tag, which could contain functional Javascript that is not affected by the HTML encoding.\n\n\nWhile web applications have received the most attention for this problem, this weakness could potentially apply to any type of product that uses a communications stream that could support multiple encodings.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-116\nChildOf -> CWE-116\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2009-2814:** Server does not properly handle requests that do not contain UTF-8 data; browser assumes UTF-8, allowing XSS.\n\n\n\n\n## CWE-319: Cleartext Transmission of Sensitive Information\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\n\n### Extended Description\n\n\nMany communication channels can be \"sniffed\" (monitored) by adversaries during data transmission. For example, in networking, packets can traverse many intermediary nodes from the source to the destination, whether across the internet, an internal network, the cloud, etc. Some actors might have privileged access to a network interface or any link along the channel, such as a router, but they might not be authorized to collect the underlying data. As a result, network traffic could be sniffed by adversaries, spilling security-critical data.\n\n\nApplicable communication channels are not limited to software products. Applicable channels include hardware-specific technologies such as internal hardware networks and external debug channels, supporting remote JTAG debugging. When mitigations are not applied to combat adversaries within the product's threat model, this weakness significantly lowers the difficulty of exploitation by such adversaries.\n\n\nWhen full communications are recorded or logged, such as with a packet dump, an adversary could attempt to obtain the dump long after the transmission has occurred and try to \"sniff\" the cleartext from the recorded communications in the dump itself. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. \n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-311\nChildOf -> CWE-311\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-29519:** Programmable Logic Controller (PLC) sends sensitive information in plaintext, including passwords and session tokens.\n- **CVE-2022-30312:** Building Controller uses a protocol that transmits authentication credentials in plaintext.\n- **CVE-2022-31204:** Programmable Logic Controller (PLC) sends password in plaintext.\n\n\n\n\n## CWE-306: Missing Authentication for Critical Function\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-287\nChildOf -> CWE-287\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-31260:** Chain: a digital asset management program has an undisclosed backdoor in the legacy version of a PHP script (CWE-912) that could allow an unauthenticated user to export metadata (CWE-306)\n- **CVE-2022-29951:** TCP-based protocol in Programmable Logic Controller (PLC) has no authentication.\n- **CVE-2022-29952:** Condition Monitor firmware uses a protocol that does not require authentication.\n\n Consider specifically these CWEs: CWE-862 CWE-942 CWE-319 CWE-807 CWE-312 CWE-345 CWE-285 CWE-863 CWE-303",
  "keyphrases": {
    "original_query": "## Vulnerability Description\nJenkins Build-Publisher Plugin 1.22 and earlier **does not perform a permission check** in an HTTP endpoint, allowing attackers with Overall/Read permission to obtain names and URLs of Jenkins servers that the plugin is configured to publish builds to, as well as builds pending for publication to those Jenkins servers.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **does not perform a permission check**\n- **impact:** obtain names and URLs of Jenkins servers\n- **vector:** HTTP endpoint\n- **attacker:** attackers with Overall/Read permission\n- **product:** Jenkins Build-Publisher Plugin\n- **version:** 1.22 and earlier\n\n## CVE Reference Links Content Summary\n```\n{\n  \"CVE-2022-41230\": {\n    \"Description\": \"build-publisher Plugin 1.22 and earlier does not perform a permission check in an HTTP endpoint. This allows attackers with Overall/Read permission to obtain names and URLs of Jenkins servers that the plugin is configured to publish builds to, as well as builds pending for publication to those Jenkins servers.\",\n    \"Root cause\": \"Missing permission check in an HTTP endpoint.\",\n    \"Vulnerabilities\": [\n      \"Missing permission check\"\n    ],\n    \"Impact\": \"Attackers with Overall/Read permission can obtain names and URLs of Jenkins servers that the plugin is configured to publish builds to, as well as builds pending for publication to those Jenkins servers.\",\n    \"Attack vectors\": \"HTTP endpoint access\",\n    \"Required capabilities\": \"Overall/Read permission\"\n  }\n}\n```\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 862 | Missing Authorization | Class | Allowed-with-Review | sparse | 0.508 |\n| 2 | 863 | Incorrect Authorization | Class | Allowed-with-Review | sparse | 0.424 |\n| 3 | 256 | Plaintext Storage of a Password | Base | Allowed | sparse | 0.395 |\n| 4 | 285 | Improper Authorization | Class | Discouraged | sparse | 0.386 |\n| 5 | 522 | Insufficiently Protected Credentials | Class | Allowed-with-Review | sparse | 0.373 |\n| 6 | 276 | Incorrect Default Permissions | Base | Allowed | dense | 0.490 |\n| 7 | 942 | Permissive Cross-domain Policy with Untrusted Domains | Variant | Allowed | graph | 0.002 |\n| 8 | 838 | Inappropriate Encoding for Output Context | Base | Allowed | sparse | 0.372 |\n| 9 | 319 | Cleartext Transmission of Sensitive Information | Base | Allowed | sparse | 0.369 |\n| 10 | 306 | Missing Authentication for Critical Function | Base | Allowed | sparse | 0.352 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-862: Missing Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product does not perform an authorization check when an actor attempts to access a resource or perform an action.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n### Observed Examples\n- **CVE-2022-24730:** Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information\n- **CVE-2009-3168:** Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.\n- **CVE-2009-3597:** Web application stores database file under the web root with insufficient access control (CWE-219), allowing direct request.\n\n\n\n\n## CWE-863: Incorrect Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** \n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n\n### Observed Examples\n- **CVE-2021-39155:** Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.\n- **CVE-2019-15900:** Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).\n- **CVE-2009-2213:** Gateway uses default \"Allow\" configuration for its authorization settings.\n\n\n\n\n## CWE-256: Plaintext Storage of a Password\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nStoring a password in plaintext may result in a system compromise.\n\n### Extended Description\nPassword management issues occur when a password is stored in plaintext in an application's properties, configuration file, or memory. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource. In some contexts, even storage of a plaintext password in memory is considered a security risk if the password is not cleared immediately after it is used.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-522\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-30275:** Remote Terminal Unit (RTU) uses a driver that relies on a password stored in plaintext.\n\n\n\n\n## CWE-285: Improper Authorization\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\n### Extended Description\n\n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\nWhen access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.\n\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-284\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-285 is high-level and lower-level CWEs can frequently be used instead. It is a level-1 Class (i.e., a child of a Pillar).\n**Comments:** Look at CWE-285's children and consider mapping to CWEs such as CWE-862: Missing Authorization, CWE-863: Incorrect Authorization, CWE-732: Incorrect Permission Assignment for Critical Resource, or others.\n**Reasons:**\n- Abstraction\n**Suggested Alternatives:**\n- CWE-862: Missing Authorization\n- CWE-863: Incorrect Authorization\n- CWE-732: Incorrect Permission Assignment for Critical Resource\n\n\n\n### Observed Examples\n- **CVE-2022-24730:** Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information\n- **CVE-2009-3168:** Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.\n- **CVE-2009-2960:** Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users.\n\n\n\n\n## CWE-522: Insufficiently Protected Credentials\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1390\nChildOf -> CWE-287\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2022-30018:** A messaging platform serializes all elements of User/Group objects, making private information available to adversaries\n- **CVE-2022-29959:** Initialization file contains credentials that can be decoded using a \"simple string transformation\"\n- **CVE-2022-35411:** Python-based RPC framework enables pickle functionality by default, allowing clients to unpickle untrusted data.\n\n\n\n\n## CWE-276: Incorrect Default Permissions\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nDuring installation, installed file permissions are set to allow anyone to modify those files.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-732\nChildOf -> CWE-732\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2005-1941:** Executables installed world-writable.\n- **CVE-2002-1713:** Home directories installed world-readable.\n- **CVE-2001-1550:** World-writable log files allow information loss; world-readable file has cleartext passwords.\n\n\n\n\n## CWE-942: Permissive Cross-domain Policy with Untrusted Domains\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses a cross-domain policy file that includes domains that should not be trusted.\n\n### Extended Description\n\n\nA cross-domain policy file (\"crossdomain.xml\" in Flash and \"clientaccesspolicy.xml\" in Silverlight) defines a list of domains from which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made.\n\n\nTherefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains.\n\n\nAn overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site.\n\n\nIn many cases, the attack can be launched without the victim even being aware of it.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-863\nChildOf -> CWE-923\nChildOf -> CWE-183\nCanPrecede -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2012-2292:** Product has a Silverlight cross-domain policy that does not restrict access to another application, which allows remote attackers to bypass the Same Origin Policy.\n- **CVE-2014-2049:** The default Flash Cross Domain policies in a product allows remote attackers to access user files.\n- **CVE-2007-6243:** Chain: Adobe Flash Player does not sufficiently restrict the interpretation and usage of cross-domain policy files, which makes it easier for remote attackers to conduct cross-domain and cross-site scripting (XSS) attacks.\n\n\n\n\n## CWE-838: Inappropriate Encoding for Output Context\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component.\n\n### Extended Description\n\n\nThis weakness can cause the downstream component to use a decoding method that produces different data than what the product intended to send. When the wrong encoding is used - even if closely related - the downstream component could decode the data incorrectly. This can have security consequences when the provided boundaries between control and data are inadvertently broken, because the resulting data could introduce control characters or special elements that were not sent by the product. The resulting data could then be used to bypass protection mechanisms such as input validation, and enable injection attacks.\n\n\nWhile using output encoding is essential for ensuring that communications between components are accurate, the use of the wrong encoding - even if closely related - could cause the downstream component to misinterpret the output.\n\n\nFor example, HTML entity encoding is used for elements in the HTML body of a web page. However, a programmer might use entity encoding when generating output for that is used within an attribute of an HTML tag, which could contain functional Javascript that is not affected by the HTML encoding.\n\n\nWhile web applications have received the most attention for this problem, this weakness could potentially apply to any type of product that uses a communications stream that could support multiple encodings.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-116\nChildOf -> CWE-116\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2009-2814:** Server does not properly handle requests that do not contain UTF-8 data; browser assumes UTF-8, allowing XSS.\n\n\n\n\n## CWE-319: Cleartext Transmission of Sensitive Information\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\n\n### Extended Description\n\n\nMany communication channels can be \"sniffed\" (monitored) by adversaries during data transmission. For example, in networking, packets can traverse many intermediary nodes from the source to the destination, whether across the internet, an internal network, the cloud, etc. Some actors might have privileged access to a network interface or any link along the channel, such as a router, but they might not be authorized to collect the underlying data. As a result, network traffic could be sniffed by adversaries, spilling security-critical data.\n\n\nApplicable communication channels are not limited to software products. Applicable channels include hardware-specific technologies such as internal hardware networks and external debug channels, supporting remote JTAG debugging. When mitigations are not applied to combat adversaries within the product's threat model, this weakness significantly lowers the difficulty of exploitation by such adversaries.\n\n\nWhen full communications are recorded or logged, such as with a packet dump, an adversary could attempt to obtain the dump long after the transmission has occurred and try to \"sniff\" the cleartext from the recorded communications in the dump itself. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. \n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-311\nChildOf -> CWE-311\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-29519:** Programmable Logic Controller (PLC) sends sensitive information in plaintext, including passwords and session tokens.\n- **CVE-2022-30312:** Building Controller uses a protocol that transmits authentication credentials in plaintext.\n- **CVE-2022-31204:** Programmable Logic Controller (PLC) sends password in plaintext.\n\n\n\n\n## CWE-306: Missing Authentication for Critical Function\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-287\nChildOf -> CWE-287\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-31260:** Chain: a digital asset management program has an undisclosed backdoor in the legacy version of a PHP script (CWE-912) that could allow an unauthenticated user to export metadata (CWE-306)\n- **CVE-2022-29951:** TCP-based protocol in Programmable Logic Controller (PLC) has no authentication.\n- **CVE-2022-29952:** Condition Monitor firmware uses a protocol that does not require authentication.\n\n",
    "enhanced_query": "## Vulnerability Description\nJenkins Build-Publisher Plugin 1.22 and earlier **does not perform a permission check** in an HTTP endpoint, allowing attackers with Overall/Read permission to obtain names and URLs of Jenkins servers that the plugin is configured to publish builds to, as well as builds pending for publication to those Jenkins servers.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **does not perform a permission check**\n- **impact:** obtain names and URLs of Jenkins servers\n- **vector:** HTTP endpoint\n- **attacker:** attackers with Overall/Read permission\n- **product:** Jenkins Build-Publisher Plugin\n- **version:** 1.22 and earlier\n\n## CVE Reference Links Content Summary\n```\n{\n  \"CVE-2022-41230\": {\n    \"Description\": \"build-publisher Plugin 1.22 and earlier does not perform a permission check in an HTTP endpoint. This allows attackers with Overall/Read permission to obtain names and URLs of Jenkins servers that the plugin is configured to publish builds to, as well as builds pending for publication to those Jenkins servers.\",\n    \"Root cause\": \"Missing permission check in an HTTP endpoint.\",\n    \"Vulnerabilities\": [\n      \"Missing permission check\"\n    ],\n    \"Impact\": \"Attackers with Overall/Read permission can obtain names and URLs of Jenkins servers that the plugin is configured to publish builds to, as well as builds pending for publication to those Jenkins servers.\",\n    \"Attack vectors\": \"HTTP endpoint access\",\n    \"Required capabilities\": \"Overall/Read permission\"\n  }\n}\n```\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 862 | Missing Authorization | Class | Allowed-with-Review | sparse | 0.508 |\n| 2 | 863 | Incorrect Authorization | Class | Allowed-with-Review | sparse | 0.424 |\n| 3 | 256 | Plaintext Storage of a Password | Base | Allowed | sparse | 0.395 |\n| 4 | 285 | Improper Authorization | Class | Discouraged | sparse | 0.386 |\n| 5 | 522 | Insufficiently Protected Credentials | Class | Allowed-with-Review | sparse | 0.373 |\n| 6 | 276 | Incorrect Default Permissions | Base | Allowed | dense | 0.490 |\n| 7 | 942 | Permissive Cross-domain Policy with Untrusted Domains | Variant | Allowed | graph | 0.002 |\n| 8 | 838 | Inappropriate Encoding for Output Context | Base | Allowed | sparse | 0.372 |\n| 9 | 319 | Cleartext Transmission of Sensitive Information | Base | Allowed | sparse | 0.369 |\n| 10 | 306 | Missing Authentication for Critical Function | Base | Allowed | sparse | 0.352 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-862: Missing Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product does not perform an authorization check when an actor attempts to access a resource or perform an action.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n### Observed Examples\n- **CVE-2022-24730:** Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information\n- **CVE-2009-3168:** Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.\n- **CVE-2009-3597:** Web application stores database file under the web root with insufficient access control (CWE-219), allowing direct request.\n\n\n\n\n## CWE-863: Incorrect Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** \n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n\n### Observed Examples\n- **CVE-2021-39155:** Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.\n- **CVE-2019-15900:** Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).\n- **CVE-2009-2213:** Gateway uses default \"Allow\" configuration for its authorization settings.\n\n\n\n\n## CWE-256: Plaintext Storage of a Password\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nStoring a password in plaintext may result in a system compromise.\n\n### Extended Description\nPassword management issues occur when a password is stored in plaintext in an application's properties, configuration file, or memory. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource. In some contexts, even storage of a plaintext password in memory is considered a security risk if the password is not cleared immediately after it is used.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-522\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-30275:** Remote Terminal Unit (RTU) uses a driver that relies on a password stored in plaintext.\n\n\n\n\n## CWE-285: Improper Authorization\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\n### Extended Description\n\n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\nWhen access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.\n\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-284\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-285 is high-level and lower-level CWEs can frequently be used instead. It is a level-1 Class (i.e., a child of a Pillar).\n**Comments:** Look at CWE-285's children and consider mapping to CWEs such as CWE-862: Missing Authorization, CWE-863: Incorrect Authorization, CWE-732: Incorrect Permission Assignment for Critical Resource, or others.\n**Reasons:**\n- Abstraction\n**Suggested Alternatives:**\n- CWE-862: Missing Authorization\n- CWE-863: Incorrect Authorization\n- CWE-732: Incorrect Permission Assignment for Critical Resource\n\n\n\n### Observed Examples\n- **CVE-2022-24730:** Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information\n- **CVE-2009-3168:** Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.\n- **CVE-2009-2960:** Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users.\n\n\n\n\n## CWE-522: Insufficiently Protected Credentials\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1390\nChildOf -> CWE-287\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2022-30018:** A messaging platform serializes all elements of User/Group objects, making private information available to adversaries\n- **CVE-2022-29959:** Initialization file contains credentials that can be decoded using a \"simple string transformation\"\n- **CVE-2022-35411:** Python-based RPC framework enables pickle functionality by default, allowing clients to unpickle untrusted data.\n\n\n\n\n## CWE-276: Incorrect Default Permissions\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nDuring installation, installed file permissions are set to allow anyone to modify those files.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-732\nChildOf -> CWE-732\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2005-1941:** Executables installed world-writable.\n- **CVE-2002-1713:** Home directories installed world-readable.\n- **CVE-2001-1550:** World-writable log files allow information loss; world-readable file has cleartext passwords.\n\n\n\n\n## CWE-942: Permissive Cross-domain Policy with Untrusted Domains\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses a cross-domain policy file that includes domains that should not be trusted.\n\n### Extended Description\n\n\nA cross-domain policy file (\"crossdomain.xml\" in Flash and \"clientaccesspolicy.xml\" in Silverlight) defines a list of domains from which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made.\n\n\nTherefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains.\n\n\nAn overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site.\n\n\nIn many cases, the attack can be launched without the victim even being aware of it.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-863\nChildOf -> CWE-923\nChildOf -> CWE-183\nCanPrecede -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2012-2292:** Product has a Silverlight cross-domain policy that does not restrict access to another application, which allows remote attackers to bypass the Same Origin Policy.\n- **CVE-2014-2049:** The default Flash Cross Domain policies in a product allows remote attackers to access user files.\n- **CVE-2007-6243:** Chain: Adobe Flash Player does not sufficiently restrict the interpretation and usage of cross-domain policy files, which makes it easier for remote attackers to conduct cross-domain and cross-site scripting (XSS) attacks.\n\n\n\n\n## CWE-838: Inappropriate Encoding for Output Context\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component.\n\n### Extended Description\n\n\nThis weakness can cause the downstream component to use a decoding method that produces different data than what the product intended to send. When the wrong encoding is used - even if closely related - the downstream component could decode the data incorrectly. This can have security consequences when the provided boundaries between control and data are inadvertently broken, because the resulting data could introduce control characters or special elements that were not sent by the product. The resulting data could then be used to bypass protection mechanisms such as input validation, and enable injection attacks.\n\n\nWhile using output encoding is essential for ensuring that communications between components are accurate, the use of the wrong encoding - even if closely related - could cause the downstream component to misinterpret the output.\n\n\nFor example, HTML entity encoding is used for elements in the HTML body of a web page. However, a programmer might use entity encoding when generating output for that is used within an attribute of an HTML tag, which could contain functional Javascript that is not affected by the HTML encoding.\n\n\nWhile web applications have received the most attention for this problem, this weakness could potentially apply to any type of product that uses a communications stream that could support multiple encodings.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-116\nChildOf -> CWE-116\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2009-2814:** Server does not properly handle requests that do not contain UTF-8 data; browser assumes UTF-8, allowing XSS.\n\n\n\n\n## CWE-319: Cleartext Transmission of Sensitive Information\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\n\n### Extended Description\n\n\nMany communication channels can be \"sniffed\" (monitored) by adversaries during data transmission. For example, in networking, packets can traverse many intermediary nodes from the source to the destination, whether across the internet, an internal network, the cloud, etc. Some actors might have privileged access to a network interface or any link along the channel, such as a router, but they might not be authorized to collect the underlying data. As a result, network traffic could be sniffed by adversaries, spilling security-critical data.\n\n\nApplicable communication channels are not limited to software products. Applicable channels include hardware-specific technologies such as internal hardware networks and external debug channels, supporting remote JTAG debugging. When mitigations are not applied to combat adversaries within the product's threat model, this weakness significantly lowers the difficulty of exploitation by such adversaries.\n\n\nWhen full communications are recorded or logged, such as with a packet dump, an adversary could attempt to obtain the dump long after the transmission has occurred and try to \"sniff\" the cleartext from the recorded communications in the dump itself. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. \n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-311\nChildOf -> CWE-311\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-29519:** Programmable Logic Controller (PLC) sends sensitive information in plaintext, including passwords and session tokens.\n- **CVE-2022-30312:** Building Controller uses a protocol that transmits authentication credentials in plaintext.\n- **CVE-2022-31204:** Programmable Logic Controller (PLC) sends password in plaintext.\n\n\n\n\n## CWE-306: Missing Authentication for Critical Function\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-287\nChildOf -> CWE-287\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-31260:** Chain: a digital asset management program has an undisclosed backdoor in the legacy version of a PHP script (CWE-912) that could allow an unauthenticated user to export metadata (CWE-306)\n- **CVE-2022-29951:** TCP-based protocol in Programmable Logic Controller (PLC) has no authentication.\n- **CVE-2022-29952:** Condition Monitor firmware uses a protocol that does not require authentication.\n\n Consider specifically these CWEs: CWE-862 CWE-942 CWE-319 CWE-807 CWE-312 CWE-345 CWE-285 CWE-863 CWE-303",
    "cwe_mentions": [
      "CWE-862",
      "CWE-942",
      "CWE-319",
      "CWE-807",
      "CWE-312",
      "CWE-345",
      "CWE-285",
      "CWE-863",
      "CWE-303"
    ],
    "search_time": 2.4185755252838135
  },
  "timestamp": "2025-03-31 04:48:33",
  "cve_id": "unknown",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "942",
      "name": "Permissive Cross-domain Policy with Untrusted Domains",
      "type": "variant",
      "score": 3.8784,
      "relationship_count": 0
    },
    {
      "cwe_id": "178",
      "name": "Improper Handling of Case Sensitivity",
      "type": "base",
      "score": 3.757,
      "relationship_count": 0
    },
    {
      "cwe_id": "1289",
      "name": "Improper Validation of Unsafe Equivalence in Input",
      "type": "base",
      "score": 3.6399999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "79",
      "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "type": "base",
      "score": 3.2760000000000002,
      "relationship_count": 0
    },
    {
      "cwe_id": "183",
      "name": "Permissive List of Allowed Inputs",
      "type": "base",
      "score": 3.06904,
      "relationship_count": 0
    },
    {
      "cwe_id": "322",
      "name": "Key Exchange without Entity Authentication",
      "type": "base",
      "score": 2.8651999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "494",
      "name": "Download of Code Without Integrity Check",
      "type": "base",
      "score": 2.8651999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "289",
      "name": "Authentication Bypass by Alternate Name",
      "type": "base",
      "score": 2.8651999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "184",
      "name": "Incomplete List of Disallowed Inputs",
      "type": "base",
      "score": 2.7014000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "350",
      "name": "Reliance on Reverse DNS Resolution for a Security-Critical Action",
      "type": "variant",
      "score": 2.6784000000000003,
      "relationship_count": 0
    }
  ]
}