{
  "retriever": "graph",
  "query": "## Vulnerability Description\nThe version of podman as released for Red Hat Enterprise Linux 7 Extras via RHSA-20222190 advisory included an incorrect version of podman missing the fix for CVE-2020-14370, which was previously fixed via RHSA-20205056. This issue could possibly allow an attacker to gain access to sensitive information stored in environment variables.\n\n### Vulnerability Description Key Phrases\n- **impact:** gain access to sensitive information stored in environment variables\n- **attacker:** attacker\n- **product:** podman for Red Hat Enterprise Linux 7 Extras\n\n## CVE Reference Links Content Summary\n```\n{\n  \"vulnerability_details\": {\n    \"root_cause\": \"A security regression was introduced in a podman package, specifically version podman-1.6.4-32.el7_9, released for Red Hat Enterprise Linux 7 Extras. This version inadvertently lacked the fix for CVE-2020-14370, which was previously addressed. The regression occurred due to an incorrect version of podman being included in the RHSA-2022:2190 advisory.\",\n    \"weaknesses\": [\n      \"The primary weakness lies in the failure to include the necessary fix for CVE-2020-14370 in the released podman package.\",\n      \"A source code management issue led to the inclusion of an incorrect podman version.\"\n    ],\n    \"impact\": \"This vulnerability allows an attacker with control over subsequent containers to access sensitive information stored in environment variables. The original issue, CVE-2020-14370, involved environment variable leakage between containers when started via the deprecated Varlink API or Docker-compatible REST API. This vulnerability regression allows a potential attacker to gain access to secrets shared with previous containers through environment variables.\",\n    \"attack_vectors\": [\n      \"An attacker must have the ability to create multiple containers within a short period using the deprecated Varlink API or Docker-compatible REST API.\",\n       \"The attacker would then need control over a container created after a previous container that defined sensitive environment variables to exploit the leakage and access those variables.\"\n    ],\n    \"required_attacker_capabilities\": \"The attacker needs to be able to create and control multiple containers via the deprecated Varlink API or Docker-compatible REST API, and the containers need to be created in a short duration to trigger the leakage.\"\n  }\n}\n```\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 526 | Cleartext Storage of Sensitive Information in an Environment Variable | Variant | Allowed | sparse | 0.179 |\n| 2 | 918 | Server-Side Request Forgery (SSRF) | Base | Allowed | sparse | 0.097 |\n| 3 | 201 | Insertion of Sensitive Information Into Sent Data | Base | Allowed | sparse | 0.089 |\n| 4 | 863 | Incorrect Authorization | Class | Allowed-with-Review | sparse | 0.088 |\n| 5 | 22 | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') | Base | Allowed | sparse | 0.088 |\n| 6 | 214 | Invocation of Process Using Visible Sensitive Information | Base | Allowed | dense | 0.497 |\n| 7 | 1272 | Sensitive Information Uncleared Before Debug/Power State Transition | Base | Allowed | graph | 0.002 |\n| 8 | 1004 | Sensitive Cookie Without 'HttpOnly' Flag | Variant | Allowed | sparse | 0.087 |\n| 9 | 61 | UNIX Symbolic Link (Symlink) Following | Compound | Allowed | sparse | 0.086 |\n| 10 | 287 | Improper Authentication | Class | Discouraged | sparse | 0.086 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-526: Cleartext Storage of Sensitive Information in an Environment Variable\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses an environment variable to store unencrypted sensitive information.\n\n### Extended Description\nInformation stored in an environment variable can be accessible by other processes with the execution context, including child processes that dependencies are executed in, or serverless functions in cloud environments. An environment variable's contents can also be inserted into messages, headers, log files, or other outputs. Often these other dependencies have no need to use the environment variable in question. A weakness that discloses environment variables could expose this information.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-312\nPeerOf -> CWE-214\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-43691:** CMS shows sensitive server-side information from environment variables when run in Debug mode.\n- **CVE-2022-27195:** Plugin for an automation server inserts environment variable contents into build XML files.\n- **CVE-2022-25264:** CI/CD tool logs environment variables related to passwords add Contribution to content history.\n\n\n\n\n## CWE-918: Server-Side Request Forgery (SSRF)\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nXSPA: Cross Site Port Attack\nSSRF: Server-Side Request Forgery\n\n### Relationships\nChildOf -> CWE-441\nChildOf -> CWE-610\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** CWE-918 (SSRF) and CWE-611 (XXE) are closely related, because they both involve web-related technologies and can launch outbound requests to unexpected destinations. However, XXE can be performed client-side, or in other contexts in which the software is not acting directly as a server, so the \"Server\" portion of the SSRF acronym does not necessarily apply.\n\n\n\n### Observed Examples\n- **CVE-2023-32786:** Chain: LLM integration framework has prompt injection (CWE-1427) that allows an attacker to force the service to retrieve data from an arbitrary URL, essentially providing SSRF (CWE-918) and potentially injecting content into downstream tasks.\n- **CVE-2021-26855:** Server Side Request Forgery (SSRF) in mail server, as exploited in the wild per CISA KEV.\n- **CVE-2021-21973:** Server Side Request Forgery in cloud platform, as exploited in the wild per CISA KEV.\n\n\n\n\n## CWE-201: Insertion of Sensitive Information Into Sent Data\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-200\nCanAlsoBe -> CWE-209\nCanAlsoBe -> CWE-202\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure).\n\n\n\n### Observed Examples\n- **CVE-2022-0708:** Collaboration platform does not clear team emails in a response, allowing leak of email addresses\n\n\n\n\n## CWE-863: Incorrect Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** \n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n\n### Observed Examples\n- **CVE-2021-39155:** Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.\n- **CVE-2019-15900:** Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).\n- **CVE-2009-2213:** Gateway uses default \"Allow\" configuration for its authorization settings.\n\n\n\n\n## CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n### Extended Description\n\n\nMany file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\" to access unexpected files. This is referred to as absolute path traversal.\n\n\n### Alternative Terms\nDirectory traversal\nPath traversal: \"Path traversal\" is preferred over \"directory traversal,\" but both terms are attack-focused.\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to apply to a wider range of files. For example, the product may add \".txt\" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.\n\n**[Relationship]** Pathname equivalence can be regarded as a type of canonicalization error.\n\n**[Relationship]** Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing \"/\" on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not).\n\n**[Terminology]** \n\nLike other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use \"directory traversal\" only to refer to the injection of \"..\" and equivalent sequences whose specific meaning is to traverse directories.\n\n\nOther variants like \"absolute pathname\" and \"drive letter\" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve \"..\" or equivalent.\n\n\n**[Research Gap]** Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap.\n\n**[Research Gap]** \n\nIncomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that \"..\\\" is vulnerable, but not test \"../\" which may also be vulnerable.\n\n\nAny combination of directory separators (\"/\", \"\\\", etc.) and numbers of \".\" (e.g. \"....\") can produce unique variants; for example, the \"//../\" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.\n\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2024-4315:** Chain: API for text generation using Large Language Models (LLMs) does not include the \"\\\" Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n\n\n\n\n## CWE-214: Invocation of Process Using Visible Sensitive Information\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nA process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.\n\n### Extended Description\nMany operating systems allow a user to list information about processes that are owned by other users. Other users could see information such as command line arguments or environment variable settings. When this data contains sensitive information such as credentials, it might allow other users to launch an attack against the product or related resources.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-497\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Research Gap]** Under-studied, especially environment variables.\n\n\n\n### Observed Examples\n- **CVE-2005-1387:** password passed on command line\n- **CVE-2005-2291:** password passed on command line\n- **CVE-2001-1565:** username/password on command line allows local users to view via \"ps\" or other process listing programs\n\n\n\n\n## CWE-1272: Sensitive Information Uncleared Before Debug/Power State Transition\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.\n\n### Extended Description\n\n\nA device or system frequently employs many power and sleep states during its normal operation (e.g., normal power, additional power, low power, hibernate, deep sleep, etc.). A device also may be operating within a debug condition. State transitions can happen from one power or debug state to another. If there is information available in the previous state which should not be available in the next state and is not properly removed before the transition into the next state, sensitive information may leak from the system.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-226\nCanPrecede -> CWE-200\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2020-12926:** Product software does not set a flag as per TPM specifications, thereby preventing a failed authorization attempt from being recorded after a loss of power.\n\n\n\n\n## CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.\n\n### Extended Description\nThe HttpOnly flag directs compatible browsers to prevent client-side script from accessing cookies. Including the HttpOnly flag in the Set-Cookie HTTP response header helps mitigate the risk associated with Cross-Site Scripting (XSS) where an attacker's script code might attempt to read the contents of a cookie and exfiltrate information obtained. When set, browsers that support the flag will not reveal the contents of the cookie to a third party via client-side script executed via XSS.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-732\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-24045:** Web application for a room automation system has client-side Javascript that sets a sensitive cookie without the HTTPOnly security attribute, allowing the cookie to be accessed.\n- **CVE-2014-3852:** CMS written in Python does not include the HTTPOnly flag in a Set-Cookie header, allowing remote attackers to obtain potentially sensitive information via script access to this cookie.\n- **CVE-2015-4138:** Appliance for managing encrypted communications does not use HttpOnly flag.\n\n\n\n\n## CWE-61: UNIX Symbolic Link (Symlink) Following\n**Abstraction:** Compound\n**Status:** Incomplete\n\n### Description\nThe product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.\n\n### Extended Description\nA product that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access.\n\n### Alternative Terms\nSymlink following\nsymlink vulnerability\n\n### Relationships\nChildOf -> CWE-59\nRequires -> CWE-362\nRequires -> CWE-340\nRequires -> CWE-386\nRequires -> CWE-732\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n**Comments:** While attack-oriented composites are supported in CWE, they have not been a focus of research. There is a chance that future research or CWE scope clarifications will change or deprecate them. Perform root-cause analysis to determine which weaknesses allow symlink following to occur, and map to those weaknesses. For example, predictable file names might be intended functionality, but creation in a directory with insecure permissions might not.\n**Reasons:**\n- Other\n\n\n### Additional Notes\n**[Research Gap]** \n\nSymlink vulnerabilities are regularly found in C and shell programs, but all programming languages can have this problem. Even shell programs are probably under-reported.\n\n\n\"Second-order symlink vulnerabilities\" may exist in programs that invoke other programs that follow symlinks. They are rarely reported but are likely to be fairly common when process invocation is used [REF-493].\n\n\n\n\n### Observed Examples\n- **CVE-1999-1386:** Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.\n- **CVE-2000-1178:** Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.\n- **CVE-2004-0217:** Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.\n\n\n\n\n## CWE-287: Improper Authentication\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nWhen an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nauthentification: An alternate term is \"authentification\", which appears to be most commonly used by people from non-English-speaking countries.\nAuthN: \"AuthN\" is typically used as an abbreviation of \"authentication\" within the web application security community. It is also distinct from \"AuthZ,\" which is an abbreviation of \"authorization.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\nAuthC: \"AuthC\" is used as an abbreviation of \"authentication,\" but it appears to used less frequently than \"AuthN.\"\n\n### Relationships\nChildOf -> CWE-284\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** This CWE entry might be misused when lower-level CWE entries are likely to be applicable. It is a level-1 Class (i.e., a child of a Pillar).\n**Comments:** Consider children or descendants, beginning with CWE-1390: Weak Authentication or CWE-306: Missing Authentication for Critical Function.\n**Reasons:**\n- Frequent Misuse\n**Suggested Alternatives:**\n- CWE-1390: Weak Authentication\n- CWE-306: Missing Authentication for Critical Function\n\n\n### Additional Notes\n**[Relationship]** This can be resultant from SQL injection vulnerabilities and other issues.\n\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-35248:** Chat application skips validation when Central Authentication Service (CAS) is enabled, effectively removing the second factor from two-factor authentication\n- **CVE-2022-36436:** Python-based authentication proxy does not enforce password authentication during the initial handshake, allowing the client to bypass authentication by specifying a 'None' authentication type.\n- **CVE-2022-30034:** Chain: Web UI for a Python RPC framework does not use regex anchors to validate user login emails (CWE-777), potentially allowing bypass of OAuth (CWE-1390).\n\n Consider specifically these CWEs: CWE-918 CWE-41 CWE-807 CWE-59 CWE-22 CWE-212 CWE-863 CWE-61 CWE-303",
  "keyphrases": {
    "original_query": "## Vulnerability Description\nThe version of podman as released for Red Hat Enterprise Linux 7 Extras via RHSA-20222190 advisory included an incorrect version of podman missing the fix for CVE-2020-14370, which was previously fixed via RHSA-20205056. This issue could possibly allow an attacker to gain access to sensitive information stored in environment variables.\n\n### Vulnerability Description Key Phrases\n- **impact:** gain access to sensitive information stored in environment variables\n- **attacker:** attacker\n- **product:** podman for Red Hat Enterprise Linux 7 Extras\n\n## CVE Reference Links Content Summary\n```\n{\n  \"vulnerability_details\": {\n    \"root_cause\": \"A security regression was introduced in a podman package, specifically version podman-1.6.4-32.el7_9, released for Red Hat Enterprise Linux 7 Extras. This version inadvertently lacked the fix for CVE-2020-14370, which was previously addressed. The regression occurred due to an incorrect version of podman being included in the RHSA-2022:2190 advisory.\",\n    \"weaknesses\": [\n      \"The primary weakness lies in the failure to include the necessary fix for CVE-2020-14370 in the released podman package.\",\n      \"A source code management issue led to the inclusion of an incorrect podman version.\"\n    ],\n    \"impact\": \"This vulnerability allows an attacker with control over subsequent containers to access sensitive information stored in environment variables. The original issue, CVE-2020-14370, involved environment variable leakage between containers when started via the deprecated Varlink API or Docker-compatible REST API. This vulnerability regression allows a potential attacker to gain access to secrets shared with previous containers through environment variables.\",\n    \"attack_vectors\": [\n      \"An attacker must have the ability to create multiple containers within a short period using the deprecated Varlink API or Docker-compatible REST API.\",\n       \"The attacker would then need control over a container created after a previous container that defined sensitive environment variables to exploit the leakage and access those variables.\"\n    ],\n    \"required_attacker_capabilities\": \"The attacker needs to be able to create and control multiple containers via the deprecated Varlink API or Docker-compatible REST API, and the containers need to be created in a short duration to trigger the leakage.\"\n  }\n}\n```\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 526 | Cleartext Storage of Sensitive Information in an Environment Variable | Variant | Allowed | sparse | 0.179 |\n| 2 | 918 | Server-Side Request Forgery (SSRF) | Base | Allowed | sparse | 0.097 |\n| 3 | 201 | Insertion of Sensitive Information Into Sent Data | Base | Allowed | sparse | 0.089 |\n| 4 | 863 | Incorrect Authorization | Class | Allowed-with-Review | sparse | 0.088 |\n| 5 | 22 | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') | Base | Allowed | sparse | 0.088 |\n| 6 | 214 | Invocation of Process Using Visible Sensitive Information | Base | Allowed | dense | 0.497 |\n| 7 | 1272 | Sensitive Information Uncleared Before Debug/Power State Transition | Base | Allowed | graph | 0.002 |\n| 8 | 1004 | Sensitive Cookie Without 'HttpOnly' Flag | Variant | Allowed | sparse | 0.087 |\n| 9 | 61 | UNIX Symbolic Link (Symlink) Following | Compound | Allowed | sparse | 0.086 |\n| 10 | 287 | Improper Authentication | Class | Discouraged | sparse | 0.086 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-526: Cleartext Storage of Sensitive Information in an Environment Variable\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses an environment variable to store unencrypted sensitive information.\n\n### Extended Description\nInformation stored in an environment variable can be accessible by other processes with the execution context, including child processes that dependencies are executed in, or serverless functions in cloud environments. An environment variable's contents can also be inserted into messages, headers, log files, or other outputs. Often these other dependencies have no need to use the environment variable in question. A weakness that discloses environment variables could expose this information.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-312\nPeerOf -> CWE-214\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-43691:** CMS shows sensitive server-side information from environment variables when run in Debug mode.\n- **CVE-2022-27195:** Plugin for an automation server inserts environment variable contents into build XML files.\n- **CVE-2022-25264:** CI/CD tool logs environment variables related to passwords add Contribution to content history.\n\n\n\n\n## CWE-918: Server-Side Request Forgery (SSRF)\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nXSPA: Cross Site Port Attack\nSSRF: Server-Side Request Forgery\n\n### Relationships\nChildOf -> CWE-441\nChildOf -> CWE-610\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** CWE-918 (SSRF) and CWE-611 (XXE) are closely related, because they both involve web-related technologies and can launch outbound requests to unexpected destinations. However, XXE can be performed client-side, or in other contexts in which the software is not acting directly as a server, so the \"Server\" portion of the SSRF acronym does not necessarily apply.\n\n\n\n### Observed Examples\n- **CVE-2023-32786:** Chain: LLM integration framework has prompt injection (CWE-1427) that allows an attacker to force the service to retrieve data from an arbitrary URL, essentially providing SSRF (CWE-918) and potentially injecting content into downstream tasks.\n- **CVE-2021-26855:** Server Side Request Forgery (SSRF) in mail server, as exploited in the wild per CISA KEV.\n- **CVE-2021-21973:** Server Side Request Forgery in cloud platform, as exploited in the wild per CISA KEV.\n\n\n\n\n## CWE-201: Insertion of Sensitive Information Into Sent Data\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-200\nCanAlsoBe -> CWE-209\nCanAlsoBe -> CWE-202\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure).\n\n\n\n### Observed Examples\n- **CVE-2022-0708:** Collaboration platform does not clear team emails in a response, allowing leak of email addresses\n\n\n\n\n## CWE-863: Incorrect Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** \n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n\n### Observed Examples\n- **CVE-2021-39155:** Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.\n- **CVE-2019-15900:** Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).\n- **CVE-2009-2213:** Gateway uses default \"Allow\" configuration for its authorization settings.\n\n\n\n\n## CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n### Extended Description\n\n\nMany file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\" to access unexpected files. This is referred to as absolute path traversal.\n\n\n### Alternative Terms\nDirectory traversal\nPath traversal: \"Path traversal\" is preferred over \"directory traversal,\" but both terms are attack-focused.\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to apply to a wider range of files. For example, the product may add \".txt\" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.\n\n**[Relationship]** Pathname equivalence can be regarded as a type of canonicalization error.\n\n**[Relationship]** Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing \"/\" on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not).\n\n**[Terminology]** \n\nLike other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use \"directory traversal\" only to refer to the injection of \"..\" and equivalent sequences whose specific meaning is to traverse directories.\n\n\nOther variants like \"absolute pathname\" and \"drive letter\" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve \"..\" or equivalent.\n\n\n**[Research Gap]** Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap.\n\n**[Research Gap]** \n\nIncomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that \"..\\\" is vulnerable, but not test \"../\" which may also be vulnerable.\n\n\nAny combination of directory separators (\"/\", \"\\\", etc.) and numbers of \".\" (e.g. \"....\") can produce unique variants; for example, the \"//../\" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.\n\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2024-4315:** Chain: API for text generation using Large Language Models (LLMs) does not include the \"\\\" Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n\n\n\n\n## CWE-214: Invocation of Process Using Visible Sensitive Information\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nA process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.\n\n### Extended Description\nMany operating systems allow a user to list information about processes that are owned by other users. Other users could see information such as command line arguments or environment variable settings. When this data contains sensitive information such as credentials, it might allow other users to launch an attack against the product or related resources.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-497\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Research Gap]** Under-studied, especially environment variables.\n\n\n\n### Observed Examples\n- **CVE-2005-1387:** password passed on command line\n- **CVE-2005-2291:** password passed on command line\n- **CVE-2001-1565:** username/password on command line allows local users to view via \"ps\" or other process listing programs\n\n\n\n\n## CWE-1272: Sensitive Information Uncleared Before Debug/Power State Transition\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.\n\n### Extended Description\n\n\nA device or system frequently employs many power and sleep states during its normal operation (e.g., normal power, additional power, low power, hibernate, deep sleep, etc.). A device also may be operating within a debug condition. State transitions can happen from one power or debug state to another. If there is information available in the previous state which should not be available in the next state and is not properly removed before the transition into the next state, sensitive information may leak from the system.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-226\nCanPrecede -> CWE-200\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2020-12926:** Product software does not set a flag as per TPM specifications, thereby preventing a failed authorization attempt from being recorded after a loss of power.\n\n\n\n\n## CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.\n\n### Extended Description\nThe HttpOnly flag directs compatible browsers to prevent client-side script from accessing cookies. Including the HttpOnly flag in the Set-Cookie HTTP response header helps mitigate the risk associated with Cross-Site Scripting (XSS) where an attacker's script code might attempt to read the contents of a cookie and exfiltrate information obtained. When set, browsers that support the flag will not reveal the contents of the cookie to a third party via client-side script executed via XSS.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-732\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-24045:** Web application for a room automation system has client-side Javascript that sets a sensitive cookie without the HTTPOnly security attribute, allowing the cookie to be accessed.\n- **CVE-2014-3852:** CMS written in Python does not include the HTTPOnly flag in a Set-Cookie header, allowing remote attackers to obtain potentially sensitive information via script access to this cookie.\n- **CVE-2015-4138:** Appliance for managing encrypted communications does not use HttpOnly flag.\n\n\n\n\n## CWE-61: UNIX Symbolic Link (Symlink) Following\n**Abstraction:** Compound\n**Status:** Incomplete\n\n### Description\nThe product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.\n\n### Extended Description\nA product that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access.\n\n### Alternative Terms\nSymlink following\nsymlink vulnerability\n\n### Relationships\nChildOf -> CWE-59\nRequires -> CWE-362\nRequires -> CWE-340\nRequires -> CWE-386\nRequires -> CWE-732\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n**Comments:** While attack-oriented composites are supported in CWE, they have not been a focus of research. There is a chance that future research or CWE scope clarifications will change or deprecate them. Perform root-cause analysis to determine which weaknesses allow symlink following to occur, and map to those weaknesses. For example, predictable file names might be intended functionality, but creation in a directory with insecure permissions might not.\n**Reasons:**\n- Other\n\n\n### Additional Notes\n**[Research Gap]** \n\nSymlink vulnerabilities are regularly found in C and shell programs, but all programming languages can have this problem. Even shell programs are probably under-reported.\n\n\n\"Second-order symlink vulnerabilities\" may exist in programs that invoke other programs that follow symlinks. They are rarely reported but are likely to be fairly common when process invocation is used [REF-493].\n\n\n\n\n### Observed Examples\n- **CVE-1999-1386:** Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.\n- **CVE-2000-1178:** Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.\n- **CVE-2004-0217:** Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.\n\n\n\n\n## CWE-287: Improper Authentication\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nWhen an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nauthentification: An alternate term is \"authentification\", which appears to be most commonly used by people from non-English-speaking countries.\nAuthN: \"AuthN\" is typically used as an abbreviation of \"authentication\" within the web application security community. It is also distinct from \"AuthZ,\" which is an abbreviation of \"authorization.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\nAuthC: \"AuthC\" is used as an abbreviation of \"authentication,\" but it appears to used less frequently than \"AuthN.\"\n\n### Relationships\nChildOf -> CWE-284\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** This CWE entry might be misused when lower-level CWE entries are likely to be applicable. It is a level-1 Class (i.e., a child of a Pillar).\n**Comments:** Consider children or descendants, beginning with CWE-1390: Weak Authentication or CWE-306: Missing Authentication for Critical Function.\n**Reasons:**\n- Frequent Misuse\n**Suggested Alternatives:**\n- CWE-1390: Weak Authentication\n- CWE-306: Missing Authentication for Critical Function\n\n\n### Additional Notes\n**[Relationship]** This can be resultant from SQL injection vulnerabilities and other issues.\n\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-35248:** Chat application skips validation when Central Authentication Service (CAS) is enabled, effectively removing the second factor from two-factor authentication\n- **CVE-2022-36436:** Python-based authentication proxy does not enforce password authentication during the initial handshake, allowing the client to bypass authentication by specifying a 'None' authentication type.\n- **CVE-2022-30034:** Chain: Web UI for a Python RPC framework does not use regex anchors to validate user login emails (CWE-777), potentially allowing bypass of OAuth (CWE-1390).\n\n",
    "enhanced_query": "## Vulnerability Description\nThe version of podman as released for Red Hat Enterprise Linux 7 Extras via RHSA-20222190 advisory included an incorrect version of podman missing the fix for CVE-2020-14370, which was previously fixed via RHSA-20205056. This issue could possibly allow an attacker to gain access to sensitive information stored in environment variables.\n\n### Vulnerability Description Key Phrases\n- **impact:** gain access to sensitive information stored in environment variables\n- **attacker:** attacker\n- **product:** podman for Red Hat Enterprise Linux 7 Extras\n\n## CVE Reference Links Content Summary\n```\n{\n  \"vulnerability_details\": {\n    \"root_cause\": \"A security regression was introduced in a podman package, specifically version podman-1.6.4-32.el7_9, released for Red Hat Enterprise Linux 7 Extras. This version inadvertently lacked the fix for CVE-2020-14370, which was previously addressed. The regression occurred due to an incorrect version of podman being included in the RHSA-2022:2190 advisory.\",\n    \"weaknesses\": [\n      \"The primary weakness lies in the failure to include the necessary fix for CVE-2020-14370 in the released podman package.\",\n      \"A source code management issue led to the inclusion of an incorrect podman version.\"\n    ],\n    \"impact\": \"This vulnerability allows an attacker with control over subsequent containers to access sensitive information stored in environment variables. The original issue, CVE-2020-14370, involved environment variable leakage between containers when started via the deprecated Varlink API or Docker-compatible REST API. This vulnerability regression allows a potential attacker to gain access to secrets shared with previous containers through environment variables.\",\n    \"attack_vectors\": [\n      \"An attacker must have the ability to create multiple containers within a short period using the deprecated Varlink API or Docker-compatible REST API.\",\n       \"The attacker would then need control over a container created after a previous container that defined sensitive environment variables to exploit the leakage and access those variables.\"\n    ],\n    \"required_attacker_capabilities\": \"The attacker needs to be able to create and control multiple containers via the deprecated Varlink API or Docker-compatible REST API, and the containers need to be created in a short duration to trigger the leakage.\"\n  }\n}\n```\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 526 | Cleartext Storage of Sensitive Information in an Environment Variable | Variant | Allowed | sparse | 0.179 |\n| 2 | 918 | Server-Side Request Forgery (SSRF) | Base | Allowed | sparse | 0.097 |\n| 3 | 201 | Insertion of Sensitive Information Into Sent Data | Base | Allowed | sparse | 0.089 |\n| 4 | 863 | Incorrect Authorization | Class | Allowed-with-Review | sparse | 0.088 |\n| 5 | 22 | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') | Base | Allowed | sparse | 0.088 |\n| 6 | 214 | Invocation of Process Using Visible Sensitive Information | Base | Allowed | dense | 0.497 |\n| 7 | 1272 | Sensitive Information Uncleared Before Debug/Power State Transition | Base | Allowed | graph | 0.002 |\n| 8 | 1004 | Sensitive Cookie Without 'HttpOnly' Flag | Variant | Allowed | sparse | 0.087 |\n| 9 | 61 | UNIX Symbolic Link (Symlink) Following | Compound | Allowed | sparse | 0.086 |\n| 10 | 287 | Improper Authentication | Class | Discouraged | sparse | 0.086 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-526: Cleartext Storage of Sensitive Information in an Environment Variable\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses an environment variable to store unencrypted sensitive information.\n\n### Extended Description\nInformation stored in an environment variable can be accessible by other processes with the execution context, including child processes that dependencies are executed in, or serverless functions in cloud environments. An environment variable's contents can also be inserted into messages, headers, log files, or other outputs. Often these other dependencies have no need to use the environment variable in question. A weakness that discloses environment variables could expose this information.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-312\nPeerOf -> CWE-214\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-43691:** CMS shows sensitive server-side information from environment variables when run in Debug mode.\n- **CVE-2022-27195:** Plugin for an automation server inserts environment variable contents into build XML files.\n- **CVE-2022-25264:** CI/CD tool logs environment variables related to passwords add Contribution to content history.\n\n\n\n\n## CWE-918: Server-Side Request Forgery (SSRF)\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nXSPA: Cross Site Port Attack\nSSRF: Server-Side Request Forgery\n\n### Relationships\nChildOf -> CWE-441\nChildOf -> CWE-610\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** CWE-918 (SSRF) and CWE-611 (XXE) are closely related, because they both involve web-related technologies and can launch outbound requests to unexpected destinations. However, XXE can be performed client-side, or in other contexts in which the software is not acting directly as a server, so the \"Server\" portion of the SSRF acronym does not necessarily apply.\n\n\n\n### Observed Examples\n- **CVE-2023-32786:** Chain: LLM integration framework has prompt injection (CWE-1427) that allows an attacker to force the service to retrieve data from an arbitrary URL, essentially providing SSRF (CWE-918) and potentially injecting content into downstream tasks.\n- **CVE-2021-26855:** Server Side Request Forgery (SSRF) in mail server, as exploited in the wild per CISA KEV.\n- **CVE-2021-21973:** Server Side Request Forgery in cloud platform, as exploited in the wild per CISA KEV.\n\n\n\n\n## CWE-201: Insertion of Sensitive Information Into Sent Data\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-200\nCanAlsoBe -> CWE-209\nCanAlsoBe -> CWE-202\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure).\n\n\n\n### Observed Examples\n- **CVE-2022-0708:** Collaboration platform does not clear team emails in a response, allowing leak of email addresses\n\n\n\n\n## CWE-863: Incorrect Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** \n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n\n### Observed Examples\n- **CVE-2021-39155:** Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.\n- **CVE-2019-15900:** Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).\n- **CVE-2009-2213:** Gateway uses default \"Allow\" configuration for its authorization settings.\n\n\n\n\n## CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n### Extended Description\n\n\nMany file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\" to access unexpected files. This is referred to as absolute path traversal.\n\n\n### Alternative Terms\nDirectory traversal\nPath traversal: \"Path traversal\" is preferred over \"directory traversal,\" but both terms are attack-focused.\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to apply to a wider range of files. For example, the product may add \".txt\" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.\n\n**[Relationship]** Pathname equivalence can be regarded as a type of canonicalization error.\n\n**[Relationship]** Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing \"/\" on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not).\n\n**[Terminology]** \n\nLike other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use \"directory traversal\" only to refer to the injection of \"..\" and equivalent sequences whose specific meaning is to traverse directories.\n\n\nOther variants like \"absolute pathname\" and \"drive letter\" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve \"..\" or equivalent.\n\n\n**[Research Gap]** Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap.\n\n**[Research Gap]** \n\nIncomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that \"..\\\" is vulnerable, but not test \"../\" which may also be vulnerable.\n\n\nAny combination of directory separators (\"/\", \"\\\", etc.) and numbers of \".\" (e.g. \"....\") can produce unique variants; for example, the \"//../\" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.\n\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2024-4315:** Chain: API for text generation using Large Language Models (LLMs) does not include the \"\\\" Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n\n\n\n\n## CWE-214: Invocation of Process Using Visible Sensitive Information\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nA process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.\n\n### Extended Description\nMany operating systems allow a user to list information about processes that are owned by other users. Other users could see information such as command line arguments or environment variable settings. When this data contains sensitive information such as credentials, it might allow other users to launch an attack against the product or related resources.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-497\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Research Gap]** Under-studied, especially environment variables.\n\n\n\n### Observed Examples\n- **CVE-2005-1387:** password passed on command line\n- **CVE-2005-2291:** password passed on command line\n- **CVE-2001-1565:** username/password on command line allows local users to view via \"ps\" or other process listing programs\n\n\n\n\n## CWE-1272: Sensitive Information Uncleared Before Debug/Power State Transition\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.\n\n### Extended Description\n\n\nA device or system frequently employs many power and sleep states during its normal operation (e.g., normal power, additional power, low power, hibernate, deep sleep, etc.). A device also may be operating within a debug condition. State transitions can happen from one power or debug state to another. If there is information available in the previous state which should not be available in the next state and is not properly removed before the transition into the next state, sensitive information may leak from the system.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-226\nCanPrecede -> CWE-200\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2020-12926:** Product software does not set a flag as per TPM specifications, thereby preventing a failed authorization attempt from being recorded after a loss of power.\n\n\n\n\n## CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.\n\n### Extended Description\nThe HttpOnly flag directs compatible browsers to prevent client-side script from accessing cookies. Including the HttpOnly flag in the Set-Cookie HTTP response header helps mitigate the risk associated with Cross-Site Scripting (XSS) where an attacker's script code might attempt to read the contents of a cookie and exfiltrate information obtained. When set, browsers that support the flag will not reveal the contents of the cookie to a third party via client-side script executed via XSS.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-732\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-24045:** Web application for a room automation system has client-side Javascript that sets a sensitive cookie without the HTTPOnly security attribute, allowing the cookie to be accessed.\n- **CVE-2014-3852:** CMS written in Python does not include the HTTPOnly flag in a Set-Cookie header, allowing remote attackers to obtain potentially sensitive information via script access to this cookie.\n- **CVE-2015-4138:** Appliance for managing encrypted communications does not use HttpOnly flag.\n\n\n\n\n## CWE-61: UNIX Symbolic Link (Symlink) Following\n**Abstraction:** Compound\n**Status:** Incomplete\n\n### Description\nThe product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.\n\n### Extended Description\nA product that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access.\n\n### Alternative Terms\nSymlink following\nsymlink vulnerability\n\n### Relationships\nChildOf -> CWE-59\nRequires -> CWE-362\nRequires -> CWE-340\nRequires -> CWE-386\nRequires -> CWE-732\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n**Comments:** While attack-oriented composites are supported in CWE, they have not been a focus of research. There is a chance that future research or CWE scope clarifications will change or deprecate them. Perform root-cause analysis to determine which weaknesses allow symlink following to occur, and map to those weaknesses. For example, predictable file names might be intended functionality, but creation in a directory with insecure permissions might not.\n**Reasons:**\n- Other\n\n\n### Additional Notes\n**[Research Gap]** \n\nSymlink vulnerabilities are regularly found in C and shell programs, but all programming languages can have this problem. Even shell programs are probably under-reported.\n\n\n\"Second-order symlink vulnerabilities\" may exist in programs that invoke other programs that follow symlinks. They are rarely reported but are likely to be fairly common when process invocation is used [REF-493].\n\n\n\n\n### Observed Examples\n- **CVE-1999-1386:** Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.\n- **CVE-2000-1178:** Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.\n- **CVE-2004-0217:** Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.\n\n\n\n\n## CWE-287: Improper Authentication\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nWhen an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nauthentification: An alternate term is \"authentification\", which appears to be most commonly used by people from non-English-speaking countries.\nAuthN: \"AuthN\" is typically used as an abbreviation of \"authentication\" within the web application security community. It is also distinct from \"AuthZ,\" which is an abbreviation of \"authorization.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\nAuthC: \"AuthC\" is used as an abbreviation of \"authentication,\" but it appears to used less frequently than \"AuthN.\"\n\n### Relationships\nChildOf -> CWE-284\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** This CWE entry might be misused when lower-level CWE entries are likely to be applicable. It is a level-1 Class (i.e., a child of a Pillar).\n**Comments:** Consider children or descendants, beginning with CWE-1390: Weak Authentication or CWE-306: Missing Authentication for Critical Function.\n**Reasons:**\n- Frequent Misuse\n**Suggested Alternatives:**\n- CWE-1390: Weak Authentication\n- CWE-306: Missing Authentication for Critical Function\n\n\n### Additional Notes\n**[Relationship]** This can be resultant from SQL injection vulnerabilities and other issues.\n\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-35248:** Chat application skips validation when Central Authentication Service (CAS) is enabled, effectively removing the second factor from two-factor authentication\n- **CVE-2022-36436:** Python-based authentication proxy does not enforce password authentication during the initial handshake, allowing the client to bypass authentication by specifying a 'None' authentication type.\n- **CVE-2022-30034:** Chain: Web UI for a Python RPC framework does not use regex anchors to validate user login emails (CWE-777), potentially allowing bypass of OAuth (CWE-1390).\n\n Consider specifically these CWEs: CWE-918 CWE-41 CWE-807 CWE-59 CWE-22 CWE-212 CWE-863 CWE-61 CWE-303",
    "cwe_mentions": [
      "CWE-918",
      "CWE-41",
      "CWE-807",
      "CWE-59",
      "CWE-22",
      "CWE-212",
      "CWE-863",
      "CWE-61",
      "CWE-303"
    ],
    "search_time": 2.779873847961426
  },
  "timestamp": "2025-03-30 16:26:36",
  "cve_id": "unknown",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "type": "base",
      "score": 5.031000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "386",
      "name": "Symbolic Name not Mapping to Correct Object",
      "type": "base",
      "score": 4.914000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "73",
      "name": "External Control of File Name or Path",
      "type": "base",
      "score": 4.8204,
      "relationship_count": 0
    },
    {
      "cwe_id": "1272",
      "name": "Sensitive Information Uncleared Before Debug/Power State Transition",
      "type": "base",
      "score": 4.329000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "22",
      "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
      "type": "base",
      "score": 4.329000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "226",
      "name": "Sensitive Information in Resource Not Removed Before Reuse",
      "type": "base",
      "score": 4.329000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "214",
      "name": "Invocation of Process Using Visible Sensitive Information",
      "type": "base",
      "score": 3.6399999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "209",
      "name": "Generation of Error Message Containing Sensitive Information",
      "type": "base",
      "score": 3.6399999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "611",
      "name": "Improper Restriction of XML External Entity Reference",
      "type": "base",
      "score": 3.6399999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "178",
      "name": "Improper Handling of Case Sensitivity",
      "type": "base",
      "score": 3.6399999999999997,
      "relationship_count": 0
    }
  ]
}